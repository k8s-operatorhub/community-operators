apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  creationTimestamp: null
  name: keys.kms.services.k8s.aws
spec:
  group: kms.services.k8s.aws
  names:
    kind: Key
    listKind: KeyList
    plural: keys
    singular: key
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Key is the Schema for the Keys API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KeySpec defines the desired state of Key.
            properties:
              bypassPolicyLockoutSafetyCheck:
                description: "A flag to indicate whether to bypass the key policy
                  lockout safety check. \n Setting this value to true increases the
                  risk that the CMK becomes unmanageable. Do not set this value to
                  true indiscriminately. \n For more information, refer to the scenario
                  in the Default Key Policy (https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam)
                  section in the AWS Key Management Service Developer Guide . \n Use
                  this parameter only when you include a policy in the request and
                  you intend to prevent the principal that is making the request from
                  making a subsequent PutKeyPolicy request on the CMK. \n The default
                  value is false."
                type: boolean
              customKeyStoreID:
                description: "Creates the CMK in the specified custom key store (https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html)
                  and the key material in its associated AWS CloudHSM cluster. To
                  create a CMK in a custom key store, you must also specify the Origin
                  parameter with a value of AWS_CLOUDHSM. The AWS CloudHSM cluster
                  that is associated with the custom key store must have at least
                  two active HSMs, each in a different Availability Zone in the Region.
                  \n This parameter is valid only for symmetric CMKs. You cannot create
                  an asymmetric CMK in a custom key store. \n To find the ID of a
                  custom key store, use the DescribeCustomKeyStores operation. \n
                  The response includes the custom key store ID and the ID of the
                  AWS CloudHSM cluster. \n This operation is part of the Custom Key
                  Store feature (https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html)
                  feature in AWS KMS, which combines the convenience and extensive
                  integration of AWS KMS with the isolation and control of a single-tenant
                  key store."
                type: string
              description:
                description: "A description of the CMK. \n Use a description that
                  helps you decide whether the CMK is appropriate for a task."
                type: string
              keyUsage:
                description: "Determines the cryptographic operations (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations)
                  for which you can use the CMK. The default value is ENCRYPT_DECRYPT.
                  This parameter is required only for asymmetric CMKs. You can't change
                  the KeyUsage value after the CMK is created. \n Select only one
                  valid value. \n    * For symmetric CMKs, omit the parameter or specify
                  ENCRYPT_DECRYPT. \n    * For asymmetric CMKs with RSA key material,
                  specify ENCRYPT_DECRYPT or    SIGN_VERIFY. \n    * For asymmetric
                  CMKs with ECC key material, specify SIGN_VERIFY."
                type: string
              origin:
                description: "The source of the key material for the CMK. You cannot
                  change the origin after you create the CMK. The default is AWS_KMS,
                  which means AWS KMS creates the key material. \n When the parameter
                  value is EXTERNAL, AWS KMS creates a CMK without key material so
                  that you can import key material from your existing key management
                  infrastructure. For more information about importing key material
                  into AWS KMS, see Importing Key Material (https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html)
                  in the AWS Key Management Service Developer Guide. This value is
                  valid only for symmetric CMKs. \n When the parameter value is AWS_CLOUDHSM,
                  AWS KMS creates the CMK in an AWS KMS custom key store (https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html)
                  and creates its key material in the associated AWS CloudHSM cluster.
                  You must also use the CustomKeyStoreId parameter to identify the
                  custom key store. This value is valid only for symmetric CMKs."
                type: string
              policy:
                description: "The key policy to attach to the CMK. \n If you provide
                  a key policy, it must meet the following criteria: \n    * If you
                  don't set BypassPolicyLockoutSafetyCheck to true, the key policy
                  \   must allow the principal that is making the CreateKey request
                  to make    a subsequent PutKeyPolicy request on the CMK. This reduces
                  the risk that    the CMK becomes unmanageable. For more information,
                  refer to the scenario    in the Default Key Policy (https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam)
                  \   section of the AWS Key Management Service Developer Guide .
                  \n    * Each statement in the key policy must contain one or more
                  principals.    The principals in the key policy must exist and be
                  visible to AWS KMS.    When you create a new AWS principal (for
                  example, an IAM user or role),    you might need to enforce a delay
                  before including the new principal in    a key policy because the
                  new principal might not be immediately visible    to AWS KMS. For
                  more information, see Changes that I make are not always    immediately
                  visible (https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency)
                  \   in the AWS Identity and Access Management User Guide. \n If
                  you do not provide a key policy, AWS KMS attaches a default key
                  policy to the CMK. For more information, see Default Key Policy
                  (https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default)
                  in the AWS Key Management Service Developer Guide. \n The key policy
                  size quota is 32 kilobytes (32768 bytes). \n For help writing and
                  formatting a JSON policy document, see the IAM JSON Policy Reference
                  (https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html)
                  in the IAM User Guide ."
                type: string
              tags:
                description: "One or more tags. Each tag consists of a tag key and
                  a tag value. Both the tag key and the tag value are required, but
                  the tag value can be an empty (null) string. \n When you add tags
                  to an AWS resource, AWS generates a cost allocation report with
                  usage and costs aggregated by tags. For information about adding,
                  changing, deleting and listing tags for CMKs, see Tagging Keys (https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html).
                  \n Use this parameter to tag the CMK when it is created. To add
                  tags to an existing CMK, use the TagResource operation. \n To use
                  this parameter, you must have kms:TagResource (https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html)
                  permission in an IAM policy."
                items:
                  description: "A key-value pair. A tag consists of a tag key and
                    a tag value. Tag keys and tag values are both required, but tag
                    values can be empty (null) strings. \n For information about the
                    rules that apply to tag keys and tag values, see User-Defined
                    Tag Restrictions (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/allocation-tag-restrictions.html)
                    in the AWS Billing and Cost Management User Guide."
                  properties:
                    tagKey:
                      type: string
                    tagValue:
                      type: string
                  type: object
                type: array
            type: object
          status:
            description: KeyStatus defines the observed state of Key
            properties:
              ackResourceMetadata:
                description: All CRs managed by ACK have a common `Status.ACKResourceMetadata`
                  member that is used to contain resource sync state, account ownership,
                  constructed ARN for the resource
                properties:
                  arn:
                    description: 'ARN is the Amazon Resource Name for the resource.
                      This is a globally-unique identifier and is set only by the
                      ACK service controller once the controller has orchestrated
                      the creation of the resource OR when it has verified that an
                      "adopted" resource (a resource where the ARN annotation was
                      set by the Kubernetes user on the CR) exists and matches the
                      supplied CR''s Spec field values. TODO(vijat@): Find a better
                      strategy for resources that do not have ARN in CreateOutputResponse
                      https://github.com/aws/aws-controllers-k8s/issues/270'
                    type: string
                  ownerAccountID:
                    description: OwnerAccountID is the AWS Account ID of the account
                      that owns the backend AWS service API resource.
                    type: string
                required:
                - ownerAccountID
                type: object
              awsAccountID:
                description: The twelve-digit account ID of the AWS account that owns
                  the CMK.
                type: string
              cloudHsmClusterID:
                description: The cluster ID of the AWS CloudHSM cluster that contains
                  the key material for the CMK. When you create a CMK in a custom
                  key store (https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html),
                  AWS KMS creates the key material for the CMK in the associated AWS
                  CloudHSM cluster. This value is present only when the CMK is created
                  in a custom key store.
                type: string
              conditions:
                description: All CRS managed by ACK have a common `Status.Conditions`
                  member that contains a collection of `ackv1alpha1.Condition` objects
                  that describe the various terminal states of the CR and its backend
                  AWS service API resource
                items:
                  description: Condition is the common struct used by all CRDs managed
                    by ACK service controllers to indicate terminal states  of the
                    CR and its backend AWS service API resource
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type is the type of the Condition
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              creationDate:
                description: The date and time when the CMK was created.
                format: date-time
                type: string
              deletionDate:
                description: The date and time after which AWS KMS deletes the CMK.
                  This value is present only when KeyState is PendingDeletion.
                format: date-time
                type: string
              enabled:
                description: Specifies whether the CMK is enabled. When KeyState is
                  Enabled this value is true, otherwise it is false.
                type: boolean
              encryptionAlgorithms:
                description: "The encryption algorithms that the CMK supports. You
                  cannot use the CMK with other encryption algorithms within AWS KMS.
                  \n This field appears only when the KeyUsage of the CMK is ENCRYPT_DECRYPT."
                items:
                  type: string
                type: array
              expirationModel:
                description: Specifies whether the CMK's key material expires. This
                  value is present only when Origin is EXTERNAL, otherwise this value
                  is omitted.
                type: string
              keyID:
                description: The globally unique identifier for the CMK.
                type: string
              keyManager:
                description: The manager of the CMK. CMKs in your AWS account are
                  either customer managed or AWS managed. For more information about
                  the difference, see Customer Master Keys (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#master_keys)
                  in the AWS Key Management Service Developer Guide.
                type: string
              keyState:
                description: "The current status of the CMK. \n For more information
                  about how key state affects the use of a CMK, see Key state: Effect
                  on your CMK (https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html)
                  in the AWS Key Management Service Developer Guide."
                type: string
              signingAlgorithms:
                description: "The signing algorithms that the CMK supports. You cannot
                  use the CMK with other signing algorithms within AWS KMS. \n This
                  field appears only when the KeyUsage of the CMK is SIGN_VERIFY."
                items:
                  type: string
                type: array
              validTo:
                description: The time at which the imported key material expires.
                  When the key material expires, AWS KMS deletes the key material
                  and the CMK becomes unusable. This value is present only for CMKs
                  whose Origin is EXTERNAL and whose ExpirationModel is KEY_MATERIAL_EXPIRES,
                  otherwise this value is omitted.
                format: date-time
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
