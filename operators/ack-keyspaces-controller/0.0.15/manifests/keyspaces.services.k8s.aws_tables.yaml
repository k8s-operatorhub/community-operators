apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  creationTimestamp: null
  name: tables.keyspaces.services.k8s.aws
spec:
  group: keyspaces.services.k8s.aws
  names:
    kind: Table
    listKind: TableList
    plural: tables
    singular: table
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Table is the Schema for the Tables API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: TableSpec defines the desired state of Table.
            properties:
              capacitySpecification:
                description: |-
                  Specifies the read/write throughput capacity mode for the table. The options
                  are:


                     * throughputMode:PAY_PER_REQUEST and


                     * throughputMode:PROVISIONED - Provisioned capacity mode requires readCapacityUnits
                     and writeCapacityUnits as input.


                  The default is throughput_mode:PAY_PER_REQUEST.


                  For more information, see Read/write capacity modes (https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html)
                  in the Amazon Keyspaces Developer Guide.
                properties:
                  readCapacityUnits:
                    format: int64
                    type: integer
                  throughputMode:
                    type: string
                  writeCapacityUnits:
                    format: int64
                    type: integer
                type: object
              clientSideTimestamps:
                description: |-
                  Enables client-side timestamps for the table. By default, the setting is
                  disabled. You can enable client-side timestamps with the following option:


                     * status: "enabled"


                  Once client-side timestamps are enabled for a table, this setting cannot
                  be disabled.
                properties:
                  status:
                    type: string
                type: object
              comment:
                description: This parameter allows to enter a description of the table.
                properties:
                  message:
                    type: string
                type: object
              defaultTimeToLive:
                description: |-
                  The default Time to Live setting in seconds for the table.


                  For more information, see Setting the default TTL value for a table (https://docs.aws.amazon.com/keyspaces/latest/devguide/TTL-how-it-works.html#ttl-howitworks_default_ttl)
                  in the Amazon Keyspaces Developer Guide.
                format: int64
                type: integer
              encryptionSpecification:
                description: |-
                  Specifies how the encryption key for encryption at rest is managed for the
                  table. You can choose one of the following KMS key (KMS key):


                     * type:AWS_OWNED_KMS_KEY - This key is owned by Amazon Keyspaces.


                     * type:CUSTOMER_MANAGED_KMS_KEY - This key is stored in your account and
                     is created, owned, and managed by you. This option requires the kms_key_identifier
                     of the KMS key in Amazon Resource Name (ARN) format as input.


                  The default is type:AWS_OWNED_KMS_KEY.


                  For more information, see Encryption at rest (https://docs.aws.amazon.com/keyspaces/latest/devguide/EncryptionAtRest.html)
                  in the Amazon Keyspaces Developer Guide.
                properties:
                  kmsKeyIdentifier:
                    type: string
                  type_:
                    type: string
                type: object
              keyspaceName:
                description: The name of the keyspace that the table is going to be
                  created in.
                type: string
              pointInTimeRecovery:
                description: |-
                  Specifies if pointInTimeRecovery is enabled or disabled for the table. The
                  options are:


                     * status=ENABLED


                     * status=DISABLED


                  If it's not specified, the default is status=DISABLED.


                  For more information, see Point-in-time recovery (https://docs.aws.amazon.com/keyspaces/latest/devguide/PointInTimeRecovery.html)
                  in the Amazon Keyspaces Developer Guide.
                properties:
                  status:
                    type: string
                type: object
              schemaDefinition:
                description: |-
                  The schemaDefinition consists of the following parameters.


                  For each column to be created:


                     * name - The name of the column.


                     * type - An Amazon Keyspaces data type. For more information, see Data
                     types (https://docs.aws.amazon.com/keyspaces/latest/devguide/cql.elements.html#cql.data-types)
                     in the Amazon Keyspaces Developer Guide.


                  The primary key of the table consists of the following columns:


                     * partitionKeys - The partition key can be a single column, or it can
                     be a compound value composed of two or more columns. The partition key
                     portion of the primary key is required and determines how Amazon Keyspaces
                     stores your data.


                     * name - The name of each partition key column.


                     * clusteringKeys - The optional clustering column portion of your primary
                     key determines how the data is clustered and sorted within each partition.


                     * name - The name of the clustering column.


                     * orderBy - Sets the ascendant (ASC) or descendant (DESC) order modifier.
                     To define a column as static use staticColumns - Static columns store
                     values that are shared by all rows in the same partition:


                     * name - The name of the column.


                     * type - An Amazon Keyspaces data type.
                properties:
                  allColumns:
                    items:
                      description: The names and data types of regular columns.
                      properties:
                        name:
                          type: string
                        type_:
                          type: string
                      type: object
                    type: array
                  clusteringKeys:
                    items:
                      description: |-
                        The optional clustering column portion of your primary key determines how
                        the data is clustered and sorted within each partition.
                      properties:
                        name:
                          type: string
                        orderBy:
                          type: string
                      type: object
                    type: array
                  partitionKeys:
                    items:
                      description: |-
                        The partition key portion of the primary key is required and determines how
                        Amazon Keyspaces stores the data. The partition key can be a single column,
                        or it can be a compound value composed of two or more columns.
                      properties:
                        name:
                          type: string
                      type: object
                    type: array
                  staticColumns:
                    items:
                      description: |-
                        The static columns of the table. Static columns store values that are shared
                        by all rows in the same partition.
                      properties:
                        name:
                          type: string
                      type: object
                    type: array
                type: object
              tableName:
                description: The name of the table.
                type: string
              tags:
                description: |-
                  A list of key-value pair tags to be attached to the resource.


                  For more information, see Adding tags and labels to Amazon Keyspaces resources
                  (https://docs.aws.amazon.com/keyspaces/latest/devguide/tagging-keyspaces.html)
                  in the Amazon Keyspaces Developer Guide.
                items:
                  description: |-
                    Describes a tag. A tag is a key-value pair. You can add up to 50 tags to
                    a single Amazon Keyspaces resource.


                    Amazon Web Services-assigned tag names and values are automatically assigned
                    the aws: prefix, which the user cannot assign. Amazon Web Services-assigned
                    tag names do not count towards the tag limit of 50. User-assigned tag names
                    have the prefix user: in the Cost Allocation Report. You cannot backdate
                    the application of a tag.


                    For more information, see Adding tags and labels to Amazon Keyspaces resources
                    (https://docs.aws.amazon.com/keyspaces/latest/devguide/tagging-keyspaces.html)
                    in the Amazon Keyspaces Developer Guide.
                  properties:
                    key:
                      type: string
                    value:
                      type: string
                  type: object
                type: array
              ttl:
                description: |-
                  Enables Time to Live custom settings for the table. The options are:


                     * status:enabled


                     * status:disabled


                  The default is status:disabled. After ttl is enabled, you can't disable it
                  for the table.


                  For more information, see Expiring data by using Amazon Keyspaces Time to
                  Live (TTL) (https://docs.aws.amazon.com/keyspaces/latest/devguide/TTL.html)
                  in the Amazon Keyspaces Developer Guide.
                properties:
                  status:
                    type: string
                type: object
            required:
            - keyspaceName
            - schemaDefinition
            - tableName
            type: object
          status:
            description: TableStatus defines the observed state of Table
            properties:
              ackResourceMetadata:
                description: |-
                  All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
                  that is used to contain resource sync state, account ownership,
                  constructed ARN for the resource
                properties:
                  arn:
                    description: |-
                      ARN is the Amazon Resource Name for the resource. This is a
                      globally-unique identifier and is set only by the ACK service controller
                      once the controller has orchestrated the creation of the resource OR
                      when it has verified that an "adopted" resource (a resource where the
                      ARN annotation was set by the Kubernetes user on the CR) exists and
                      matches the supplied CR's Spec field values.
                      TODO(vijat@): Find a better strategy for resources that do not have ARN in CreateOutputResponse
                      https://github.com/aws/aws-controllers-k8s/issues/270
                    type: string
                  ownerAccountID:
                    description: |-
                      OwnerAccountID is the AWS Account ID of the account that owns the
                      backend AWS service API resource.
                    type: string
                  region:
                    description: Region is the AWS region in which the resource exists
                      or will exist.
                    type: string
                required:
                - ownerAccountID
                - region
                type: object
              conditions:
                description: |-
                  All CRS managed by ACK have a common `Status.Conditions` member that
                  contains a collection of `ackv1alpha1.Condition` objects that describe
                  the various terminal states of the CR and its backend AWS service API
                  resource
                items:
                  description: |-
                    Condition is the common struct used by all CRDs managed by ACK service
                    controllers to indicate terminal states  of the CR and its backend AWS
                    service API resource
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type is the type of the Condition
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              status:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
