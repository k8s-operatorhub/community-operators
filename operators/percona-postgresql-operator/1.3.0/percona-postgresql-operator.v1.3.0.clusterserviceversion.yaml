---
apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  name: percona-postgresql-operator.v1.3.0
  namespace: default
  annotations:
    categories: Database
    certified: 'true'
    createdAt: '2022-08-11T13:11:44.000Z'
    description: >-
      Percona Operator for PostgreSQL manages the lifecycle of Percona PostgreSQL
      cluster instances.
    containerImage: 'docker.io/percona/percona-postgresql-operator:1.3.0-postgres-operator'
    support: Percona
    capabilities: Deep Insights
    repository: 'https://github.com/percona/percona-postgresql-operator'
    alm-examples: |-
      [
        {
          "apiVersion": "pg.percona.com/v1",
          "kind": "PerconaPGCluster",
          "metadata": {
            "labels": {
              "pgo-version": "1.3.0"
            },
            "name": "cluster1"
          },
          "spec": {
            "upgradeOptions": {
              "versionServiceEndpoint": "https://check.percona.com",
              "apply": "disabled",
              "schedule": "0 4 * * *"
            },
            "database": "pgdb",
            "port": "5432",
            "user": "pguser",
            "disableAutofail": false,
            "tlsOnly": false,
            "standby": false,
            "pause": false,
            "keepData": true,
            "keepBackups": true,
            "pgPrimary": {
              "image": "docker.io/percona/percona-postgresql-operator:1.3.0-ppg14-postgres-ha",
              "resources": {
                "requests": {
                  "cpu": "500m",
                  "memory": "256Mi"
                }
              },
              "tolerations": [],
              "volumeSpec": {
                "size": "1G",
                "accessmode": "ReadWriteOnce",
                "storagetype": "dynamic",
                "storageclass": ""
              },
              "expose": {
                "serviceType": "ClusterIP"
              }
            },
            "pmm": {
              "enabled": false,
              "image": "percona/pmm-client:2.29.1",
              "serverHost": "monitoring-service",
              "serverUser": "admin",
              "pmmSecret": "cluster1-pmm-secret",
              "resources": {
                "requests": {
                  "memory": "200M",
                  "cpu": "500m"
                }
              }
            },
            "backup": {
              "image": "docker.io/percona/percona-postgresql-operator:1.3.0-ppg14-pgbackrest",
              "backrestRepoImage": "docker.io/percona/percona-postgresql-operator:1.3.0-ppg14-pgbackrest-repo",
              "resources": {
                "requests": {
                  "cpu": "200m",
                  "memory": "48Mi"
                }
              },
              "volumeSpec": {
                "size": "1G",
                "accessmode": "ReadWriteOnce",
                "storagetype": "dynamic",
                "storageclass": ""
              },
              "schedule": [
                {
                  "name": "sat-night-backup",
                  "schedule": "0 0 * * 6",
                  "keep": 3,
                  "type": "full",
                  "storage": "local"
                }
              ]
            },
            "pgBouncer": {
              "image": "docker.io/percona/percona-postgresql-operator:1.3.0-ppg14-pgbouncer",
              "size": 3,
              "resources": {
                "requests": {
                  "cpu": "1",
                  "memory": "128Mi"
                }
              },
              "expose": {
                "serviceType": "ClusterIP"
              }
            },
            "pgReplicas": {
              "hotStandby": {
                "size": 2,
                "resources": {
                  "requests": {
                    "cpu": "500m",
                    "memory": "256Mi"
                  }
                },
                "volumeSpec": {
                  "accessmode": "ReadWriteOnce",
                  "size": "1G",
                  "storagetype": "dynamic",
                  "storageclass": ""
                },
                "enableSyncStandby": false,
                "expose": {
                  "serviceType": "ClusterIP"
                }
              }
            },
            "pgBadger": {
              "enabled": false,
              "image": "docker.io/percona/percona-postgresql-operator:1.3.0-ppg14-pgbadger",
              "port": 10000
            }
          }
        }
      ]
spec:
  customresourcedefinitions:
    owned:
      - description: Percona Distribution for PostgreSQL Cluster
        displayName: Percona Distribution for PostgreSQL Cluster
        kind: PerconaPGCluster
        version: v1
        name: perconapgclusters.pg.percona.com
        resources:
          - kind: Pgcluster
            name: ''
            version: v1
          - kind: ConfigMap
            name: ''
            version: v1
          - kind: Deployment
            name: ''
            version: v1
          - kind: Job
            name: ''
            version: v1
          - kind: Pod
            name: ''
            version: v1
          - kind: ReplicaSet
            name: ''
            version: v1
          - kind: Secret
            name: ''
            version: v1
          - kind: Service
            name: ''
            version: v1
          - kind: PersistentVolumeClaim
            name: ''
            version: v1
      - description: Backup/restore task for Percona Operator for PostgreSQL
        displayName: Task for Percona Operator for PostgreSQL
        kind: Pgtask
        version: v1
        name: pgtasks.pg.percona.com
        resources:
          - kind: Deployment
            name: ''
            version: v1
          - kind: Job
            name: ''
            version: v1
          - kind: Pod
            name: ''
            version: v1
          - kind: PersistentVolumeClaim
            name: ''
            version: v1
      - description: Internal object for Percona Operator for PostgreSQL
        displayName: Internal Pgcluster object for Distribution for PostgreSQL Operator
        kind: Pgcluster
        version: v1
        name: pgclusters.pg.percona.com
      - description: Internal object for Percona Operator for PostgreSQL
        displayName: Internal Pgreplica object for Distribution for PostgreSQL Operator
        kind: Pgreplica
        version: v1
        name: pgreplicas.pg.percona.com
      - description: Internal object for Percona Operator for PostgreSQL
        displayName: Internal Pgreplica object for Distribution for PostgreSQL Operator
        kind: Pgpolicy
        version: v1
        name: pgpolicies.pg.percona.com
  apiservicedefinitions: {}
  keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - percona
  displayName: Percona Operator for PostgreSQL
  provider:
    name: Percona
  maturity: stable
  installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: false
      type: AllNamespaces
  version: 1.3.0
  icon:
    - base64data: >-
        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
      mediatype: image/png
  minKubeVersion: 1.11.0
  links:
    - name: Percona
      url: 'https://www.percona.com/'
    - name: Percona Kubernetes Operators Landing Page
      url: 'https://www.percona.com/software/percona-kubernetes-operators'
    - name: Documentation
      url: 'https://www.percona.com/doc/kubernetes-operator-for-postgresql/index.html'
    - name: Github
      url: 'https://github.com/percona/percona-postgresql-operator'
  install:
    spec:
      clusterPermissions:
        - rules:
            - apiGroups:
                - ''
              resources:
                - namespaces
              verbs:
                - get
                - list
                - watch
                - create
                - update
                - delete
            - apiGroups:
                - ''
              resources:
                - serviceaccounts
              verbs:
                - get
                - create
                - update
                - delete
            - apiGroups:
                - rbac.authorization.k8s.io
              resources:
                - roles
                - rolebindings
              verbs:
                - get
                - create
                - update
                - delete
            - apiGroups:
                - ''
              resources:
                - configmaps
                - endpoints
                - pods
                - pods/exec
                - secrets
                - services
                - persistentvolumeclaims
              verbs:
                - get
                - list
                - watch
                - create
                - patch
                - update
                - delete
                - deletecollection
            - apiGroups:
              - ''
              resources:
                - pods/log
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - apps
              resources:
                - deployments
                - replicasets
              verbs:
                - get
                - list
                - watch
                - create
                - patch
                - update
                - delete
                - deletecollection
            - apiGroups:
                - batch
              resources:
                - jobs
              verbs:
                - get
                - list
                - watch
                - create
                - patch
                - update
                - delete
                - deletecollection
            - apiGroups:
                - certmanager.k8s.io
                - cert-manager.io
                - ''
              resources:
                - issuers
                - certificates
              verbs:
                - get
                - list
                - watch
                - create
                - patch
                - update
                - delete
                - deletecollection
            - apiGroups:
                - pg.percona.com
              resources:
                - perconapgclusters
                - perconapgclusters/status
                - pgclusters
                - pgpolicies
                - pgreplicas
                - pgtasks
              verbs:
                - get
                - list
                - watch
                - create
                - patch
                - update
                - delete
                - deletecollection
          serviceAccountName: postgres-operator
      deployments:
        - name: postgres-operator
          spec:
            replicas: 1
            selector:
              matchLabels:
                name: postgres-operator
                vendor: crunchydata
            strategy: {}
            template:
              metadata:
                creationTimestamp: null
                labels:
                  name: postgres-operator
                  vendor: crunchydata
              spec:
                containers:
                  - resources: {}
                    readinessProbe:
                      httpGet:
                        path: /healthz
                        port: 8443
                        scheme: HTTPS
                      initialDelaySeconds: 15
                      periodSeconds: 5
                    name: apiserver
                    livenessProbe:
                      httpGet:
                        path: /healthz
                        port: 8443
                        scheme: HTTPS
                      initialDelaySeconds: 15
                      periodSeconds: 5
                    env:
                      - name: NAMESPACE
                        valueFrom:
                          fieldRef:
                            fieldPath: 'metadata.annotations[''olm.targetNamespaces'']'
                      - name: PGO_INSTALLATION_NAME
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.namespace
                      - name: PGO_OPERATOR_NAMESPACE
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.namespace
                      - name: CRUNCHY_DEBUG
                        value: 'false'
                      - name: EVENT_ADDR
                        value: 'localhost:4150'
                      - name: PORT
                        value: '8443'
                      - name: CCP_IMAGE_PREFIX
                        value: percona/percona-postgresql-operator
                      - name: CCP_IMAGE_TAG
                        value: 1.3.0-ppg14-postgres-ha
                      - name: PGO_IMAGE_PREFIX
                        value: percona/percona-postgresql-operator
                      - name: PGO_IMAGE_TAG
                        value: 1.3.0
                    securityContext:
                      allowPrivilegeEscalation: false
                      privileged: false
                    ports:
                      - containerPort: 8443
                        protocol: TCP
                    imagePullPolicy: Always
                    image: docker.io/percona/percona-postgresql-operator:1.3.0-pgo-apiserver
                  - env:
                      - name: NAMESPACE
                        valueFrom:
                          fieldRef:
                            fieldPath: 'metadata.annotations[''olm.targetNamespaces'']'
                      - name: PGO_INSTALLATION_NAME
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.namespace
                      - name: PGO_OPERATOR_NAMESPACE
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.namespace
                      - name: CRUNCHY_DEBUG
                        value: 'false'
                      - name: EVENT_ADDR
                        value: 'localhost:4150'
                      - name: CCP_IMAGE_PREFIX
                        value: percona/percona-postgresql-operator
                      - name: CCP_IMAGE_TAG
                        value: 1.3.0-ppg14-postgres-ha
                      - name: PGO_IMAGE_PREFIX
                        value: percona/percona-postgresql-operator
                      - name: PGO_IMAGE_TAG
                        value: 1.3.0
                      - name: disabled_telemetry
                        value: 'false'
                    image: >-
                      docker.io/percona/percona-postgresql-operator:1.3.0-postgres-operator
                    imagePullPolicy: Always
                    name: operator
                    resources: {}
                    securityContext:
                      allowPrivilegeEscalation: false
                      privileged: false
                  - env:
                      - name: NAMESPACE
                        valueFrom:
                          fieldRef:
                            fieldPath: 'metadata.annotations[''olm.targetNamespaces'']'
                      - name: PGO_INSTALLATION_NAME
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.namespace
                      - name: PGO_OPERATOR_NAMESPACE
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.namespace
                      - name: CRUNCHY_DEBUG
                        value: 'false'
                      - name: EVENT_ADDR
                        value: 'localhost:4150'
                      - name: TIMEOUT
                        value: '3600'
                    image: >-
                      docker.io/percona/percona-postgresql-operator:1.3.0-pgo-scheduler
                    imagePullPolicy: Always
                    livenessProbe:
                      exec:
                        command:
                          - bash
                          - '-c'
                          - >-
                            test -n "$(find /tmp/scheduler.hb -newermt '61 sec
                            ago')"
                    name: scheduler
                    resources: {}
                    securityContext:
                      allowPrivilegeEscalation: false
                      privileged: false
                  - env:
                      - name: TIMEOUT
                        value: '3600'
                    image: >-
                      docker.io/percona/percona-postgresql-operator:1.3.0-pgo-event
                    imagePullPolicy: Always
                    livenessProbe:
                      httpGet:
                        path: /ping
                        port: 4151
                      initialDelaySeconds: 15
                      periodSeconds: 5
                    name: event
                    resources: {}
                    securityContext:
                      allowPrivilegeEscalation: false
                      privileged: false
                securityContext:
                  runAsNonRoot: true
                serviceAccountName: postgres-operator
      permissions:
        - rules:
            - apiGroups:
                - ''
              resources:
                - configmaps
                - secrets
              verbs:
                - get
                - list
                - create
                - update
                - delete
            - apiGroups:
                - ''
              resources:
                - serviceaccounts
              verbs:
                - get
          serviceAccountName: postgres-operator
    strategy: deployment
  maintainers:
    - name: Percona
      email: info@percona.com
  replaces: percona-postgresql-operator.v1.2.0
  description: >+

    ## Percona is Cloud Native


    Percona Operator for PostgreSQL automates and simplifies deploying and managing
    open source PostgreSQL clusters on Kubernetes. Percona Operator for PostgreSQL is based on Postgres Operator developed by Crunchy Data.

    Whether you need to get a simple PostgreSQL cluster up and running, need to deploy a high availability,
    fault tolerant cluster in production, or are running your own database-as-a-service, the Operator provides the essential
    features you need to keep your clusters healthy.


    Consult the
    [documentation](https://www.percona.com/doc/kubernetes-operator-for-postgresql/index.html)
    on the Percona Operator for PostgreSQL for complete
    details on capabilities and options.


    ### Supported Features


    * **PostgreSQL Cluster Provisioning**

    Create, Scale, & Delete PostgreSQL clusters with ease, while fully customizing your Pods and PostgreSQL configuration.

    * **High Availability**

        Safe, automated failover backed by a distributed consensus based high-availability solution. Uses Pod Anti-Affinity to help resiliency; you can configure how much
        enforced this can be. Failed primaries automatically heal, allowing for faster recovery time. Support for standby PostgreSQL clusters that work both within and
        across multiple Kubernetes clusters.

    * **Disaster Recovery**

        Backups and restores leverage the open source pgBackRest utility and includes support for full, incremental, and differential backups as well as efficient delta
        restores. Set how long you want your backups retained for. Works great with very large databases!

    * **Communication Security**

        Secure communication between your applications and data servers by enabling TLS for your PostgreSQL servers, including the ability to enforce all of your connections
        to use TLS.

    * **Monitoring**

        Track the health of your PostgreSQL clusters with Percona Monitoring and Management (PMM).

    * **PostgreSQL User Management**

        Quickly add and remove users from your PostgreSQL clusters with powerful commands. Manage password expiration policies or use your preferred PostgreSQL authentication
        scheme.

    * **Updates Management**

        Safely apply PostgreSQL updates with minimal availability impact to your PostgreSQL clusters.

    * **Advanced Replication Support**

        Choose between asynchronous replication and synchronous replication for workloads that are sensitive to losing transactions.

    * **Clone**

        Create new clusters from your existing clusters or backups.

    * **Connection Pooling**

        Use [pgBouncer](https://access.crunchydata.com/documentation/postgres-operator/latest/tutorial/pgbouncer/) for connection pooling

    * **Affinity and Tolerations**

        Have your PostgreSQL clusters deployed to Kubernetes Nodes of your preference with node affinity, or designate which nodes Kubernetes can schedule PostgreSQL instances
        to with Kubernetes  tolerations.

    * **Scheduled Backups**

        Choose the type of backup (full, incremental, differential) and how frequently you want it to occur on each PostgreSQL cluster.

    * **Backup to S3**

        Store your backups in Amazon S3 or any object storage system that supports the S3 protocol. The Operator can backup, restore, and create new clusters from these backups.

    * **Multi-Namespace Support**

        You can control how the Operator leverages Kubernetes Namespaces with several different deployment models:

        * Deploy the Operator and all PostgreSQL clusters to the same namespace
        * Deploy the Operator to one Namespace, and all PostgreSQL clusters to a different Namespace
        * Deploy the Operator to one Namespace, and have your PostgreSQL clusters managed across multiple Namespaces

    * **Full Customizability**

        The Operator not only makes it easy to get PostgreSQL up and running on Kubernetes-enabled platforms, but also allows you to further customize your deployments:

        * Selecting different storage classes for your primary, replica, and backup storage
        * Select your own container resources class for each PostgreSQL cluster deployment; differentiate between resources applied for primary and replica clusters
        * Use your own container image repository, including `imagePullSecrets` and private repositories  support
        * Customize your PostgreSQL configuration
        * Bring your own trusted certificate authority (CA) for use with the Operator API server
        * Override your PostgreSQL configuration for each cluster
        * Use your own custom images, re-define the image for each container separately

    ### Release highlights

    * **What's new**

        * The automated upgrade is now disabled by default to prevent an unplanned downtimes for user applications and to provide defaults more focused on strict user’s control over the cluster
        * Flexible anti-affinity configuration is now available, which allows the Operator to isolate PostgreSQL cluster instances on different Kubernetes nodes or to increase its availability by placing PostgreSQL instances in different availability zones
        * Add possibility for postgres user to connect to PostgreSQL through PgBouncer with a new pgBouncer.exposePostgresUser Custom Resource option
        * A new build and testing guide allows user to easily experiment with the source code of the Operator
        * Fix the bug in the instruction on passing custom configuration options for PostgreSQL which made it usable for the new cluster only
        * Fix the bug which caused the Operator crash without pgReplicas section in Custom Resource definition
        * Fix the bug which caused the Operator to make connection requests to Version Service even with disabled Smart Update
        * Fix the bug due to which restoring S3 backup from storage with self-signed certificates didn’t work, by introducing the special backup.storages.verifyTLS option to address this issue
        