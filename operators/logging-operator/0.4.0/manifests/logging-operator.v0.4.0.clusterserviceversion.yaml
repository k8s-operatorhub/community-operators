apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  name: logging-operator.v0.4.0
  namespace: placeholder
  annotations:
    alm-examples: >-
      [{"apiVersion":"logging.logging.opstreelabs.in/v1beta1","kind":"Elasticsearch","metadata":{"name":"elasticsearch"},"spec":{"esClusterName":"prod","esVersion":"7.17.0","esSecurity":{"autoGeneratePassword":true,"tlsEnabled":true}}},{"apiVersion":"logging.logging.opstreelabs.in/v1beta1","kind":"Fluentd","metadata":{"name":"fluentd"},"spec":{"esCluster":{"host":"elasticsearch-master"},"esSecurity":{"tlsEnabled":true,"existingSecret":"elasticsearch-password"},"indexNameStrategy":"namespace_name"}},{"apiVersion":"logging.logging.opstreelabs.in/v1beta1","kind":"Kibana","metadata":{"name":"kibana"},"spec":{"replicas":1,"esCluster":{"host":"https://elasticsearch-master:9200","esVersion":"7.16.0","clusterName":"elasticsearch"},"esSecurity":{"tlsEnabled":true,"existingSecret":"elasticsearch-password"}}}]
    k8sMinVersion: ''
    k8sMaxVersion: ''
    categories: 'Database,  Monitoring, Big Data'
    certified: 'false'
    createdAt: '04-07-2022'
    description: >-
      A golang-based operator to create and manage EFK (Elasticsearch, Fluentd,
      and Kibana) stack on Kubernetes.
    containerImage: 'quay.io/opstree/logging-operator:v0.4.0'
    support: ''
    capabilities: Seamless Upgrades
    repository: 'https://github.com/ot-container-kit/logging-operator'
spec:
  displayName: Logging Operator
  description: >+

    Logging Operator is an operator created in Golang to set up and manage
    EFK(Elasticsearch, Fluentd, and Kibana) cluster inside Kubernetes and
    Openshift environment. This operator is capable of setting up each
    individual component of EFK cluster separately.

    ### Supported Features

    - Setup of elasticsearch cluster with different nodes type:- master, data,
    ingestion, and client.

    - Customizable configuration for elasticsearch, fluentd stack.

    - Setup of fluentd as light-weight log-shipper as Daemonset.

    - Kibana will be set up as visualization tool for elastic stack.

    - Seamless upgrades of elasticsearch, fluentd, and kibana.

    - Security best practices support for complete stack such as TLS, elastic
    security.

    - Kubernetes resources objects support like:- resources, securityContext,
    affinity, tolerations, etc.
    
    - Elasticsearch plugins and keystore seamless support with operator

    ### Documentation

    **[Documentation](https://ot-logging-operator.netlify.app/)**

    ### Getting Help

    This project is managed by OpsTree Solutions. If you have any queries or
    suggestions, mail us at opensource@opstree.com.

    ### Contributing

    You can contribute to this project by:-

    * Raising Bugs and Feature Requests

    * Fixing issue by opening a Pull Request

    * Improving Documentation

    ### License

    MongoDB Operator is licensed under [Apache License, Version
    2.0](https://github.com/OT-CONTAINER-KIT/logging-operator/blob/master/LICENSE)

  maturity: beta
  version: 0.4.0
  replaces: logging-operator.v0.3.0
  skips: []
  minKubeVersion: 1.17.0
  keywords:
    - DevOps
    - Kubernetes
    - Operator
    - Elasticsearch
    - Fluentd
    - Kibana
    - Opstree
    - Logging
    - Monitoring
    - Cloud Native
  maintainers:
    - name: Abhishek Dubey
      email: abhishek.dubey@opstree.com
    - name: Sandeep
      email: sandeep@opstree.com
  provider:
    name: Opstree Solutions
  labels: {}
  selector:
    matchLabels: {}
  links:
    - name: Blog
      url: 'https://blog.opstree.com'
    - name: GitHub
      url: 'https://github.com/opstree'
    - name: Opensource
      url: 'https://opstree.github.io'
    - name: Documentation
      url: 'https://ot-logging-operator.netlify.app/'
    - name: Buildpiper
      url: 'https://buildpiper.io'
  icon:
    - base64data: >-
        
      mediatype: image/svg+xml
  customresourcedefinitions:
    owned:
      - name: elasticsearches.logging.logging.opstreelabs.in
        displayName: Elasticsearch
        kind: Elasticsearch
        version: v1beta1
        description: Elasticsearch
        resources:
          - version: v1
            kind: Deployment
          - version: v1
            kind: Service
          - version: v1
            kind: ReplicaSet
          - version: v1
            kind: Pod
          - version: v1
            kind: Secret
          - version: v1
            kind: ConfigMap
        specDescriptors: []
        statusDescriptors: []
      - name: indexlifecycles.logging.logging.opstreelabs.in
        displayName: IndexLifeCycle
        kind: IndexLifeCycle
        version: v1beta1
        description: Index Life Cycle
        resources:
          - version: v1
            kind: Deployment
          - version: v1
            kind: Service
          - version: v1
            kind: ReplicaSet
          - version: v1
            kind: Pod
          - version: v1
            kind: Secret
          - version: v1
            kind: ConfigMap
        specDescriptors: []
        statusDescriptors: []
      - name: indextemplates.logging.logging.opstreelabs.in
        displayName: IndexTemplate
        kind: IndexTemplate
        version: v1beta1
        description: Index Template
        resources:
          - version: v1
            kind: Deployment
          - version: v1
            kind: Service
          - version: v1
            kind: ReplicaSet
          - version: v1
            kind: Pod
          - version: v1
            kind: Secret
          - version: v1
            kind: ConfigMap
        specDescriptors: []
        statusDescriptors: []
      - name: fluentds.logging.logging.opstreelabs.in
        displayName: Fluentd
        kind: Fluentd
        version: v1beta1
        description: Fluentd
        resources:
          - version: v1
            kind: Deployment
          - version: v1
            kind: Service
          - version: v1
            kind: ReplicaSet
          - version: v1
            kind: Pod
          - version: v1
            kind: Secret
          - version: v1
            kind: ConfigMap
        specDescriptors: []
        statusDescriptors: []
      - name: kibanas.logging.logging.opstreelabs.in
        displayName: Kibana
        kind: Kibana
        version: v1beta1
        description: Kibana
        resources:
          - version: v1
            kind: Deployment
          - version: v1
            kind: Service
          - version: v1
            kind: ReplicaSet
          - version: v1
            kind: Pod
          - version: v1
            kind: Secret
          - version: v1
            kind: ConfigMap
        specDescriptors: []
        statusDescriptors: []
    required: []
  install:
    strategy: deployment
    spec:
      permissions: []
      clusterPermissions:
        - serviceAccountName: logging-operator
          rules:
            - apiGroups:
                - ''
              resources:
                - configmaps
                - events
                - secrets
                - services
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - ''
              resources:
                - namespaces
                - pods
                - serviceaccounts
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - apps
              resources:
                - daemonsets
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - apps
              resources:
                - deployments
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - apps
              resources:
                - statefulsets
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - coordination.k8s.io
              resources:
                - leases
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - logging.logging.opstreelabs.in
              resources:
                - elasticsearches
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - logging.logging.opstreelabs.in
              resources:
                - elasticsearches/finalizers
              verbs:
                - update
            - apiGroups:
                - logging.logging.opstreelabs.in
              resources:
                - elasticsearches/status
              verbs:
                - get
                - patch
                - update
            - apiGroups:
                - logging.logging.opstreelabs.in
              resources:
                - fluentds
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - logging.logging.opstreelabs.in
              resources:
                - fluentds/finalizers
              verbs:
                - update
            - apiGroups:
                - logging.logging.opstreelabs.in
              resources:
                - fluentds/status
              verbs:
                - get
                - patch
                - update
            - apiGroups:
                - logging.logging.opstreelabs.in
              resources:
                - indexlifecycles
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - logging.logging.opstreelabs.in
              resources:
                - indexlifecycles/finalizers
              verbs:
                - update
            - apiGroups:
                - logging.logging.opstreelabs.in
              resources:
                - indexlifecycles/status
              verbs:
                - get
                - patch
                - update
            - apiGroups:
                - logging.logging.opstreelabs.in
              resources:
                - indextemplates
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - logging.logging.opstreelabs.in
              resources:
                - indextemplates/finalizers
              verbs:
                - update
            - apiGroups:
                - logging.logging.opstreelabs.in
              resources:
                - indextemplates/status
              verbs:
                - get
                - patch
                - update
            - apiGroups:
                - logging.logging.opstreelabs.in
              resources:
                - kibanas
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - logging.logging.opstreelabs.in
              resources:
                - kibanas/finalizers
              verbs:
                - update
            - apiGroups:
                - logging.logging.opstreelabs.in
              resources:
                - kibanas/status
              verbs:
                - get
                - patch
                - update
            - apiGroups:
                - rbac.authorization.k8s.io
              resources:
                - clusterrolebindings
                - clusterroles
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
      deployments:
        - name: logging-operator
          spec:
            selector:
              matchLabels:
                control-plane: logging-operator
            replicas: 1
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/default-container: manager
                labels:
                  control-plane: logging-operator
              spec:
                securityContext:
                  runAsNonRoot: true
                containers:
                  - command:
                      - /manager
                    args:
                      - '--leader-elect'
                    image: 'quay.io/opstree/logging-operator:v0.4.0'
                    name: manager
                    securityContext:
                      allowPrivilegeEscalation: false
                    livenessProbe:
                      httpGet:
                        path: /healthz
                        port: 8081
                      initialDelaySeconds: 15
                      periodSeconds: 20
                    readinessProbe:
                      httpGet:
                        path: /readyz
                        port: 8081
                      initialDelaySeconds: 5
                      periodSeconds: 10
                    resources:
                      limits:
                        cpu: 500m
                        memory: 512Mi
                      requests:
                        cpu: 200m
                        memory: 300Mi
                serviceAccountName: logging-operator
                terminationGracePeriodSeconds: 10
  installModes:
    - type: OwnNamespace
      supported: true
    - type: SingleNamespace
      supported: true
    - type: MultiNamespace
      supported: true
    - type: AllNamespaces
      supported: true
