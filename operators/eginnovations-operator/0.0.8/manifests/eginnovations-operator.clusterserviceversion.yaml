apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "eginnovations.com/v1beta1",
          "kind": "EgUniversalAgent",
          "metadata": {
            "name": "eguniversalagent",
            "namespace": "egagent"
          },
          "spec": {
            "agent": {
              "env": [
                {
                  "name": "EG_MANAGER",
                  "value": "Replace with eG Manager IP"
                },
                {
                  "name": "EG_MANAGER_PORT",
                  "value": "Replace with eG Manager Port"
                }
              ]
            }
          }
        }
      ]
    capabilities: Deep Insights
    categories: Monitoring
    certified: "true"
    containerImage: docker.io/eginnovations/universal-agent-operator:0.0.8
    createdAt: "2024-09-17T17:21:27Z"
    operators.operatorframework.io/builder: operator-sdk-v1.36.1
    operators.operatorframework.io/project_layout: go.kubebuilder.io/v4
    repository: https://github.com/eginnovations/universal-agent-operator
  name: eginnovations-operator.v0.0.8
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - description: EgUniversalAgent is the Schema for the eguniversalagents API
      displayName: Eg Universal Agent
      kind: EgUniversalAgent
      name: eguniversalagents.eginnovations.com
      version: v1beta1
  description: |
    eG Innovationsâ€™ converged application and infrastructure performance monitoring capabilities provide end-to-end visibility and correlated analytics for every layer, every tier of your IT landscape.

    The eG Enterprise Universal Agent Operator automatically configures a host agent on every Kubernetes worker node. The host agent auto-discovers the worker nodes and application containers running as Pods on each node and tracks their performance and utilization levels. In-depth monitoring of applications running on containers is also provided using the same host agent. No additional agents are required for the containers.

    ### Capabilities
      * Rolls out the egagent pod per node to monitor its pods and the node itself
      * Automatic BTM profiler injection using webhook based injection for deep application monitoring and transection tracing.

    ### Prerequisite
      * Check if cert-manager is installed in cluster or not using.
    
    ``` 
          $ kubectl get pods -namesapce cert-manager
          NAME                                       READY   STATUS    RESTARTS   AGE
          cert-manager-5c6866597-zw7kh               1/1     Running   0          2m    
          cert-manager-cainjector-577f6d9fd7-tr77l   1/1     Running   0          2m    
          cert-manager-webhook-787858fcdb-nlzsq      1/1     Running   0          2m
    ``` 
         &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If not available then install cert-manager using this [URL](https://cert-manager.io/docs/installation/).
    
      * Check if OLM(Operator Lifecycle Manager) is installed or not using by verifying its version.
    
    ``` 
          $ kubectl get csv packageserver -n olm
          NAME            DISPLAY          VERSION   REPLACES   PHASE
          packageserver   Package Server   0.28.0               Succeeded
    ``` 
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If not available then install olm using this [URL](https://github.com/operator-framework/operator-lifecycle-manager/releases).
    
    ### Installation of eG Universal Operator
      1. Create the namespace "egagent" for installing eG Agent on kubernetes Cluster.

         <br />``` $ kubectl create ns egagent ```
      2. Install eG Innovations Universal Agent operator from [OperatorHub.io](https://operatorhub.io/operator/eginnovations-operator) by clicking over install button on the operator page and follow instructions.
      3. Create the eG Universal Agent CRD (Custom Resource Definition)
         a. Click "View YAML Example" and copy the yaml contents and save it to (filename).yaml on your host.
         b. To apply the CRD run the following command

         <br />``` $ kubectl apply -f (filename).yaml ```

    ### Required Parameters
      * EG\_MANAGER, EG\_MANAGER\_PORT - provide the ip and port of your eG Manager Installation.

    ### Advanced Options
      * Disable Certificate Checking - disable any certificate validation that may interact poorly with proxies within your cluster
      * Image Override - use a copy of the eG Iniversal Agent container image from a registry other that Docker's or Red Hat's
      * Environment variables - define environment variables for the eG Universal Agent container of for APM profiler.
      * Namespace Selectors- select a subset of namesapces to enable instrumentation for applications.

    For complete list of supported parameters and the detailed documentation available in [eG Innovations Docs](https://docs.eginnovations.com)
  displayName: eG Innovations Universal Agent Operator
  icon:
  - base64data: PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPCEtLSBHZW5lcmF0b3I6IEFkb2JlIElsbHVzdHJhdG9yIDI0LjEuMywgU1ZHIEV4cG9ydCBQbHVnLUluIC4gU1ZHIFZlcnNpb246IDYuMDAgQnVpbGQgMCkgIC0tPgo8c3ZnIHZlcnNpb249IjEuMSIgaWQ9IkxheWVyXzEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHg9IjBweCIgeT0iMHB4IgoJIHZpZXdCb3g9IjAgMCA2MCA2MCIgc3R5bGU9ImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgNjAgNjA7IiB4bWw6c3BhY2U9InByZXNlcnZlIj4KPHN0eWxlIHR5cGU9InRleHQvY3NzIj4KCS5zdDB7ZmlsbDojRjA5MjIyO30KCS5zdDF7ZmlsbDojRkZGRkZGO30KPC9zdHlsZT4KPGc+Cgk8Zz4KCQk8cGF0aCBjbGFzcz0ic3QwIiBkPSJNNTYuMywzMGMwLDE0LjQtMTEuNiwyNi0yNiwyNnMtMjYtMTEuNi0yNi0yNnMxMS42LTI2LDI2LTI2UzU2LjMsMTUuNiw1Ni4zLDMweiIvPgoJCTxnPgoJCQk8Zz4KCQkJCTxwYXRoIGNsYXNzPSJzdDEiIGQ9Ik0zNy40LDQxLjZjLTAuMi0wLjEtMC4zLTAuMi0wLjUtMC40Yy0wLjEtMC4xLTAuMS0wLjEtMC4yLTAuMWMtMC42LDAuMS0xLjIsMC4xLTEuOSwwLjEKCQkJCQljLTAuOCwwLTEuNSwwLTIuMiwwYy0wLjUsMC0wLjktMC4xLTEuNC0wLjFjLTAuOS0wLjEtMS44LTAuMi0yLjgtMC40Yy0wLjQtMC4xLTAuOC0wLjItMS4xLTAuNWMtMC4yLTAuMS0wLjQtMC4zLTAuNi0wLjUKCQkJCQljLTAuNC0wLjQtMC41LTAuOC0wLjQtMS40YzAuMS0wLjUsMC4yLTAuOSwwLjUtMS4zYzAuNi0xLjIsMS41LTIuMiwyLjYtMy4xYzAuMS0wLjEsMC4xLTAuMSwwLjItMC4xYzAsMCwwLDAsMC0wLjEKCQkJCQljMC0wLjEtMC4xLTAuMS0wLjEtMC4xYy0wLjYtMC45LTEuMi0xLjktMS42LTIuOUMyNy40LDMwLDI3LjEsMjksMjYuOCwyOGMwLTAuMS0wLjEtMC4xLTAuMi0wLjFjLTEuOS0wLjQtMy44LTAuOS01LjctMS42CgkJCQkJYy0xLjQtMC41LTIuNy0wLjktNC4xLTEuNWMtMC4xLDAtMC4xLDAtMC4xLTAuMWMxLjEsMC4zLDIuMSwwLjUsMy4yLDAuOGMxLjEsMC4yLDIuMiwwLjUsMy4yLDAuOGMxLjEsMC4yLDIuMiwwLjUsMy4zLDAuNgoJCQkJCWMwLTAuMSwwLTAuMi0wLjEtMC40Yy0wLjItMS4zLTAuMS0yLjUsMC4zLTMuOGMwLjQtMS4xLDAuOS0yLjEsMS44LTIuOWMwLjUtMC41LDEuMi0wLjksMS45LTEuMmMwLjUtMC4yLDEuMS0wLjQsMS43LTAuNAoJCQkJCWMwLjUtMC4xLDEuMS0wLjEsMS41LDBjMS4xLDAuMSwyLjEsMC40LDMuMSwwLjhjMS42LDAuNiwzLDEuNyw0LjEsM2MwLDAsMCwwLDAuMSwwLjFjLTAuMSwwLTAuMS0wLjEtMC4xLTAuMQoJCQkJCWMtMC44LTAuNS0xLjUtMC45LTIuNC0xLjJjLTAuNi0wLjItMS40LTAuNC0yLjEtMC41Yy0wLjYtMC4xLTEuNCwwLTIsMC4yYy0wLjgsMC4yLTEuNCwwLjYtMS45LDEuMmMtMC43LDAuOC0xLjIsMS42LTEuNiwyLjYKCQkJCQljLTAuMiwwLjYtMC40LDEuMy0wLjUsMmMtMC4xLDAuMy0wLjEsMC42LTAuMSwwLjhjMCwwLjEsMCwwLjEsMCwwLjFjMC4xLDAsMC4yLDAuMSwwLjQsMC4xYzAuNywwLjEsMS40LDAuMSwyLjEsMC4yCgkJCQkJYzAuNSwwLjEsMSwwLjEsMS41LDAuMWMwLjgsMCwxLjUsMCwyLjMsMGMwLjYsMCwxLjItMC4xLDEuOS0wLjFjMC43LTAuMSwxLjUtMC4xLDIuMi0wLjJjMC40LTAuMSwwLjktMC4xLDEuMy0wLjIKCQkJCQljMC4yLTAuMSwwLjUtMC4xLDAuNy0wLjJjMC4xLTAuMSwwLjItMC4yLDAuNC0wLjJjMC4zLTAuMiwwLjQtMC41LDAuMi0wLjljLTAuMS0wLjItMC4yLTAuNC0wLjMtMC41Yy0wLjItMC40LTAuNi0wLjYtMC45LTAuOQoJCQkJCWMtMC42LTAuNS0xLjMtMC44LTEuOS0xLjJjLTAuMSwwLTAuMS0wLjEtMC4xLTAuMWMwLjEsMCwwLjEsMCwwLjEsMGMxLjYsMC40LDMuMiwwLjksNC44LDEuNmMwLjYsMC4zLDEuMywwLjYsMS45LDEuMQoJCQkJCWMwLjMsMC4yLDAuNiwwLjUsMC45LDAuOGMwLjIsMC4yLDAuNCwwLjQsMC40LDAuN2MwLjEsMC4yLDAsMC41LTAuMSwwLjdjLTAuMSwwLjEtMC4yLDAuMi0wLjQsMC40Yy0wLjMsMC4yLTAuNiwwLjMtMSwwLjQKCQkJCQljLTAuNSwwLjEtMC45LDAuMi0xLjUsMC4zYy0wLjgsMC4xLTEuNiwwLjEtMi41LDAuMmMtMC44LDAtMS41LDAtMi40LDBjLTAuMywwLTAuNSwwLTAuOCwwYy0wLjYsMC0xLjItMC4xLTEuOS0wLjEKCQkJCQljLTAuNi0wLjEtMS4yLTAuMS0xLjgtMC4xYy0wLjgtMC4xLTEuNi0wLjEtMi40LTAuMmMtMC45LTAuMS0xLjktMC4yLTIuOC0wLjRoLTAuMWMwLDAuMSwwLDAuMiwwLDAuM2MwLjEsMC45LDAuMiwxLjgsMC41LDIuNgoJCQkJCWMwLjEsMC40LDAuMiwwLjgsMC40LDEuMmMwLDAuMSwwLDAuMSwwLjEsMC4xYzAuMS0wLjEsMC4yLTAuMSwwLjMtMC4xYzEuMi0wLjYsMi42LTAuOSwzLjktMS4yYzAuNi0wLjEsMS4yLTAuMiwxLjktMC4yCgkJCQkJYzEuMS0wLjEsMi4xLTAuMSwzLjItMC4xYzAuNiwwLDEuMiwwLjEsMS44LDAuMWMwLjgsMC4xLDEuNSwwLjIsMi4yLDAuNGMwLjMsMC4xLDAuNiwwLjIsMC44LDAuNGMwLjEsMC4xLDAuMywwLjIsMC40LDAuMwoJCQkJCUM0NiwzMi43LDQ2LDMzLDQ2LDMzLjNjLTAuMSwwLjMtMC4yLDAuNi0wLjQsMC44YzAsMC0wLjEsMC4xLTAuMSwwLjFoLTAuMWMtMS44LDAtMy42LDAtNS40LDBjLTAuMSwwLTAuMSwwLTAuMiwwCgkJCQkJYzAtMC4xLDAuMS0wLjEsMC4xLTAuMWMwLjEtMC4yLDAuMi0wLjMsMC4zLTAuNWMwLjEtMC4xLDAuMS0wLjIsMC4xLTAuNGMwLjEtMC4xLDAtMC4zLTAuMS0wLjRjLTAuMS0wLjEtMC4yLTAuMS0wLjQtMC4xCgkJCQkJYy0wLjItMC4xLTAuNS0wLjEtMC44LTAuMWMtMC42LDAtMS4yLDAuMS0xLjgsMC4yYy0wLjcsMC4yLTEuMiwwLjYtMS44LDEuMWMtMC40LDAuNC0wLjgsMC44LTEuMSwxLjJjLTAuNCwwLjUtMC44LDAuOS0xLjIsMS40CgkJCQkJYzAsMC4xLTAuMSwwLjEtMC4xLDAuMXMwLjEsMC4xLDAuMSwwLjFjMC42LDEsMS40LDIsMi4yLDIuOWMwLjEsMC4xLDAuMSwwLjEsMC4yLDAuMWMwLjUtMC4xLDAuOS0wLjIsMS4zLTAuNAoJCQkJCWMwLjUtMC4zLDEtMC42LDEuNC0xLjJjMC4yLTAuMiwwLjQtMC41LDAuNS0wLjhjMCwwLDAtMC4xLDAuMS0wLjFjLTAuNSwwLTAuOSwwLTEuNCwwYy0wLjUsMC0wLjksMC0xLjQsMGMtMC41LDAtMC45LDAtMS40LDAKCQkJCQljMC4xLTAuMSwwLjEtMC4xLDAuMS0wLjFjMC42LTAuNSwxLjItMC45LDEuNy0xLjRjMC4xLTAuMSwwLjEtMC4xLDAuMi0wLjFjMi44LDAsNS41LDAsOC4yLDBjMC4xLDAsMC4xLDAsMC4xLDAKCQkJCQljMCwwLjEsMCwwLjEsMCwwLjFjLTAuNSwxLTEuMSwxLjktMS45LDIuN2MtMC45LDAuOS0yLDEuNi0zLjIsMmMtMC43LDAuMi0xLjUsMC40LTIuMiwwLjVjLTAuMiwwLjEtMC41LDAuMS0wLjgsMC4xCgkJCQkJYzAsMC4xLDAuMSwwLjEsMC4xLDAuMWMwLjEsMC4xLDAuMiwwLjIsMC4yLDAuMkMzNy40LDQxLjUsMzcuNCw0MS42LDM3LjQsNDEuNkwzNy40LDQxLjZ6IE0zNS4xLDM5LjgKCQkJCQlDMzUuMSwzOS44LDM1LjEsMzkuNywzNS4xLDM5LjhjLTAuOC0wLjctMS42LTEuNS0yLjQtMi4yYy0wLjEsMC4yLTAuMSwwLjMtMC4yLDAuNGMtMC4xLDAuMi0wLjIsMC41LTAuMSwwLjgKCQkJCQljMCwwLjQsMC4yLDAuNiwwLjUsMC44YzAuMiwwLjEsMC40LDAuMiwwLjUsMC4yYzAuNCwwLjEsMC45LDAuMSwxLjMsMC4xQzM0LjgsMzkuOCwzNSwzOS44LDM1LjEsMzkuOHoiLz4KCQkJCTxwYXRoIGNsYXNzPSJzdDEiIGQ9Ik0yNC4yLDM4LjljLTAuMSwwLTAuMSwwLjEtMC4xLDAuMWMtMC44LDAuNi0xLjYsMS0yLjUsMS40Yy0wLjcsMC4yLTEuNCwwLjQtMi4yLDAuNQoJCQkJCWMtMC44LDAuMS0xLjUsMC4yLTIuMywwLjFjLTAuNCwwLTAuNi0wLjEtMS0wLjFjLTAuNi0wLjEtMS4xLTAuMi0xLjctMC40Yy0wLjQtMC4xLTAuOC0wLjItMS4xLTAuNGMtMC4yLTAuMS0wLjQtMC4yLTAuNS0wLjQKCQkJCQljLTAuNS0wLjQtMC42LTAuOS0wLjUtMS41YzAuMS0wLjUsMC4zLTAuOSwwLjYtMS4zYzAuNS0wLjcsMS4xLTEuMywxLjgtMS43czEuNS0wLjcsMi4yLTAuOWMwLjYtMC4yLDEuNC0wLjMsMi4xLTAuNAoJCQkJCWMwLjYtMC4xLDEuMi0wLjEsMS44LTAuMWMwLjUsMCwwLjktMC4xLDEuNC0wLjFjMC45LDAsMS44LDAuMSwyLjYsMC40YzAuMywwLjEsMC42LDAuMiwwLjksMC40YzAuMSwwLjEsMC4yLDAuMSwwLjQsMC4yCgkJCQkJYzAuNCwwLjQsMC42LDAuOCwwLjQsMS40Yy0wLjEsMC4zLTAuMiwwLjUtMC40LDAuOEMyNiwzNi44LDI2LDM2LjksMjUuOSwzN3MtMC4xLDAuMS0wLjIsMC4xYy0yLjEsMC00LjIsMC02LjMsMAoJCQkJCWMtMC41LDAtMC45LDAtMS40LDBjLTAuMSwwLTAuMSwwLTAuMiwwLjFjLTAuMiwwLjMtMC41LDAuNi0wLjYsMC45Yy0wLjEsMC4yLTAuMiwwLjQtMC4yLDAuNmMtMC4xLDAuNCwwLjEsMC43LDAuNSwwLjkKCQkJCQljMC4yLDAuMSwwLjUsMC4yLDAuNywwLjJjMC40LDAuMSwwLjcsMC4xLDEuMS0wLjFjMC41LTAuMSwwLjktMC40LDEuMS0wLjljMC0wLjEsMC4xLTAuMSwwLjEtMC4xYzEuMSwwLDIuMiwwLDMuMiwwCgkJCQkJQzIzLjksMzguOCwyNC4xLDM4LjksMjQuMiwzOC45TDI0LjIsMzguOXogTTE4LjcsMzYuM2MwLjEsMCwwLjEsMCwwLjIsMGMwLjgsMCwxLjUsMCwyLjMsMGMwLjQsMCwwLjgsMCwxLjIsMAoJCQkJCWMwLjEsMCwwLjEsMCwwLjItMC4xYzAuMS0wLjIsMC4yLTAuNCwwLjItMC41YzAuMS0wLjEsMC4xLTAuMywwLjEtMC40YzAtMC4yLTAuMS0wLjQtMC4yLTAuNGMtMC4xLTAuMS0wLjItMC4xLTAuMi0wLjEKCQkJCQljLTAuMi0wLjEtMC40LTAuMS0wLjYtMC4xYy0wLjYtMC4xLTEuMiwwLTEuNywwLjNDMTkuNywzNS4yLDE5LjIsMzUuNywxOC43LDM2LjNDMTguOCwzNi4yLDE4LjgsMzYuMywxOC43LDM2LjN6Ii8+CgkJCTwvZz4KCQk8L2c+Cgk8L2c+CjwvZz4KPC9zdmc+Cg==
    mediatype: image/svg+xml
  install:
    spec:
      clusterPermissions:
      - rules:
        - nonResourceURLs:
          - /metrics
          verbs:
          - get
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - ""
          resources:
          - pods
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - ""
          resources:
          - serviceaccounts
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - '*'
          resources:
          - clusteroperators
          - componentstatuses
          - cronjobs
          - deploymentconfigs
          - deployments
          - endpoints
          - events
          - horizontalpodautoscalers
          - ingresses
          - jobs
          - limitranges
          - nodes
          - nodes/log
          - nodes/metrics
          - nodes/proxy
          - nodes/spec
          - nodes/stats
          - persistentvolumeclaims
          - persistentvolumes
          - pods
          - replicasets
          - replicationcontrollers
          - resourcequotas
          - services
          - statefulsets
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - admissionregistration.k8s.io
          resources:
          - mutatingwebhookconfigurations
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - apps
          resources:
          - daemonsets
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - eginnovations.com
          resources:
          - eguniversalagents
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - eginnovations.com
          resources:
          - eguniversalagents/finalizers
          verbs:
          - update
        - apiGroups:
          - eginnovations.com
          resources:
          - eguniversalagents/status
          verbs:
          - get
          - patch
          - update
        - apiGroups:
          - rbac.authorization.k8s.io
          resources:
          - clusterrolebindings
          - clusterroles
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - security.openshift.io
          resourceNames:
          - privileged
          resources:
          - securitycontextconstraints
          verbs:
          - use
        - apiGroups:
          - authentication.k8s.io
          resources:
          - tokenreviews
          verbs:
          - create
        - apiGroups:
          - authorization.k8s.io
          resources:
          - subjectaccessreviews
          verbs:
          - create
        serviceAccountName: eginnovations-operator-controller-manager
      deployments:
      - label:
          app.kubernetes.io/component: manager
          app.kubernetes.io/created-by: eginnovations-operator
          app.kubernetes.io/instance: controller-manager
          app.kubernetes.io/managed-by: kustomize
          app.kubernetes.io/name: deployment
          app.kubernetes.io/part-of: eginnovations-operator
          control-plane: controller-manager
        name: eginnovations-operator-controller-manager
        spec:
          replicas: 2
          selector:
            matchLabels:
              control-plane: controller-manager
          strategy: {}
          template:
            metadata:
              annotations:
                kubectl.kubernetes.io/default-container: manager
              labels:
                control-plane: controller-manager
            spec:
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                    - matchExpressions:
                      - key: kubernetes.io/arch
                        operator: In
                        values:
                        - amd64
                        - arm64
                        - ppc64le
                        - s390x
                      - key: kubernetes.io/os
                        operator: In
                        values:
                        - linux
              containers:
              - args:
                - --health-probe-bind-address=:8081
                - --metrics-bind-address=127.0.0.1:8080
                - --leader-elect
                command:
                - /manager
                image: docker.io/eginnovations/universal-agent-operator:0.0.8
                imagePullPolicy: Always
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: 8081
                  initialDelaySeconds: 15
                  periodSeconds: 20
                name: manager
                ports:
                - containerPort: 9443
                  name: webhook-server
                  protocol: TCP
                readinessProbe:
                  httpGet:
                    path: /readyz
                    port: 8081
                  initialDelaySeconds: 5
                  periodSeconds: 10
                resources:
                  limits:
                    cpu: 500m
                    memory: 128Mi
                  requests:
                    cpu: 10m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
                volumeMounts:
                - mountPath: /tmp/k8s-webhook-server/serving-certs
                  name: cert
                  readOnly: true
              - args:
                - --secure-listen-address=0.0.0.0:8443
                - --upstream=http://127.0.0.1:8080/
                - --logtostderr=true
                - --v=0
                image: gcr.io/kubebuilder/kube-rbac-proxy:v0.16.0
                name: kube-rbac-proxy
                ports:
                - containerPort: 8443
                  name: https
                  protocol: TCP
                resources:
                  limits:
                    cpu: 500m
                    memory: 128Mi
                  requests:
                    cpu: 5m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
              securityContext:
                runAsNonRoot: true
              serviceAccountName: eginnovations-operator-controller-manager
              terminationGracePeriodSeconds: 10
              volumes:
              - name: cert
                secret:
                  defaultMode: 420
                  secretName: webhook-server-cert
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
          - patch
        serviceAccountName: eginnovations-operator-controller-manager
    strategy: deployment
  installModes:
  - supported: false
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - Monitoring
  - Tracing
  links:
  - name: eG Innovations Kubernetes Monitoring Overview
    url: https://www.eginnovations.com/documentation/Kubernetes/Introduction-to-Monitoring-Kubernetes.htm
  maintainers:
  - email: devops@eginnovations.com
    name: eG Innovations
  maturity: alpha
  minKubeVersion: 1.22.0
  provider:
    name: eG Innovations
    url: https://www.eginnovations.com
  version: 0.0.8
  webhookdefinitions:
  - admissionReviewVersions:
    - v1
    containerPort: 443
    conversionCRDs:
    - eguniversalagents.eginnovations.com
    deploymentName: eginnovations-operator-controller-manager
    generateName: ceguniversalagents.kb.io
    sideEffects: None
    targetPort: 9443
    type: ConversionWebhook
    webhookPath: /convert
  - admissionReviewVersions:
    - v1
    containerPort: 443
    deploymentName: eginnovations-operator-controller-manager
    failurePolicy: Fail
    generateName: mpod.kb.io
    rules:
    - apiGroups:
      - ""
      apiVersions:
      - v1
      operations:
      - CREATE
      - UPDATE
      resources:
      - pods
    sideEffects: None
    targetPort: 9443
    type: MutatingAdmissionWebhook
    webhookPath: /mutate-v1-pod
