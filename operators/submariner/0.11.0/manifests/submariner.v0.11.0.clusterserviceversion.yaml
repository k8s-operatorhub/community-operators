apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "submariner.io/v1alpha1",
          "kind": "Broker",
          "metadata": {
            "name": "submariner-broker"
          },
          "spec": {
            "components": [
              "service-discovery",
              "connectivity"
            ],
            "defaultGlobalnetClusterSize": 8192,
            "globalnetEnabled": false
          }
        },
        {
          "apiVersion": "submariner.io/v1alpha1",
          "kind": "Submariner",
          "metadata": {
            "name": "submariner"
          },
          "spec": {
            "broker": "k8s",
            "brokerK8sApiServer": "192.168.67.110:8443",
            "brokerK8sApiServerToken": "$(BROKER_K8S_API_TOKEN)",
            "brokerK8sCA": "$(BROKER_K8S_CA)",
            "brokerK8sRemoteNamespace": "submariner-k8s-broker",
            "cableDriver": "libreswan",
            "ceIPSecDebug": false,
            "ceIPSecIKEPort": 500,
            "ceIPSecNATTPort": 4500,
            "ceIPSecPSK": "$(IPSEC_PSK)",
            "clusterCIDR": "192.168.67.0/24",
            "clusterID": "cluster1",
            "connectionHealthCheck": {
              "enabled": false,
              "intervalSeconds": 1,
              "maxPacketLossCount": 5
            },
            "debug": false,
            "globalCIDR": "",
            "namespace": "submariner-operator",
            "natEnabled": true,
            "repository": "quay.io/submariner",
            "serviceCIDR": "192.168.66.0/24",
            "serviceDiscoveryEnabled": true,
            "version": "0.11.0"
          }
        }
      ]
    capabilities: Basic Install
    categories: Networking
    certified: "false"
    containerImage: quay.io/submariner/submariner-operator:0.11.0
    createdAt: "2021-10-14 13:41:37"
    description: Creates and manages Submariner deployments.
    operatorframework.io/suggested-namespace: submariner-operator
    operators.operatorframework.io/builder: operator-sdk-v1.0.1
    operators.operatorframework.io/project_layout: go.kubebuilder.io/v2
    repository: https://github.com/submariner-io/submariner-operator
    support: Submariner
  name: submariner.v0.11.0
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - description: Broker is the Schema for the brokers API
      displayName: Broker
      kind: Broker
      name: brokers.submariner.io
      resources:
      - kind: Deployment
        name: submariner-operator
      specDescriptors:
      - description: List of the components to be installed - any of [service-discovery, connectivity]
        displayName: Components
        path: components
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Default cluster size for GlobalCIDR allocated to each cluster (amount of global IPs)
        displayName: Default Globalnet Cluster Size
        path: defaultGlobalnetClusterSize
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:number
        - urn:alm:descriptor:com.tectonic.ui:fieldDependency:globalnetEnabled:true
        - urn:alm:descriptor:com.tectonic.ui:advanced
      - description: Enable support for Overlapping CIDRs in connecting clusters
        displayName: Enable Globalnet
        path: globalnetEnabled
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
      - description: GlobalCIDR supernet range for allocating GlobalCIDRs to each cluster
        displayName: Globalnet CIDR Range
        path: globalnetCIDRRange
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
        - urn:alm:descriptor:com.tectonic.ui:fieldDependency:globalnetEnabled:true
        - urn:alm:descriptor:com.tectonic.ui:advanced
      - description: List of domains to use for multi-cluster service discovery
        displayName: Default Custom Domains
        path: defaultCustomDomains
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
        - urn:alm:descriptor:com.tectonic.ui:advanced
      statusDescriptors:
      - description: The observed state of the Broker
        displayName: Broker Status
        path: BrokerStatus
      version: v1alpha1
    - description: Submariner is the Schema for the submariners API
      displayName: Submariner
      kind: Submariner
      name: submariners.submariner.io
      resources:
      - kind: Deployment
        name: submariner-operator
      specDescriptors:
      - description: The broker namespace
        displayName: Broker Remote Namespace
        path: brokerK8sRemoteNamespace
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: The service CIDR
        displayName: Service CIDR
        path: serviceCIDR
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: The cluster CIDR
        displayName: Cluster CIDR
        path: clusterCIDR
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: The Global CIDR super-net range for allocating GlobalCIDRs to each cluster
        displayName: Global CIDR
        path: globalCIDR
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
        - urn:alm:descriptor:com.tectonic.ui:advanced
      - description: The cluster ID used to identify the tunnels.
        displayName: Cluster ID
        path: clusterID
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Cable driver implementation - any of [libreswan, wireguard, vxlan]
        displayName: Cable Driver
        path: cableDriver
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:select:libreswan
        - urn:alm:descriptor:com.tectonic.ui:select:wireguard
        - urn:alm:descriptor:com.tectonic.ui:select:vxlan
      - description: Enable support for Service Discovery (lighthouse)
        displayName: Enable Service Discovery
        path: serviceDiscoveryEnabled
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
      - description: Enable operator debugging
        displayName: Debug
        path: debug
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - urn:alm:descriptor:com.tectonic.ui:advanced
      - description: Enable logging IPsec debugging information
        displayName: IPSec Debug
        path: ceIPSecDebug
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - urn:alm:descriptor:com.tectonic.ui:advanced
      - description: This must be "k8s"
        displayName: Broker
        path: broker
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: The broker API URL
        displayName: Broker API Server
        path: brokerK8sApiServer
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: The broker API Token
        displayName: Broker API Token
        path: brokerK8sApiServerToken
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:password
      - description: The broker certificate authority
        displayName: Broker API CA
        path: brokerK8sCA
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:password
      - description: The namespace in which to deploy the submariner operator
        displayName: Namespace
        path: namespace
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Enable automatic Load Balancer in front of the gateways
        displayName: Enable Load Balancer
        path: loadBalancerEnabled
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
      - description: Enable NAT between clusters
        displayName: Enable NAT
        path: natEnabled
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
      - description: The IPsec NAT traversal port (4500 usually)
        displayName: IPSec NATT Port
        path: ceIPSecNATTPort
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:number
        - urn:alm:descriptor:com.tectonic.ui:fieldDependency:natEnabled:true
      - description: The IPsec IKE port (500 usually)
        displayName: IPSec IKE Port
        path: ceIPSecIKEPort
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:number
      - description: The IPsec Pre-Shared Key which must be identical in all route agents across the cluster
        displayName: IPSec Pre Shared Key
        path: ceIPSecPSK
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:password
      - description: Enable this cluster as a preferred server for data-plane connections
        displayName: IPSec Preferred Server
        path: ceIPSecPreferredServer
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - urn:alm:descriptor:com.tectonic.ui:advanced
      - description: Force UDP encapsulation for IPSec
        displayName: IPSec Force UDP Encapsulation
        path: ceIPSecForceUDPEncaps
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - urn:alm:descriptor:com.tectonic.ui:advanced
      - description: The image repository
        displayName: Repository
        path: repository
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
        - urn:alm:descriptor:com.tectonic.ui:advanced
      - description: The image tag
        displayName: Version
        path: version
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
        - urn:alm:descriptor:com.tectonic.ui:advanced
      - description: The gateway connection health check
        displayName: Connection Health Check
        path: connectionHealthCheck
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
      - description: Enable the gateway health check
        displayName: Enable The Connection Health Check
        path: connectionHealthCheck.enabled
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
      - description: Define the gateway health check Interval in seconds
        displayName: Connection Health Check Interval
        path: connectionHealthCheck.intervalSeconds
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:number
        - urn:alm:descriptor:com.tectonic.ui:fieldDependency:connectionHealthCheck.enabled:true
      - description: Define the gateway health check maximum packet loss count
        displayName: Connection Health Check Max Packet Loss Count
        path: connectionHealthCheck.maxPacketLossCount
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:number
        - urn:alm:descriptor:com.tectonic.ui:fieldDependency:connectionHealthCheck.enabled:true
      - description: Override component images
        displayName: Image Override
        path: ImageOverrides
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:hidden
        - urn:alm:descriptor:com.tectonic.ui:advanced
      - description: Name of the custom CoreDNS configmap to configure forwarding to lighthouse. It should be in <namespace>/<name> format where <namespace> is optional and defaults to kube-system.
        displayName: Core DNS Custom Config
        path: coreDNSCustomConfig
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
      - description: List of domains to use for multi-cluster service discovery
        displayName: Custom Domains
        path: customDomains
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
      statusDescriptors:
      - description: The current NAT status
        displayName: NAT Enabled
        path: natEnabled
        x-descriptors:
        - urn:alm:descriptor:text
      - description: The current color codes
        displayName: Color Codes
        path: colorCodes
        x-descriptors:
        - urn:alm:descriptor:text
      - description: The current cluster ID
        displayName: Cluster ID
        path: clusterID
        x-descriptors:
        - urn:alm:descriptor:text
      - description: The current service CIDR
        displayName: Service CIDR
        path: serviceCIDR
        x-descriptors:
        - urn:alm:descriptor:text
      - description: The current cluster CIDR
        displayName: Cluster CIDR
        path: clusterCIDR
        x-descriptors:
        - urn:alm:descriptor:text
      - description: The current global CIDR
        displayName: Global CIDR
        path: globalCIDR
        x-descriptors:
        - urn:alm:descriptor:text
      - description: The current network plugin
        displayName: Network Plugin
        path: networkPlugin
        x-descriptors:
        - urn:alm:descriptor:text
      - description: The status for the gateway daemonSet
        displayName: Gateway DaemonSet Status
        path: gatewayDaemonSetStatus
      - description: The status for the routeAgent daemonSet
        displayName: RouteAgent DaemonSet Status
        path: routeAgentDaemonSetStatus
      - description: The status for the globalnet daemonSet
        displayName: Globalnet DaemonSet Status
        path: globalnetDaemonSetStatus
      - description: The status for the load balancer
        displayName: Load Balancer Status
        path: loadBalancerStatus
      - description: Summary of the submariner gateways in a cluster
        displayName: Gateways
        path: gateways
      - description: Information about the deployment in a cluster
        displayName: Deployment Info
        path: deploymentInfo
      version: v1alpha1
  description: |
    [Submariner](https://submariner.io) enables direct networking between Pods and Services in different Kubernetes
    clusters. With Submariner, your applications and services can span multiple cloud providers, data centers, and regions.

    Submariner is designed to be cloud provider and network plugin (CNI) agnostic.

    Submariner consists of several main components that work in conjunction to securely connect workloads across
    multiple Kubernetes clusters, both on-premise and on public clouds:
    * [Gateway Engine](https://submariner.io/getting-started/architecture/gateway-engine/): manages the secure tunnels to other clusters.
    * [Route Agent](https://submariner.io/getting-started/architecture/route-agent/): routes cross-cluster traffic from nodes
    to the active Gateway Engine.
    * [Broker](https://submariner.io/getting-started/architecture/broker/): facilitates the exchange of metadata between Gateway
    Engines enabling them to discover one another.

    Submariner has optional components that provide additional functionality:
    * [Globalnet Controller](https://submariner.io/getting-started/architecture/globalnet/): handles overlapping CIDRs across clusters.
    * [Service Discovery](https://submariner.io/getting-started/architecture/service-discovery/): provides DNS discovery of services
    across clusters.

    ### Prerequisites
    Submariner has a few requirements to get started, all are documented [here](https://submariner.io/getting-started/quickstart/kind/#prerequisites).

    If running on an OpenShift cluster, perform the following steps to bind the Submariner service accounts to the **privileged** SCC.

    ```shell
    oc adm policy add-scc-to-user privileged system:serviceaccount:submariner-operator:submariner-gateway
    oc adm policy add-scc-to-user privileged system:serviceaccount:submariner-operator:submariner-routeagent
    oc adm policy add-scc-to-user privileged system:serviceaccount:submariner-operator:submariner-globalnet
    oc adm policy add-scc-to-user privileged system:serviceaccount:submariner-operator:submariner-lighthouse-coredns
    ```

    ### Deployment
    Submariner provides an [Operator](https://github.com/submariner-io/submariner-operator) for easy API-based
    installation and management.
    A command line utility, [subctl](https://github.com/submariner-io/submariner-operator/releases), wraps the
    Operator to aid users with manual deployments and easy experimentation.
    subctl greatly simplifies the deployment of Submariner, and is therefore the recommended deployment method.
    For complete information about subctl, please refer to [this page](https://submariner.io/operations/deployment/subctl).
    In addition to Operator and subctl, Submariner also provides [Helm Charts](https://submariner.io/operations/deployment/helm).

    On the broker cluster:
    1. Create the broker namespace called `submariner-k8s-broker`.
    2. Apply the broker RBAC definitions:

        ```shell
        git clone --depth 1 --single-branch --branch release-0.11 https://github.com/submariner-io/submariner-operator
        kubectl apply -k submariner-operator/config/broker -n submariner-k8s-broker
        ```

    3. Install the Submariner Operator from the catalog.
    4. Create a new `Broker` custom resource named **submariner-broker**.

    On connected clusters:
    1. Install the Submariner Operator from the catalog.
    2. Create a new `Submariner` custom resource named **submariner**.

    The following values can be specified for the **Broker** CR:
    * **defaultCustomDomains**: List of domains to use for multicluster service discovery.
    * **defaultGlobalnetClusterSize**: Default cluster size for GlobalCIDR allocated to each cluster (amount of global IPs).
    * **globalnetEnabled**: Enable support for Overlapping CIDRs in connecting clusters (default disabled).
    * **globalnetCIDRRange**: GlobalCIDR supernet range for allocating GlobalCIDRs to each cluster.
    * **components**: List of components to be installed [service-discovery, connectivity].

    The following values can be specified for the **Submariner** CR:
    * **namespace**: The namespace to install in.
    * **serviceCIDR**: The service CIDR.
    * **clusterCIDR**: The cluster CIDR.
    * **clusterID**: The cluster ID used to identify the tunnels.
    * **colorCodes**: The color code(s) for the cluster.
    * **debug**: *'true'* to enable operator debugging information - verbose logging.
    * **natEnabled**: *'true'* if there is NAT between clusters. Typically *'true'* in public cloud or mixed on-prem/public cloud environments and *'false'* when all clusters are on-prem.
    * **broker**: This must be *k8s* currently.
    * **brokerK8sApiServer**: The broker API server URL.
        To retrieve it run the following command on the broker cluster:

        `kubectl -n default get endpoints kubernetes -o
        jsonpath="{.subsets[0].addresses[0].ip}:{.subsets[0].ports[?(@.name=='https')].port}"`

    * **brokerK8sApiServerToken**: The broker API server token.
        To retrieve the token run the following command on the broker cluster, assuming the broker is running in the
        *submariner-k8s-broker* namespace:

        `kubectl -n submariner-k8s-broker get secrets -o json
        | jq -r -c '[.items[] | select(.metadata.annotations."kubernetes.io/service-account.name"=="submariner-k8s-broker-client")
        | select(.data.token != null)] | .[0].data.token' | base64 --decode`

    * **brokerK8sRemoteNamespace**: The broker namespace.
    * **brokerK8sCA**: The broker certificate authority.
        To retrieve the broker CA run the following command on the broker cluster, assuming the broker is running in
        the *submariner-k8s-broker* namespace:

        `kubectl -n submariner-k8s-broker get secrets -o json
        | jq -r -c '[.items[] | select(.metadata.annotations."kubernetes.io/service-account.name"=="submariner-k8s-broker-client")
        | select(.data."ca.crt" != null)] | .[0].data."ca.crt"' | base64 --decode`

    * **ceIPSecPSK**: The IPsec Pre-Shared Key which must be identical in all route agents across the cluster.
        To generate a unique PSK run the following command on your machine:

        `dd if=/dev/urandom count=64 bs=8 | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | fold -w 64 | head -n 1`

    * **ceIPSecDebug**: *'true'* to enable logging IPsec debugging information - verbose logging from the IPsec daemon.
    * **ceIPSecIKEPort**: The IPsec IKE port (500 usually).
    * **ceIPSecNATTPort**: The IPsec NAT traversal port (4500 usually).
    * **repository**: The container repository to use.
    * **version**: The container version to use.
    * **imageOverrides**: A string map that overrides the images by defining a path for each component.
                          This field is meant to be used by CI, development or testing.

      **example:**

      ```yaml
      imageOverrides:
        submariner-route-agent=my_repo/my_custom_image:my_tag
        submariner-globalnet=my_repo/my_custom_image:my_tag
      ```
  displayName: Submariner
  icon:
  - base64data: PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjxzdmcKICAgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIgogICB4bWxuczpjYz0iaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbnMjIgogICB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiCiAgIHhtbG5zOnN2Zz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgeG1sbnM6c29kaXBvZGk9Imh0dHA6Ly9zb2RpcG9kaS5zb3VyY2Vmb3JnZS5uZXQvRFREL3NvZGlwb2RpLTAuZHRkIgogICB4bWxuczppbmtzY2FwZT0iaHR0cDovL3d3dy5pbmtzY2FwZS5vcmcvbmFtZXNwYWNlcy9pbmtzY2FwZSIKICAgdmlld0JveD0iMCAwIDE4NS40OTg5NiAxODUuNDk4OTQiCiAgIHZlcnNpb249IjEuMSIKICAgaWQ9InN2ZzQ2NTYiCiAgIHNvZGlwb2RpOmRvY25hbWU9ImxvZ28uc3ZnIgogICB3aWR0aD0iMTg1LjQ5ODk2IgogICBoZWlnaHQ9IjE4NS40OTg5NSIKICAgaW5rc2NhcGU6dmVyc2lvbj0iMC45Mi40ICh1bmtub3duKSI+CiAgPG1ldGFkYXRhCiAgICAgaWQ9Im1ldGFkYXRhNDY2MCI+CiAgICA8cmRmOlJERj4KICAgICAgPGNjOldvcmsKICAgICAgICAgcmRmOmFib3V0PSIiPgogICAgICAgIDxkYzpmb3JtYXQ+aW1hZ2Uvc3ZnK3htbDwvZGM6Zm9ybWF0PgogICAgICAgIDxkYzp0eXBlCiAgICAgICAgICAgcmRmOnJlc291cmNlPSJodHRwOi8vcHVybC5vcmcvZGMvZGNtaXR5cGUvU3RpbGxJbWFnZSIgLz4KICAgICAgICA8ZGM6dGl0bGU+bG9nbzwvZGM6dGl0bGU+CiAgICAgIDwvY2M6V29yaz4KICAgIDwvcmRmOlJERj4KICA8L21ldGFkYXRhPgogIDxzb2RpcG9kaTpuYW1lZHZpZXcKICAgICBwYWdlY29sb3I9IiNmZmZmZmYiCiAgICAgYm9yZGVyY29sb3I9IiM2NjY2NjYiCiAgICAgYm9yZGVyb3BhY2l0eT0iMSIKICAgICBvYmplY3R0b2xlcmFuY2U9IjEwIgogICAgIGdyaWR0b2xlcmFuY2U9IjEwIgogICAgIGd1aWRldG9sZXJhbmNlPSIxMCIKICAgICBpbmtzY2FwZTpwYWdlb3BhY2l0eT0iMCIKICAgICBpbmtzY2FwZTpwYWdlc2hhZG93PSIyIgogICAgIGlua3NjYXBlOndpbmRvdy13aWR0aD0iMTkyMCIKICAgICBpbmtzY2FwZTp3aW5kb3ctaGVpZ2h0PSIxMDE2IgogICAgIGlkPSJuYW1lZHZpZXc0NjU4IgogICAgIHNob3dncmlkPSJmYWxzZSIKICAgICBmaXQtbWFyZ2luLXRvcD0iMCIKICAgICBmaXQtbWFyZ2luLWxlZnQ9IjAiCiAgICAgZml0LW1hcmdpbi1yaWdodD0iMCIKICAgICBmaXQtbWFyZ2luLWJvdHRvbT0iMCIKICAgICBpbmtzY2FwZTp6b29tPSIxLjM2OTIwODQiCiAgICAgaW5rc2NhcGU6Y3g9IjQ4Mi43NjA3MSIKICAgICBpbmtzY2FwZTpjeT0iOTIuNzQ5NDY5IgogICAgIGlua3NjYXBlOndpbmRvdy14PSIwIgogICAgIGlua3NjYXBlOndpbmRvdy15PSIyNyIKICAgICBpbmtzY2FwZTp3aW5kb3ctbWF4aW1pemVkPSIxIgogICAgIGlua3NjYXBlOmN1cnJlbnQtbGF5ZXI9IkxheWVyXzEiIC8+CiAgPGRlZnMKICAgICBpZD0iZGVmczQ2MTEiPgogICAgPHN0eWxlCiAgICAgICBpZD0ic3R5bGU0NjA5Ij4uY2xzLTF7ZmlsbDojMmFkZmMzO30uY2xzLTJ7ZmlsbDojMjg3ZWZiO30uY2xzLTN7ZmlsbDojMzg0NzQ1O308L3N0eWxlPgogIDwvZGVmcz4KICA8dGl0bGUKICAgICBpZD0idGl0bGU0NjEzIj5sb2dvPC90aXRsZT4KICA8ZwogICAgIGlkPSJMYXllcl8xIgogICAgIGRhdGEtbmFtZT0iTGF5ZXIgMSI+CiAgICA8cGF0aAogICAgICAgY2xhc3M9ImNscy0xIgogICAgICAgZD0iTSAxNzYuNjM0NDQsOC44NjQ1MyBWIDE3Ni42MzQ0MSBIIDguODY0NTMgViA4Ljg2NDUzIGggMTY3Ljc2OTkxIG0gMCwtOC44NjQ1MyBIIDguODY0NTMgQSA4Ljg2NDU2LDguODY0NTYgMCAwIDAgMCw4Ljg2NDUzIHYgMTY3Ljc2OTg4IGEgOC44NjQ1Niw4Ljg2NDU2IDAgMCAwIDguODY0NTMsOC44NjQ1MyBoIDE2Ny43Njk5MSBhIDguODY0NTUsOC44NjQ1NSAwIDAgMCA4Ljg2NDUzLC04Ljg2NDUzIFYgOC44NjQ1MyBBIDguODY0NTUsOC44NjQ1NSAwIDAgMCAxNzYuNjM0NDQsMCBaIgogICAgICAgaWQ9InBhdGg0NjE1IgogICAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIKICAgICAgIHN0eWxlPSJmaWxsOiMyYWRmYzMiIC8+CiAgICA8cGF0aAogICAgICAgY2xhc3M9ImNscy0yIgogICAgICAgZD0ibSAxMDUuNjc1NTcsMTMxLjM0NDUxIGggLTgyLjAzNyBWIDEyMi40OCBoIDgwLjIwNzU0IGwgMjMuMjkzNjMsLTIzLjE3ODIgYSA0LjQzMTgzLDQuNDMxODMgMCAwIDEgMy4xMjYyNSwtMS4yOTA0NCBoIDMxLjU5NDMxIHYgOC44NjQ1MyBoIC0yOS43NjQ4NSBsIC0yMy4yOTM2MywyMy4xNzgyMSBhIDQuNDMyMzcsNC40MzIzNyAwIDAgMSAtMy4xMjYyNSwxLjI5MDQxIHoiCiAgICAgICBpZD0icGF0aDQ2MTciCiAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgc3R5bGU9ImZpbGw6IzI4N2VmYiIgLz4KICAgIDxwYXRoCiAgICAgICBjbGFzcz0iY2xzLTIiCiAgICAgICBkPSJNIDExNy44NzIzOCwxNjAuODkyOTQgSCAyMy42Mzg1NyB2IC04Ljg2NDUzIGggOTIuNDA0MzUgbCAyMy4yOTM2MywtMjMuMTc4MiBhIDQuNDMxODMsNC40MzE4MyAwIDAgMSAzLjEyNjI0LC0xLjI5MDQ0IGggMTkuMzk3NTEgdiA4Ljg2NDUzIGggLTE3LjU2OCBsIC0yMy4yOTM2MywyMy4xNzgyMSBhIDQuNDMxODcsNC40MzE4NyAwIDAgMSAtMy4xMjYyOSwxLjI5MDQzIHoiCiAgICAgICBpZD0icGF0aDQ2MTkiCiAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgc3R5bGU9ImZpbGw6IzI4N2VmYiIgLz4KICAgIDxwYXRoCiAgICAgICBjbGFzcz0iY2xzLTIiCiAgICAgICBkPSJNIDQ5LjEzNDE5LDcyLjcxMjggSCAyMy42Mzg1NyB2IC04Ljg2NDUzIGggMjMuNjY2MTUgbCAyMy4yOTQyMSwtMjMuMTc4MiBhIDQuNDMyMzgsNC40MzIzOCAwIDAgMSAzLjEyNjI1LC0xLjI5MDQ0IGggODguMTM1MTIgdiA4Ljg2NDUzIEggNzUuNTU0NjQgTCA1Mi4yNjA0Myw3MS40MjIzNyBhIDQuNDMyMzUsNC40MzIzNSAwIDAgMSAtMy4xMjYyNCwxLjI5MDQzIHoiCiAgICAgICBpZD0icGF0aDQ2MjEiCiAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgc3R5bGU9ImZpbGw6IzI4N2VmYiIgLz4KICAgIDxwYXRoCiAgICAgICBjbGFzcz0iY2xzLTEiCiAgICAgICBkPSJtIDE2MS44NjAzLDEwNi44NzU4NyBoIC0xOS42NDIyIGEgNC40MzIzNCw0LjQzMjM0IDAgMCAxIC0zLjEyNjI1LC0xLjI5MDQ0IEwgMTE1Ljc5ODIyLDgyLjQwNzIzIEggODAuMDY4MjggQSA0LjQzMjM0LDQuNDMyMzQgMCAwIDEgNzYuOTQyLDgxLjExNjc5IEwgNTMuNjQ3OCw1Ny45Mzg1OSBIIDIzLjYzODU3IHYgLTguODY0NTMgaCAzMS44Mzg3MiBhIDQuNDMyMzksNC40MzIzOSAwIDAgMSAzLjEyNjI1LDEuMjkwNDMgbCAyMy4yOTQyLDIzLjE3ODIxIGggMzUuNzI5OTQgYSA0LjQzMTg3LDQuNDMxODcgMCAwIDEgMy4xMjYyNSwxLjI5MDQzIGwgMjMuMjkzNjMsMjMuMTc4MjEgaCAxNy44MTI3NCB6IgogICAgICAgaWQ9InBhdGg0NjIzIgogICAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIKICAgICAgIHN0eWxlPSJmaWxsOiMyYWRmYzMiIC8+CiAgICA8cGF0aAogICAgICAgY2xhc3M9ImNscy0xIgogICAgICAgZD0ibSAxNjEuODYwMywxMzYuNDI0MyBoIC0zMS44MzkgYSA0LjQzMTg3LDQuNDMxODcgMCAwIDEgLTMuMTI2MjUsLTEuMjkwNDMgTCAxMDMuNjAxNDIsMTExLjk1NTY2IEggNjcuODcyMDUgQSA0LjQzMjM3LDQuNDMyMzcgMCAwIDEgNjQuNzQ1OCwxMTAuNjY1MjMgTCA0MS40NTE1OSw4Ny40ODcgaCAtMTcuODEzIHYgLTguODY0NTEgaCAxOS42NDI0NyBhIDQuNDMyMzYsNC40MzIzNiAwIDAgMSAzLjEyNjI1LDEuMjkwNDQgbCAyMy4yOTQyLDIzLjE3ODIgaCAzNS43MjkzNiBhIDQuNDMyMzQsNC40MzIzNCAwIDAgMSAzLjEyNjI1LDEuMjkwNDQgbCAyMy4yOTM2MywyMy4xNzgyIGggMzAuMDA5NTUgeiIKICAgICAgIGlkPSJwYXRoNDYyNSIKICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICBzdHlsZT0iZmlsbDojMmFkZmMzIiAvPgogICAgPHBhdGgKICAgICAgIGNsYXNzPSJjbHMtMSIKICAgICAgIGQ9Ik0gMTYxLjg2MDMsMTIxLjY1MDA5IEggMTM2LjEyIGEgNC40MzI0LDQuNDMyNCAwIDAgMSAtMy4xMjYyNSwtMS4yOTA0NCBMIDEwOS42OTk1NSw5Ny4xODE0NCBIIDczLjk2OTg3IEEgNC40MzIzNyw0LjQzMjM3IDAgMCAxIDcwLjg0MzYzLDk1Ljg5MSBMIDQ3LjU0OTQyLDcyLjcxMjggSCAyMy42Mzg1NyB2IC04Ljg2NDUzIGggMjUuNzQwMzEgYSA0LjQzMjM4LDQuNDMyMzggMCAwIDEgMy4xMjYyNSwxLjI5MDQ0IEwgNzUuNzk5MzQsODguMzE2OTIgSCAxMTEuNTI5IGEgNC40MzE4OCw0LjQzMTg4IDAgMCAxIDMuMTI2MjUsMS4yOTA0MyBsIDIzLjI5NDIsMjMuMTc4MjEgaCAyMy45MTA4NSB6IgogICAgICAgaWQ9InBhdGg0NjI3IgogICAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIKICAgICAgIHN0eWxlPSJmaWxsOiMyYWRmYzMiIC8+CiAgICA8cGF0aAogICAgICAgY2xhc3M9ImNscy0yIgogICAgICAgZD0iTSAxMTEuNzczNjksMTQ2LjExODczIEggMjMuNjM4NTcgdiAtOC44NjQ1MyBoIDg2LjMwNTY1IGwgMjMuMjk0MjEsLTIzLjE3ODIgYSA0LjQzMjM3LDQuNDMyMzcgMCAwIDEgMy4xMjYyNSwtMS4yOTA0MyBoIDI1LjQ5NTYyIHYgOC44NjQ1MyBoIC0yMy42NjYxNiBsIC0yMy4yOTQyLDIzLjE3ODIgYSA0LjQzMjQsNC40MzI0IDAgMCAxIC0zLjEyNjI1LDEuMjkwNDMgeiIKICAgICAgIGlkPSJwYXRoNDYyOSIKICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICBzdHlsZT0iZmlsbDojMjg3ZWZiIiAvPgogICAgPHBhdGgKICAgICAgIGNsYXNzPSJjbHMtMiIKICAgICAgIGQ9Ik0gNDMuMDM2MzYsNTcuOTM4NTkgSCAyMy42Mzg1NyBWIDQ5LjA3NDA2IEggNDEuMjA2OSBMIDY0LjUwMTEsMjUuODk2NDMgQSA0LjQzMjQsNC40MzI0IDAgMCAxIDY3LjYyNzM1LDI0LjYwNiBoIDk0LjIzMjk1IHYgOC44NjQ1MyBIIDY5LjQ1NjgxIGwgLTIzLjI5NDIsMjMuMTc3NjIgYSA0LjQzMjM2LDQuNDMyMzYgMCAwIDEgLTMuMTI2MjUsMS4yOTA0NCB6IgogICAgICAgaWQ9InBhdGg0NjMxIgogICAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIKICAgICAgIHN0eWxlPSJmaWxsOiMyODdlZmIiIC8+CiAgICA8cGF0aAogICAgICAgY2xhc3M9ImNscy0yIgogICAgICAgZD0iTSA1NS4yMzIsODcuNDg3IEggMjMuNjM4NTcgdiAtOC44NjQ1MSBoIDI5Ljc2NCBMIDc2LjY5Njc2LDU1LjQ0NDg2IEEgNC40MzIzNSw0LjQzMjM1IDAgMCAxIDc5LjgyMyw1NC4xNTQ0MyBoIDgyLjAzNzMgViA2My4wMTkgSCA4MS42NTI0NyBMIDU4LjM1ODI2LDg2LjE5NjU4IEEgNC40MzIzNCw0LjQzMjM0IDAgMCAxIDU1LjIzMiw4Ny40ODcgWiIKICAgICAgIGlkPSJwYXRoNDYzMyIKICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICBzdHlsZT0iZmlsbDojMjg3ZWZiIiAvPgogIDwvZz4KPC9zdmc+Cg==
    mediatype: image/svg+xml
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - create
          - get
          - list
          - watch
          - update
        - apiGroups:
          - apiextensions.k8s.io
          resources:
          - customresourcedefinitions
          verbs:
          - get
          - list
          - create
          - update
          - delete
          - watch
        - apiGroups:
          - ""
          resources:
          - pods
          - services
          - nodes
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - operator.openshift.io
          resources:
          - dnses
          verbs:
          - get
          - list
          - watch
          - update
        - apiGroups:
          - config.openshift.io
          resources:
          - networks
          verbs:
          - get
          - list
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - monitoring.coreos.com
          resources:
          - servicemonitors
          verbs:
          - get
          - create
        serviceAccountName: submariner-operator
      deployments:
      - name: submariner-operator
        spec:
          replicas: 1
          selector:
            matchLabels:
              control-plane: submariner-operator
          strategy: {}
          template:
            metadata:
              labels:
                control-plane: submariner-operator
            spec:
              containers:
              - command:
                - submariner-operator
                env:
                - name: WATCH_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.annotations['olm.targetNamespaces']
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: OPERATOR_NAME
                  value: submariner-operator
                image: quay.io/submariner/submariner-operator:0.11.0
                imagePullPolicy: Always
                name: submariner-operator
                resources: {}
              serviceAccountName: submariner-operator
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - pods
          - services
          - services/finalizers
          - endpoints
          - persistentvolumeclaims
          - events
          - configmaps
          - secrets
          verbs:
          - '*'
        - apiGroups:
          - apps
          resources:
          - deployments
          - daemonsets
          - replicasets
          - statefulsets
          verbs:
          - '*'
        - apiGroups:
          - monitoring.coreos.com
          resources:
          - servicemonitors
          verbs:
          - get
          - create
        - apiGroups:
          - apps
          resourceNames:
          - submariner-operator
          resources:
          - deployments/finalizers
          verbs:
          - update
        - apiGroups:
          - ""
          resources:
          - pods
          verbs:
          - get
        - apiGroups:
          - apps
          resources:
          - replicasets
          verbs:
          - get
        - apiGroups:
          - submariner.io
          resources:
          - '*'
          - servicediscoveries
          verbs:
          - '*'
        serviceAccountName: submariner-operator
    strategy: deployment
  installModes:
  - supported: true
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: false
    type: AllNamespaces
  keywords:
  - multi-cluster
  - ipsec
  - tunnel
  - submariner-operator
  labels:
    name: submariner-operator
  links:
  - name: Website
    url: https://submariner.io
  - name: GitHub
    url: https://github.com/submariner-io
  - name: Slack
    url: https://kubernetes.slack.com/archives/C010RJV694M
  - name: YouTube
    url: https://www.youtube.com/channel/UCZ3brSgl2v4boglZoeChClQ/videos
  - name: Twitter
    url: https://twitter.com/submarinerio
  maintainers:
  - email: submariner-dev@googlegroups.com
    name: Submariner project
  maturity: alpha
  provider:
    name: submariner.io
  selector:
    matchLabels:
      control-plane: submariner-operator
  version: 0.11.0
