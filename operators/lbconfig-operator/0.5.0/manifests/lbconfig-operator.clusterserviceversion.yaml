apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "lb.lbconfig.carlosedp.com/v1",
          "kind": "ExternalLoadBalancer",
          "metadata": {
            "name": "externalloadbalancer-infra-sample",
            "namespace": "lbconfig-operator-system"
          },
          "spec": {
            "monitor": {
              "monitortype": "http",
              "path": "/healthz",
              "port": 1936
            },
            "ports": [
              80,
              443
            ],
            "provider": {
              "creds": "f5-creds",
              "host": "https://192.168.1.35",
              "partition": "Common",
              "port": 443,
              "validatecerts": false,
              "vendor": "F5_BigIP"
            },
            "type": "infra",
            "vip": "192.168.1.45"
          }
        },
        {
          "apiVersion": "lb.lbconfig.carlosedp.com/v1",
          "kind": "ExternalLoadBalancer",
          "metadata": {
            "name": "externalloadbalancer-infra-sample-shard",
            "namespace": "lbconfig-operator-system"
          },
          "spec": {
            "monitor": {
              "monitortype": "http",
              "path": "/healthz",
              "port": 1936
            },
            "nodelabels": {
              "kubernetes.io/region": "DC1",
              "node-role.kubernetes.io/infra": ""
            },
            "ports": [
              80,
              443
            ],
            "provider": {
              "creds": "f5-creds",
              "host": "https://192.168.1.35",
              "partition": "Common",
              "port": 443,
              "validatecerts": false,
              "vendor": "F5_BigIP"
            },
            "type": "infra",
            "vip": "192.168.1.46"
          }
        },
        {
          "apiVersion": "lb.lbconfig.carlosedp.com/v1",
          "kind": "ExternalLoadBalancer",
          "metadata": {
            "name": "externalloadbalancer-master-sample",
            "namespace": "lbconfig-operator-system"
          },
          "spec": {
            "monitor": {
              "monitortype": "https",
              "path": "/healthz",
              "port": 6443
            },
            "ports": [
              6443
            ],
            "provider": {
              "creds": "netscaler-creds",
              "host": "https://192.168.1.36",
              "port": 443,
              "validatecerts": false,
              "vendor": "Citrix_ADC"
            },
            "type": "master",
            "vip": "192.168.1.40"
          }
        }
      ]
    capabilities: Auto Pilot
    categories: Networking
    certified: "false"
    containerImage: quay.io/carlosedp/lbconfig-operator:v0.5.0
    createdAt: "2024-09-13T20:01:51Z"
    description: The LBConfig Operator, manages the configuration of External Load
      Balancer instances (on third-party equipment) and creates VIPs and IP Pools
      dynamically via API.
    k8sMaxVersion: ""
    k8sMinVersion: ""
    operators.operatorframework.io/builder: operator-sdk-v1.36.1
    operators.operatorframework.io/project_layout: go.kubebuilder.io/v4
    repository: https://github.com/carlosedp/lbconfig-operator
    support: ""
  name: lbconfig-operator.v0.5.0
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - description: ExternalLoadBalancer is the Schema for the externalloadbalancers
        API
      displayName: ExternalLoadBalancer Instance
      kind: ExternalLoadBalancer
      name: externalloadbalancers.lb.lbconfig.carlosedp.com
      resources:
      - kind: ExternalLoadBalancer
        name: externalloadbalancer
        version: lb.lbconfig.carlosedp.com/v1
      specDescriptors:
      - description: Monitor is the path and port to monitor the LoadBalancer members
        displayName: Monitor
        path: monitor
      - description: |-
          MonitorType is the monitor parent type. <monitorType> must be one of "http", "https",
          "icmp".
        displayName: Monitor Type
        path: monitor.monitortype
      - description: Name is the monitor name, it is set by the controller
        displayName: Name
        path: monitor.name
      - description: Path is the path URL to check for the pool members in the format
          `/healthz`
        displayName: Path
        path: monitor.path
      - description: Port is the port this monitor should check the pool members
        displayName: Port
        path: monitor.port
      - description: NodeLabels are the node labels used for router sharding as an
          alternative to "type". Optional.
        displayName: Node Labels
        path: nodelabels
      - description: Ports is the ports exposed by this LoadBalancer instance
        displayName: Ports
        path: ports
      - description: Provider is the LoadBalancer backend provider
        displayName: Provider
        path: provider
      - description: |-
          Creds is the credentials secret holding the "username" and "password" keys.
          Generate with: `kubectl create secret generic <secret-name> --from-literal=username=<username> --from-literal=password=<password>`
        displayName: Creds
        path: provider.creds
      - description: Debug is a flag to enable debug on the backend log output. Defaults
          to false.
        displayName: Debug
        path: provider.debug
      - description: Host is the Load Balancer API IP or Hostname in URL format. Eg.
          `http://10.25.10.10`.
        displayName: Host
        path: provider.host
      - description: |-
          Type is the Load-Balancing method. Defaults to "round-robin".
          Options are: ROUNDROBIN, LEASTCONNECTION, LEASTRESPONSETIME
        displayName: LBMethod
        path: provider.lbmethod
      - description: Partition is the F5 partition to create the Load Balancer instances.
          Defaults to "Common". (F5 BigIP only)
        displayName: Partition
        path: provider.partition
      - description: Port is the Load Balancer API Port.
        displayName: Port
        path: provider.port
      - description: ValidateCerts is a flag to validate or not the Load Balancer
          API certificate. Defaults to false.
        displayName: Validate Certs
        path: provider.validatecerts
      - description: Vendor is the backend provider vendor
        displayName: Vendor
        path: provider.vendor
      - description: Type is the node role type (master or infra) for the LoadBalancer
          instance
        displayName: Type
        path: type
      - description: Vip is the Virtual IP configured in  this LoadBalancer instance
        displayName: Vip
        path: vip
      statusDescriptors:
      - displayName: Labels
        path: labels
      - displayName: Monitor
        path: monitor
      - displayName: Nodes
        path: nodes
      - displayName: Num Nodes
        path: numnodes
      - displayName: Pools
        path: pools
      - displayName: Ports
        path: ports
      - displayName: Provider
        path: provider
      - displayName: VIPs
        path: vips
      version: v1
    required:
    - description: ExternalLoadBalancer represents a configured instance of an external
        Load-Balancer for a specific group of nodes of the cluster. The Instance has
        a VIP and ports to be balanced to the cluster nodes based on a set of node
        labels.
      displayName: External Load-Balancer Configuration Instance
      kind: ExternalLoadBalancer
      name: externalloadbalancers.lb.lbconfig.carlosedp.com
      version: v1
  description: |
    ## About the Operator

    The LBConfig Operator, manages the configuration of External Load Balancer instances (on third-party equipment via it's API) and creates VIPs and IP Pools with Monitors for a set of OpenShift or Kubernetes nodes like Master-nodes (Control-Plane), Infra nodes (where the Routers or Ingress controllers are located) or based on it's roles and/or labels.

    The operator dynamically handles creating, updating or deleting the IPs of the pools in the Load Balancer based on the Node IPs for each role or label. On every change of the operator configuration (CRDs) or addition/change/removal or cluster Nodes, the operator updates the Load Balancer properly.

    ## Main Use Cases

    The main users for this operator is enterprise deployments or clusters composed of multiple nodes having an external load-balancer providing the balancing and high-availability to access the cluster in both API and Application levels.

    ### Create ExternalLoadBalancer Instances

    Create the instances for each Load Balancer instance you need (for example one for Master Nodes and another for the Infra Nodes). **If installing on OpenShift or Kubernetes with OLM (or in a different namespace), adjust the sample YAMLs to match the created namespace**.

    **The provider `vendor` field can be (case-insensitive):**

    * **`F5_BigIP`** - Tested on F5 BigIP version 15
    * **`Citrix_ADC`** - Tested on Citrix ADC (Netscaler) version 13
    * **`HAProxy`** - HAProxy with Dataplane API. ([Docs](./docs/haproxy/))
    * **`Dummy`** - Dummy backend used for testing to only print log messages on operations

    Create the secret holding the Load Balancer API user and password:

    ```sh
    oc create secret generic f5-creds --from-literal=username=admin --from-literal=password=admin123 --namespace lbconfig-operator-system
    ```

    #### Sample CRDs and Available Fields

    Master Nodes using a Citrix ADC LB:

    ```yaml
    apiVersion: lb.lbconfig.carlosedp.com/v1
    kind: ExternalLoadBalancer
    metadata:
      name: externalloadbalancer-master-sample
      namespace: lbconfig-operator-system
    spec:
      vip: "192.168.1.40"
      type: "master"
      ports:
        - 6443
      monitor:
        path: "/healthz"
        port: 6443
        monitortype: "https"
      provider:
        vendor: Citrix_ADC
        host: "https://192.168.1.36"
        port: 443
        creds: netscaler-creds
        validatecerts: false
    ```

    Infra Nodes using a F5 BigIP LB:

    ```yaml
    apiVersion: lb.lbconfig.carlosedp.com/v1
    kind: ExternalLoadBalancer
    metadata:
      name: externalloadbalancer-infra-sample
      namespace: lbconfig-operator-system
    spec:
      vip: "192.168.1.45"
      type: "infra"
      ports:
        - 80
        - 443
      monitor:
        path: "/healthz"
        port: 1936
        monitortype: http
      provider:
        vendor: F5_BigIP
        host: "https://192.168.1.35"
        port: 443
        creds: f5-creds
        partition: "Common"
        validatecerts: false
    ```

    To choose the nodes which will be part of the server pool, you can set either `type` or `nodelabels` fields. The yaml field `type: "master"` or `type: "infra"` selects nodes with the role label `"node-role.kubernetes.io/master"` and `"node-role.kubernetes.io/infra"` respectively. If the field `nodelabels` array is used instead, the operator will use nodes which match all labels.

    Clusters with sharded routers or using arbitrary labels to determine where the Ingress Controllers run can be configured like:

    ```yaml
    spec:
      vip: "10.0.0.6"
      ports:
        - 80
      nodelabels:
        "node.kubernetes.io/ingress-controller": "production"
        "kubernetes.io/region": "DC1"
      ...
    ```

    ## Getting Help

    This project fully open-source and is hosted at [GitHub](https://github.com/carlosedp/lbconfig-operator). Always check the project page and issues for the latest updates and/or solutions to problems encountered. If a problem is detected, please fill an issue. Feature request and improvement issues are welcome.

    Some fields inside `providers` are optional and depend on the used backend. Check the [API docs](https://pkg.go.dev/github.com/carlosedp/lbconfig-operator/api/externalloadbalancer/v1?utm_source=gopls#Provider) which fields are backend-specific.

    ## Disclaimers

    * The operator does not check if the requested configuration (names, IPs) already exists and/or conflicts with existing configuration in the Load Balancer. The user is responsible for these checks before deployment;
    * I am not responsible if the operator changes/deletes existing configuration on the Load Balancer if existing names are already configured.
    * The operator creates the entries(Pools, VIPs, Monitors) in the provided Load Balancer with the `name` of the instance configured in the CustomResource prefixed with the type. Eg. For a CR with name `externalloadbalancer-master-sample`, the operator creates a server pool named `Pool-externalloadbalancer-master-sample-6443` (suffixed with the port), a monitor named `Monitor-externalloadbalancer-master-sample` and a VIP named `VIP-externalloadbalancer-master-sample-6443` (suffixed with the port).
  displayName: External Load-Balancer Configuration Operator
  icon:
  - base64data: 
    mediatype: image/png
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - create
          - get
          - list
          - update
        - apiGroups:
          - ""
          resources:
          - nodes
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - ""
          resources:
          - secrets
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - lb.lbconfig.carlosedp.com
          resources:
          - externalloadbalancers
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - lb.lbconfig.carlosedp.com
          resources:
          - externalloadbalancers/status
          verbs:
          - get
          - patch
          - update
        - apiGroups:
          - authentication.k8s.io
          resources:
          - tokenreviews
          verbs:
          - create
        - apiGroups:
          - authorization.k8s.io
          resources:
          - subjectaccessreviews
          verbs:
          - create
        serviceAccountName: lbconfig-operator-controller-manager
      deployments:
      - label:
          control-plane: controller-manager
        name: lbconfig-operator-controller-manager
        spec:
          replicas: 1
          selector:
            matchLabels:
              control-plane: controller-manager
          strategy: {}
          template:
            metadata:
              annotations:
                kubectl.kubernetes.io/default-container: manager
              labels:
                control-plane: controller-manager
            spec:
              containers:
              - args:
                - --secure-listen-address=0.0.0.0:8443
                - --upstream=http://127.0.0.1:8080/
                - --logtostderr=true
                - --v=0
                image: gcr.io/kubebuilder/kube-rbac-proxy:v0.15.0
                name: kube-rbac-proxy
                ports:
                - containerPort: 8443
                  name: https
                  protocol: TCP
                resources:
                  limits:
                    cpu: 500m
                    memory: 128Mi
                  requests:
                    cpu: 5m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
              - args:
                - --health-probe-bind-address=:8081
                - --metrics-bind-address=127.0.0.1:8080
                - --leader-elect
                command:
                - /manager
                image: quay.io/carlosedp/lbconfig-operator:v0.5.0
                imagePullPolicy: Always
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: 8081
                  initialDelaySeconds: 15
                  periodSeconds: 20
                name: manager
                readinessProbe:
                  httpGet:
                    path: /readyz
                    port: 8081
                  initialDelaySeconds: 5
                  periodSeconds: 10
                resources:
                  limits:
                    cpu: 500m
                    memory: 128Mi
                  requests:
                    cpu: 10m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
              securityContext:
                runAsNonRoot: true
              serviceAccountName: lbconfig-operator-controller-manager
              terminationGracePeriodSeconds: 10
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
          - patch
        serviceAccountName: lbconfig-operator-controller-manager
    strategy: deployment
  installModes:
  - supported: true
    type: OwnNamespace
  - supported: true
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: false
    type: AllNamespaces
  keywords:
  - 'load-balance '
  - infrastructure
  labels:
    lbconfig-operator: "true"
  links:
  - name: GitHub
    url: https://github.com/carlosedp/lbconfig-operator
  - name: Documentation
    url: https://github.com/carlosedp/lbconfig-operator/docs
  - name: Issues
    url: https://github.com/carlosedp/lbconfig-operator/issues
  maintainers:
  - email: carlosedp@gmail.com
    name: Carlos Eduardo de Paula
  maturity: beta
  minKubeVersion: 1.18.0
  provider:
    name: Carlos Eduardo de Paula
  selector: {}
  version: 0.5.0
