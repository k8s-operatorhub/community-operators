apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  name: mongodb-operator.v0.3.0
  namespace: placeholder
  annotations:
    alm-examples: >-
      [{"apiVersion":"opstreelabs.in/v1alpha1","kind":"MongoDB","metadata":{"name":"mongodb"},"spec":{"kubernetesConfig":{"image":"quay.io/opstree/mongo:v5.0.6","imagePullPolicy":"IfNotPresent","securityContext":{"fsGroup":1001}},"storage":{"accessModes":["ReadWriteOnce"],"storageSize":"1Gi","storageClass":"gp2"},"mongoDBSecurity":{"mongoDBAdminUser":"admin","secretRef":{"name":"mongodb-secret","key":"password"}}}},{"apiVersion":"opstreelabs.in/v1alpha1","kind":"MongoDBCluster","metadata":{"name":"mongodb"},"spec":{"clusterSize":3,"kubernetesConfig":{"image":"quay.io/opstree/mongo:v5.0.6","imagePullPolicy":"IfNotPresent","securityContext":{"fsGroup":1001}},"storage":{"accessModes":["ReadWriteOnce"],"storageSize":"1Gi","storageClass":"gp2"},"mongoDBSecurity":{"mongoDBAdminUser":"admin","secretRef":{"name":"mongodb-secret","key":"password"}}}}]
    k8sMinVersion: '1.17.0'
    k8sMaxVersion: ''
    categories: 'Database,  OpenShift Optional, Storage'
    certified: 'false'
    createdAt: '05-04-2022'
    description: >-
      A golang based operator to create and manage MongoDB standalone setup and
      cluster setup
    containerImage: 'quay.io/opstree/mongodb-operator:v0.3.0'
    support: ''
    capabilities: Seamless Upgrades
    repository: 'https://github.com/ot-container-kit/mongodb-operator'
spec:
  displayName: MongoDB Operator
  description: >+
    MongoDB Operator is an operator created in Golang to create, update, and
    manage MongoDB standalone, replicated, and arbiter replicated setup on
    Kubernetes and Openshift clusters. This operator is capable of doing the
    setup for MongoDB with all the required best practices.


    ### Supported Features


    * MongoDB replicated cluster setup

    * MongoDB standalone setup

    * MongoDB replicated cluster failover and recovery

    * Monitoring support with MongoDB Exporter

    * Password based authentication for MongoDB

    * Kubernetes's resources for MongoDB standalone and cluster

    * Customizable configuration changes in MongoDB

    * Insightful Grafana dashboards


    ### Documentation


    **[Documentation](https://ot-mongodb-operator.netlify.app/)**

    ### Getting Help


    This project is managed by OpsTree Solutions. If you have any queries or
    suggestions, mail us at opensource@opstree.com.

    ### Contributing

    You can contribute to this project by:-


    * Raising Bugs and Feature Requests

    * Fixing issue by opening a Pull Request

    * Improving Documentation


    ### License


    MongoDB  Operator is licensed under [Apache License, Version
    2.0](https://github.com/OT-CONTAINER-KIT/mongodb-operator/blob/master/LICENSE)


  maturity: alpha
  version: 0.3.0
  replaces: ''
  skips: []
  minKubeVersion: 1.17.0
  keywords:
    - DevOps
    - Kubernetes
    - Database
    - MongoDB
    - Opstree
    - Operatork
    - Cloud Native
  maintainers:
    - name: Abhishek Dubey
      email: abhishek.dubey@opstree.com
    - name: Sandeep Rawat
      email: sandeep@opstree.com
  provider:
    name: Opstree Solutions
  labels: {}
  selector:
    matchLabels: {}
  links:
    - name: Blog
      url: 'https://blog.opstree.com'
    - name: GitHub
      url: 'https://github.com/opstree'
    - name: Opensource
      url: 'https://opstree.github.io'
    - name: Documentation
      url: 'https://ot-mongodb-operator.netlify.app/'
    - name: Buildpiper
      url: 'https://buildpiper.io'
  icon:
    - base64data: >-
        
      mediatype: image/svg+xml
  customresourcedefinitions:
    owned:
      - name: mongodbclusters.opstreelabs.in
        displayName: MongoDBCluster
        kind: MongoDBCluster
        version: v1alpha1
        description: Mongo DB Cluster
        resources:
          - version: v1
            kind: Deployment
          - version: v1
            kind: Service
          - version: v1
            kind: ReplicaSet
          - version: v1
            kind: Pod
          - version: v1
            kind: Secret
          - version: v1
            kind: ConfigMap
        specDescriptors: []
        statusDescriptors: []
      - name: mongodbs.opstreelabs.in
        displayName: MongoDB
        kind: MongoDB
        version: v1alpha1
        description: Mongo DB
        resources:
          - version: v1
            kind: Deployment
          - version: v1
            kind: Service
          - version: v1
            kind: ReplicaSet
          - version: v1
            kind: Pod
          - version: v1
            kind: Secret
          - version: v1
            kind: ConfigMap
        specDescriptors: []
        statusDescriptors: []
    required: []
  install:
    strategy: deployment
    spec:
      permissions: []
      clusterPermissions:
        - serviceAccountName: mongodb-operator
          rules:
          - apiGroups:
              - ""
            resources:
              - configmaps
              - events
              - secrets
              - services
            verbs:
              - create
              - delete
              - get
              - list
              - patch
              - update
              - watch
          - apiGroups:
              - apps
            resources:
              - statefulsets
            verbs:
              - create
              - delete
              - get
              - list
              - patch
              - update
              - watch
          - apiGroups:
              - coordination.k8s.io
            resources:
              - leases
            verbs:
              - create
              - delete
              - get
              - list
              - patch
              - update
              - watch
          - apiGroups:
              - opstreelabs.in
            resources:
              - mongodbclusters
            verbs:
              - create
              - delete
              - get
              - list
              - patch
              - update
              - watch
          - apiGroups:
              - opstreelabs.in
            resources:
              - mongodbclusters/finalizers
            verbs:
              - update
          - apiGroups:
              - opstreelabs.in
            resources:
              - mongodbclusters/status
            verbs:
              - get
              - patch
              - update
          - apiGroups:
              - opstreelabs.in
            resources:
              - mongodbs
            verbs:
              - create
              - delete
              - get
              - list
              - patch
              - update
              - watch
          - apiGroups:
              - opstreelabs.in
            resources:
              - mongodbs/finalizers
            verbs:
              - update
          - apiGroups:
              - opstreelabs.in
            resources:
              - mongodbs/status
            verbs:
              - get
              - patch
              - update
          - apiGroups:
              - policy
            resources:
              - poddisruptionbudgets
            verbs:
              - create
              - delete
              - get
              - list
              - patch
              - update
              - watch
      deployments:
        - name: mongodb-operator
          spec:
            selector:
              matchLabels:
                control-plane: mongodb-operator
            replicas: 1
            template:
              metadata:
                labels:
                  control-plane: mongodb-operator
              spec:
                securityContext:
                  runAsNonRoot: true
                containers:
                  - command:
                      - /manager
                    args:
                      - '--leader-elect'
                    image: 'quay.io/opstree/mongodb-operator:v0.3.0'
                    imagePullPolicy: Always
                    name: manager
                    securityContext:
                      allowPrivilegeEscalation: false
                    livenessProbe:
                      httpGet:
                        path: /healthz
                        port: 8081
                      initialDelaySeconds: 15
                      periodSeconds: 20
                    readinessProbe:
                      httpGet:
                        path: /readyz
                        port: 8081
                      initialDelaySeconds: 5
                      periodSeconds: 10
                    resources:
                      limits:
                        cpu: 200m
                        memory: 400Mi
                      requests:
                        cpu: 200m
                        memory: 400Mi
                serviceAccountName: mongodb-operator
                terminationGracePeriodSeconds: 10
  installModes:
    - type: OwnNamespace
      supported: true
    - type: SingleNamespace
      supported: true
    - type: MultiNamespace
      supported: true
    - type: AllNamespaces
      supported: true
