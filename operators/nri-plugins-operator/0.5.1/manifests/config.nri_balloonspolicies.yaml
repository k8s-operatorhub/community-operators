apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  creationTimestamp: null
  name: balloonspolicies.config.nri
spec:
  group: config.nri
  names:
    kind: BalloonsPolicy
    listKind: BalloonsPolicyList
    plural: balloonspolicies
    singular: balloonspolicy
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: BalloonsPolicy represents the configuration for the balloons
          policy.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: BalloonsPolicySpec describes a balloons policy.
            properties:
              allocatorTopologyBalancing:
                description: |-
                  If AllocatorTopologyBalancing is true, balloons are
                  allocated and resized so that all topology elements
                  (packages, dies, numa nodes, cores) have roughly same
                  amount of allocations. The default is false: balloons are
                  packed tightly to optimize power efficiency. The value set
                  here can be overridden with the balloon type specific
                  setting with the same name.
                type: boolean
              availableResources:
                additionalProperties:
                  type: string
                description: Available/allowed (CPU) resources to use.
                type: object
              balloonTypes:
                description: BallonDefs contains balloon type definitions.
                items:
                  description: BalloonDef contains a balloon definition.
                  properties:
                    allocatorPriority:
                      default: high
                      description: |-
                        AllocatorPriority (High, Normal, Low, None)
                        This parameter is passed to CPU allocator when creating or
                        resizing a balloon. At init, balloons with highest priority
                        CPUs are allocated first.
                      enum:
                      - high
                      - normal
                      - low
                      - none
                      type: string
                    allocatorTopologyBalancing:
                      description: |-
                        AllocatorTopologyBalancing is the balloon type specific
                        parameter of the policy level parameter with the same name.
                      type: boolean
                    cpuClass:
                      description: |-
                        CpuClass controls how CPUs of a balloon are (re)configured
                        whenever a balloon is created, inflated or deflated.
                      type: string
                    groupBy:
                      description: |-
                        GroupBy groups containers into same balloon instances if
                        their GroupBy expressions evaluate to the same group.
                        Expressions are strings where key references like
                        ${pod/labels/mylabel} will be substituted with
                        corresponding values.
                      type: string
                    matchExpressions:
                      description: |-
                        MatchExpressions specifies one or more expressions which are evaluated
                        to see if a container should be assigned into balloon instances from
                        this definition.
                      items:
                        description: |-
                          Expression describes some runtime-evaluated condition. An expression
                          consist of a key, an operator and a set of values. An expressions is
                          evaluated against an object which implements the Evaluable interface.
                          Evaluating an expression consists of looking up the value for the key
                          in the object, then using the operator to check it agains the values
                          of the expression. The result is a single boolean value. An object is
                          said to satisfy the evaluated expression if this value is true. An
                          expression can contain 0, 1 or more values depending on the operator.
                        properties:
                          key:
                            description: Key is the expression key.
                            type: string
                          operator:
                            description: Op is the expression operator.
                            enum:
                            - Equals
                            - NotEqual
                            - In
                            - NotIn
                            - Exists
                            - NotExist
                            - AlwaysTrue
                            - Matches
                            - MatchesNot
                            - MatchesAny
                            - MatchesNone
                            type: string
                          values:
                            description: Values contains the values the key value
                              is evaluated against.
                            items:
                              type: string
                            type: array
                        required:
                        - key
                        - operator
                        type: object
                      type: array
                    maxBalloons:
                      description: |-
                        MaxBalloons is the maximum number of balloon instances that
                        is allowed to co-exist. If reached, new balloons cannot be
                        created anymore.
                      type: integer
                    maxCPUs:
                      description: |-
                        MaxCpus specifies the maximum number of CPUs exclusively
                        usable by containers in a balloon. Balloon size will not be
                        inflated larger than MaxCpus.
                      type: integer
                    minBalloons:
                      description: |-
                        MinBalloons is the number of balloon instances that always
                        exist even if they would become empty. At init this number
                        of instances will be created before assigning any
                        containers.
                      type: integer
                    minCPUs:
                      description: |-
                        MinCpus specifies the minimum number of CPUs exclusively
                        usable by containers in a balloon. When new balloon is created,
                        this will be the number of CPUs reserved for it even if a container
                        would request less.
                      type: integer
                    name:
                      description: Name of the balloon definition.
                      type: string
                    namespaces:
                      description: |-
                        Namespaces control which namespaces are assigned into
                        balloon instances from this definition. This is used by
                        namespace assign methods.
                      items:
                        type: string
                      type: array
                    preferCloseToDevices:
                      description: |-
                        PreferCloseToDevices: prefer creating new balloons of this
                        type close to listed devices.
                      items:
                        type: string
                      type: array
                    preferNewBalloons:
                      description: |-
                        PreferNewBalloons: prefer creating new balloons over adding
                        containers to existing balloons. The default is false:
                        prefer using filling free capacity and possibly inflating
                        existing balloons before creating new ones.
                      type: boolean
                    preferPerNamespaceBalloon:
                      description: |-
                        PreferPerNamespaceBalloon: if true, containers in different
                        namespaces are preferrably placed in separate balloons,
                        even if the balloon type is the same for all of them. On
                        the other hand, containers in the same namespace will be
                        placed in the same balloon instances. The default is false:
                        namespaces have no effect on placement.
                      type: boolean
                    preferSpreadOnPhysicalCores:
                      description: |-
                        PreferSpreadOnPhysicalCores is the balloon type specific
                        parameter of the policy level parameter with the same name.
                      type: boolean
                    preferSpreadingPods:
                      description: |-
                        PreferSpreadingPods: containers of the same pod may be
                        placed on separate balloons. The default is false: prefer
                        placing containers of a pod to the same balloon(s).
                      type: boolean
                    shareIdleCPUsInSame:
                      description: |-
                        ShareIdleCpusInSame <topology-level>: if there are idle
                        CPUs, that is CPUs not in any balloon, in the same
                        <topology-level> as any CPU in the balloon, then allow
                        workloads to run on those (shared) CPUs in addition to the
                        (dedicated) CPUs of the balloon.
                      enum:
                      - ""
                      - system
                      - package
                      - die
                      - numa
                      - core
                      - thread
                      type: string
                  required:
                  - name
                  type: object
                type: array
              control:
                properties:
                  cpu:
                    properties:
                      classes:
                        additionalProperties:
                          properties:
                            energyPerformancePreference:
                              description: EnergyPerformancePreference for CPUs in
                                this class.
                              type: integer
                            maxFreq:
                              description: MaxFreq is the maximum frequency for this
                                class.
                              type: integer
                            minFreq:
                              description: MinFreq is the minimum frequency for this
                                class.
                              type: integer
                            uncoreMaxFreq:
                              description: UncoreMaxFreq is the maximum uncore frequency
                                for this class.
                              type: integer
                            uncoreMinFreq:
                              description: UncoreMinFreq is the minimum uncore frequency
                                for this class.
                              type: integer
                          required:
                          - maxFreq
                          - minFreq
                          type: object
                        type: object
                    required:
                    - classes
                    type: object
                type: object
              idleCPUClass:
                description: |-
                  IdleCpuClass controls how unusded CPUs outside any a
                  balloons are (re)configured.
                type: string
              instrumentation:
                description: Config provides runtime configuration for instrumentation.
                properties:
                  httpEndpoint:
                    description: |-
                      HTTPEndpoint is the address our HTTP server listens on. This endpoint is used
                      to expose Prometheus metrics among other things.
                    example: :8891
                    type: string
                  prometheusExport:
                    description: PrometheusExport enables exporting /metrics for Prometheus.
                    type: boolean
                  reportPeriod:
                    description: ReportPeriod is the interval between reporting aggregated
                      metrics.
                    format: duration
                    type: string
                  samplingRatePerMillion:
                    description: SamplingRatePerMillion is the number of samples to
                      collect per million spans.
                    example: 100000
                    type: integer
                  tracingCollector:
                    description: |-
                      TracingCollector defines the external endpoint for tracing data collection.
                      Endpoints are specified as full URLs, or as plain URL schemes which then
                      imply scheme-specific defaults. The supported schemes and their default
                      URLs are:
                        - otlp-http, http: localhost:4318
                        - otlp-grpc, grpc: localhost:4317
                    example: otlp-http://localhost:4318
                    type: string
                type: object
              log:
                properties:
                  debug:
                    description: Debub turns on debug messages matching listed logger
                      sources.
                    items:
                      type: string
                    type: array
                  klog:
                    description: Klog configures the klog backend.
                    properties:
                      add_dir_header:
                        type: boolean
                      alsologtostderr:
                        type: boolean
                      log_backtrace_at:
                        type: string
                      log_dir:
                        type: string
                      log_file:
                        type: string
                      log_file_max_size:
                        format: int64
                        type: integer
                      logtostderr:
                        type: boolean
                      one_output:
                        type: boolean
                      skip_headers:
                        type: boolean
                      skip_log_headers:
                        type: boolean
                      stderrthreshold:
                        type: string
                      v:
                        type: integer
                      vmodule:
                        type: string
                    type: object
                  source:
                    description: Source controls whether messages are prefixed with
                      their logger source.
                    type: boolean
                type: object
              pinCPU:
                default: true
                description: PinCPU controls pinning containers to CPUs.
                type: boolean
              pinMemory:
                default: true
                description: PinMemory controls pinning containers to memory nodes.
                type: boolean
              preferSpreadOnPhysicalCores:
                description: |-
                  PreferSpreadOnPhysicalCores prefers allocating logical CPUs
                  (possibly hyperthreads) for a balloon from separate physical CPU
                  cores. This prevents workloads in the balloon from interfering with
                  themselves as they do not compete on the resources of the same CPU
                  cores. On the other hand, it allows more interference between
                  workloads in different balloons. The default is false: balloons
                  are packed tightly to a minimum number of physical CPU cores. The
                  value set here is the default for all balloon types, but it can be
                  overridden with the balloon type specific setting with the same
                  name.
                type: boolean
              reservedPoolNamespaces:
                description: |-
                  ReservedPoolNamespaces is a list of namespace globs that
                  will be allocated to reserved CPUs.
                items:
                  type: string
                type: array
              reservedResources:
                additionalProperties:
                  type: string
                description: Reserved (CPU) resources for kube-system namespace.
                type: object
            required:
            - reservedResources
            type: object
          status:
            description: ConfigStatus is the per-node status for a configuration resource.
            properties:
              nodes:
                additionalProperties:
                  description: NodeStatus is the configuration status for a single
                    node.
                  properties:
                    errors:
                      description: Error can provide further details of a configuration
                        error.
                      type: string
                    generation:
                      description: Generation is the generation the configuration
                        this status was set for.
                      format: int64
                      type: integer
                    status:
                      description: Status of activating the configuration on this
                        node.
                      enum:
                      - Success
                      - Failure
                      type: string
                    timestamp:
                      description: Timestamp of setting this status.
                      format: date-time
                      type: string
                  required:
                  - generation
                  - status
                  type: object
                type: object
            required:
            - nodes
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
