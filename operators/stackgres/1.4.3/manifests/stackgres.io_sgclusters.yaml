apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: sgclusters.stackgres.io
spec:
  group: stackgres.io
  names:
    kind: SGCluster
    listKind: SGClusterList
    plural: sgclusters
    shortNames:
    - sgclu
    singular: sgcluster
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.postgres.version
      name: version
      type: string
    - jsonPath: .spec.instances
      name: instances
      type: integer
    - jsonPath: .spec.sgInstanceProfile
      name: Profile
      type: string
    - jsonPath: .spec.pods.persistentVolume.size
      name: Disk
      type: string
    - jsonPath: .spec.prometheusAutobind
      name: prometheus-Autobind
      priority: 1
      type: string
    - jsonPath: .spec.configurations.sgPoolingConfig
      name: pool-config
      priority: 1
      type: string
    - jsonPath: .spec.configurations.sgPostgresConfig
      name: postgres-config
      priority: 1
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        properties:
          metadata:
            properties:
              name:
                description: |
                  Name of the StackGres cluster. Following [Kubernetes naming conventions](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/architecture/identifiers.md), it must be an rfc1035/rfc1123 subdomain, that is, up to 253 characters consisting of one or more lowercase labels separated by `.`. Where each label is an alphanumeric (a-z, and 0-9) string, with a maximum length of 63 characters, with the `-` character allowed anywhere except the first or last character.

                  The name must be unique across all StackGres clusters in the same namespace. The full cluster name includes the namespace in which the cluster is created.
                maxLength: 52
                pattern: ^[a-z]([-a-z0-9]*[a-z0-9])?$
                type: string
            type: object
          spec:
            properties:
              configurations:
                description: |
                  Cluster custom configurations.
                properties:
                  backupPath:
                    description: |
                      **Deprecated**: use instead .spec.configurations.backups[].path

                      The path were the backup is stored. If not set this field is filled up by the operator.

                      When provided will indicate were the backups and WAL files will be stored.
                    type: string
                  backups:
                    description: |
                      List of backups configurations for this SGCluster
                    items:
                      description: |
                        Backup configuration for this SGCluster
                      properties:
                        compression:
                          description: |
                            Specifies the backup compression algorithm. Possible options are: lz4, lzma, brotli. The default method is `lz4`. LZ4 is the fastest method, but compression ratio is the worst. LZMA is way slower, but it compresses backups about 6 times better than LZ4. Brotli is a good trade-off between speed and compression ratio, being about 3 times better than LZ4.
                          enum:
                          - lz4
                          - lzma
                          - brotli
                          type: string
                        cronSchedule:
                          description: |
                            Continuous Archiving backups are composed of periodic *base backups* and all the WAL segments produced in between those base backups. This parameter specifies at what time and with what frequency to start performing a new base backup.

                            Use cron syntax (`m h dom mon dow`) for this parameter, i.e., 5 values separated by spaces:
                            *  `m`: minute, 0 to 59.
                            *  `h`: hour, 0 to 23.
                            *  `dom`: day of month, 1 to 31 (recommended not to set it higher than 28).
                            *  `mon`: month, 1 to 12.
                            *  `dow`: day of week, 0 to 7 (0 and 7 both represent Sunday).

                            Also ranges of values (`start-end`), the symbol `*` (meaning `first-last`) or even `*/N`, where `N` is a number, meaning ""every `N`, may be used. All times are UTC. It is recommended to avoid 00:00 as base backup time, to avoid overlapping with any other external operations happening at this time.

                            If not set, full backups are performed each day at 05:00 UTC.
                          type: string
                        path:
                          description: |
                            The path were the backup is stored. If not set this field is filled up by the operator.

                            When provided will indicate were the backups and WAL files will be stored.
                          type: string
                        performance:
                          description: |
                            Configuration that affects the backup network and disk usage performance.
                          properties:
                            downloadConcurrency:
                              description: |
                                Backup storage may use several concurrent streams to read the data. This parameter configures the number of parallel streams to use. By default, it's set to the minimum between the number of file to read and 10.
                              minimum: 1
                              type: integer
                            maxDiskBandwidth:
                              description: |
                                Maximum disk read I/O when performing a backup. In bytes (per second).
                              type: integer
                            maxNetworkBandwidth:
                              description: |
                                Maximum storage upload bandwidth used when storing a backup. In bytes (per second).
                              type: integer
                            uploadConcurrency:
                              description: |
                                Backup storage may use several concurrent streams to store the data. This parameter configures the number of parallel streams to use. By default, it's set to 16.
                              minimum: 1
                              type: integer
                            uploadDiskConcurrency:
                              description: |
                                Backup storage may use several concurrent streams to store the data. This parameter configures the number of parallel streams to use to reading from disk. By default, it's set to 1.
                              minimum: 1
                              type: integer
                          type: object
                        retention:
                          description: |
                            When an automatic retention policy is defined to delete old base backups, this parameter specifies the number of base backups to keep, in a sliding window.

                            Consequently, the time range covered by backups is `periodicity*retention`, where `periodicity` is the separation between backups as specified by the `cronSchedule` property.

                            Default is 5.
                          minimum: 1
                          type: integer
                        sgObjectStorage:
                          description: |
                            Name of the [SGObjectStorage](https://stackgres.io/doc/latest/reference/crd/sgobjectstorage) to use for the cluster. It defines the location in which the the backups will be stored.
                          type: string
                      required:
                      - sgObjectStorage
                      type: object
                    type: array
                  sgBackupConfig:
                    description: |
                      **Deprecated**: use instead .spec.configurations.backups with sgObjectStorage.

                      Name of the [SGBackupConfig](https://stackgres.io/doc/latest/reference/crd/sgbackupconfig) to use for the cluster. It defines the backups policy, storage and retention, among others, applied to the cluster. When not set, backup configuration will not be used.
                    type: string
                  sgPoolingConfig:
                    description: |
                      Name of the [SGPoolingConfig](https://stackgres.io/doc/latest/reference/crd/sgpoolconfig) used for this cluster. Each pod contains a sidecar with a connection pooler (currently: [PgBouncer](https://www.pgbouncer.org/)). The connection pooler is implemented as a sidecar.

                      If not set, a default configuration will be used. Disabling connection pooling altogether is possible if the disableConnectionPooling property of the pods object is set to true.
                    type: string
                  sgPostgresConfig:
                    description: |
                      Name of the [SGPostgresConfig](https://stackgres.io/doc/latest/reference/crd/sgpgconfig) used for the cluster. It must exist. When not set, a default Postgres config, for the major version selected, is used.
                    type: string
                type: object
              distributedLogs:
                description: StackGres features a functionality for all pods to send
                  Postgres, Patroni and PgBouncer logs to a central (distributed)
                  location, which is in turn another Postgres database. Logs can then
                  be accessed via SQL interface or from the web UI. This section controls
                  whether to enable this feature or not. If not enabled, logs are
                  send to the pod's standard output.
                properties:
                  retention:
                    description: |
                      Define a retention window with the syntax `<integer> (minutes|hours|days|months)` in which log entries are kept.
                       Log entries will be removed when they get older more than the double of the specified retention window.

                      When this field is changed the retention will be applied only to log entries that are newer than the end of
                       the retention window previously specified. If no retention window was previously specified it is considered
                       to be of 7 days. This means that if previous retention window is of `7 days` new retention configuration will
                       apply after UTC timestamp calculated with: `SELECT date_trunc('days', now() at time zone 'UTC') - INTERVAL '7 days'`.
                    pattern: ^[0-9]+ (minutes?|hours?|days?|months?)
                    type: string
                  sgDistributedLogs:
                    description: |
                      Name of the [SGDistributedLogs](https://stackgres.io/doc/latest/04-postgres-cluster-management/06-distributed-logs/) to use for this cluster. It must exist.
                    type: string
                type: object
              initialData:
                description: Cluster initialization data options. Cluster may be initialized
                  empty, or from a backup restoration. Specifying scripts to run on
                  the database after cluster creation is also possible.
                properties:
                  restore:
                    properties:
                      downloadDiskConcurrency:
                        description: |
                          The backup fetch process may fetch several streams in parallel. Parallel fetching is enabled when set to a value larger than one.

                          If not specified it will be interpreted as latest.
                        minimum: 1
                        type: integer
                      fromBackup:
                        description: |
                          From which backup to restore and how the process is configured
                        properties:
                          name:
                            description: |
                              When set to the name of an existing [SGBackup](https://stackgres.io/doc/latest/reference/crd/sgbackup), the cluster is initialized by restoring the backup data to it. If not set, the cluster is initialized empty. The selected backup must be in the same namespace.
                            type: string
                          pointInTimeRecovery:
                            description: |
                              It is possible to restore the database to its state at any time since your backup was taken using Point-in-Time Recovery (PITR) as long as another backup newer than the PITR requested restoration date does not exists.

                              Point In Time Recovery (PITR). PITR allow to restore the database state to an arbitrary point of time in the past, as long as you specify a backup older than the PITR requested restoration date and does not exists a backup newer than the same restoration date.

                              See also: https://www.postgresql.org/docs/current/continuous-archiving.html
                            properties:
                              restoreToTimestamp:
                                description: |
                                  An ISO 8601 date, that holds UTC date indicating at which point-in-time the database have to be restored.
                                type: string
                            type: object
                          target:
                            description: |
                              Specify the [recovery_target](https://postgresqlco.nf/doc/en/param/recovery_target/) that specifies that recovery should end as soon as a consistent
                               state is reached, i.e., as early as possible. When restoring from an online backup, this means the point where taking the backup ended.

                              Technically, this is a string parameter, but 'immediate' is currently the only allowed value.
                            type: string
                          targetTimeline:
                            description: |
                              Specify the [recovery_target_timeline](https://postgresqlco.nf/doc/en/param/recovery_target_timeline/) to recover into a particular timeline.
                               The default is to recover along the same timeline that was current when the base backup was taken. Setting this to latest recovers to the latest
                               timeline found in the archive, which is useful in a standby server. Other than that you only need to set this parameter in complex re-recovery
                               situations, where you need to return to a state that itself was reached after a point-in-time recovery.
                            type: string
                          uid:
                            description: |
                              When set to the UID of an existing [SGBackup](https://stackgres.io/doc/latest/reference/crd/sgbackup), the cluster is initialized by restoring the backup data to it. If not set, the cluster is initialized empty. This field is deprecated.
                            type: string
                        type: object
                    type: object
                  scripts:
                    description: |
                      **Deprecated** use instead .spec.managedSql with SGScript.

                      A list of SQL scripts executed in sequence, exactly once, when the database is bootstrap and/or after restore is completed.
                    items:
                      description: |
                        **Deprecated** use instead .spec.managedSql with SGScript.

                        Scripts are executed in auto-commit mode with the user `postgres` in the specified database (or in database `postgres` if not specified).

                        Fields `script` and `scriptFrom` are mutually exclusive and only one of them is required.
                      properties:
                        database:
                          description: |
                            Database where the script is executed. Defaults to the `postgres` database, if not specified.
                          type: string
                        name:
                          description: |
                            Name of the script. Must be unique across this SGCluster.
                          type: string
                        script:
                          description: |
                            Raw SQL script to execute. This field is mutually exclusive with `scriptFrom` field.
                          type: string
                        scriptFrom:
                          description: |
                            Reference to either a Kubernetes [Secret](https://kubernetes.io/docs/concepts/configuration/secret/) or a [ConfigMap](https://kubernetes.io/docs/concepts/configuration/configmap/) that contains the SQL script to execute. This field is mutually exclusive with `script` field.

                            Fields `secretKeyRef` and `configMapKeyRef` are mutually exclusive, and one of them is required.
                          properties:
                            configMapKeyRef:
                              description: |
                                A [ConfigMap](https://kubernetes.io/docs/concepts/configuration/configmap/) reference that contains the SQL script to execute. This field is mutually exclusive with `secretKeyRef` field.
                              properties:
                                key:
                                  description: |
                                    The key name within the ConfigMap that contains the SQL script to execute.
                                  type: string
                                name:
                                  description: |
                                    The name of the ConfigMap that contains the SQL script to execute.
                                  type: string
                              type: object
                            secretKeyRef:
                              description: |
                                A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the SQL script to execute. This field is mutually exclusive with `configMapKeyRef` field.
                              properties:
                                key:
                                  description: The key of the secret to select from.
                                    Must be a valid secret key.
                                  type: string
                                name:
                                  description: Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
                                  type: string
                              type: object
                          type: object
                      type: object
                    type: array
                type: object
              instances:
                description: |
                  Number of StackGres instances for the cluster. Each instance contains one Postgres server.
                   Out of all of the Postgres servers, one is elected as the primary, the rest remain as read-only replicas.
                maximum: 16
                minimum: 1
                type: integer
              managedSql:
                description: |
                  This section allows to reference SQL scripts that will be applied to the cluster live.
                properties:
                  continueOnSGScriptError:
                    description: If true, when any entry of any `SGScript` fail will
                      not prevent subsequent `SGScript` from being executed. By default
                      is `false`.
                    type: boolean
                  scripts:
                    description: |
                      A list of script references that will be executed in sequence.
                    items:
                      description: |
                        A script reference. Each version of each entry of the script referenced will be executed exactly once following the sequence defined
                         in the referenced script and skipping any script entry that have already been executed.
                      properties:
                        id:
                          description: The id is immutable and must be unique across
                            all the `SGScript` entries. It is replaced by the operator
                            and is used to identify the `SGScript` entry.
                          type: integer
                        sgScript:
                          description: A reference to an `SGScript`
                          type: string
                      type: object
                    type: array
                type: object
              metadata:
                description: Metadata information from cluster created resources.
                properties:
                  annotations:
                    description: Custom Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/)
                      to be passed to resources created and managed by StackGres.
                    properties:
                      allResources:
                        additionalProperties:
                          type: string
                        description: Annotations to attach to any resource created
                          or managed by StackGres.
                        type: object
                      clusterPods:
                        additionalProperties:
                          type: string
                        description: Annotations to attach to pods created or managed
                          by StackGres.
                        type: object
                      primaryService:
                        additionalProperties:
                          type: string
                        description: Custom Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/)
                          passed to the `-primary` service.
                        type: object
                      replicasService:
                        additionalProperties:
                          type: string
                        description: Custom Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/)
                          passed to the `-replicas` service.
                        type: object
                      services:
                        additionalProperties:
                          type: string
                        description: Annotations to attach to all services created
                          or managed by StackGres.
                        type: object
                    type: object
                  labels:
                    description: Custom Kubernetes [labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)
                      to be passed to resources created and managed by StackGres.
                    properties:
                      clusterPods:
                        additionalProperties:
                          type: string
                        description: Labels to attach to pods created or managed by
                          StackGres.
                        type: object
                    type: object
                type: object
              nonProductionOptions:
                properties:
                  disableClusterPodAntiAffinity:
                    description: |
                      It is a best practice, on non-containerized environments, when running production workloads, to run each database server on a different server (virtual or physical), i.e., not to co-locate more than one database server per host.

                      The same best practice applies to databases on containers. By default, StackGres will not allow to run more than one StackGres pod on a given Kubernetes node. Set this property to true to allow more than one StackGres pod per node.
                    type: boolean
                  disableClusterResourceRequirements:
                    description: |
                      It is a best practice, on containerized environments, when running production workloads, to enforce container's resources requirements.

                      By default, StackGres will configure resource requirements for all the containers. Set this property to true to prevent StackGres from setting container's resources requirements (except for patroni container, see `disablePatroniResourceRequirements`).
                    type: boolean
                  disablePatroniResourceRequirements:
                    description: |
                      It is a best practice, on containerized environments, when running production workloads, to enforce container's resources requirements.

                      The same best practice applies to databases on containers. By default, StackGres will configure resource requirements for patroni container. Set this property to true to prevent StackGres from setting patroni container's resources requirement.
                    type: boolean
                  enableSetClusterCpuRequests:
                    description: |
                      On containerized environments, when running production workloads, enforcing container's cpu requirements request to be equals to the limit allow to achieve the highest level of performance. Doing so, reduces the chances of leaving
                       the workload with less cpu than it requires. It also allow to set [static CPU management policy](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#static-policy) that allows to guarantee a pod the usage exclusive CPUs on the node.

                      By default, StackGres will configure cpu requirements to have the same limit and request for all the containers. Set this property to true to prevent StackGres from setting container's cpu requirements request equals to the limit (except for patroni container, see `enablePatroniCpuRequests`)
                       when `.spec.requests.containers.<container name>.cpu` `.spec.requests.initContainers.<container name>.cpu` is configured in the referenced `SGInstanceProfile`.
                    type: boolean
                  enableSetClusterMemoryRequests:
                    description: |
                      On containerized environments, when running production workloads, enforcing container's memory requirements request to be equals to the limit allow to achieve the highest level of performance. Doing so, reduces the chances of leaving
                       the workload with less memory than it requires.

                      By default, StackGres will configure memory requirements to have the same limit and request for all the containers. Set this property to true to prevent StackGres from setting container's memory requirements request equals to the limit (except for patroni container, see `enablePatroniCpuRequests`)
                       when `.spec.requests.containers.<container name>.memory` `.spec.requests.initContainers.<container name>.memory` is configured in the referenced `SGInstanceProfile`.
                    type: boolean
                  enableSetPatroniCpuRequests:
                    description: |
                      On containerized environments, when running production workloads, enforcing container's cpu requirements request to be equals to the limit allow to achieve the highest level of performance. Doing so, reduces the chances of leaving
                       the workload with less cpu than it requires. It also allow to set [static CPU management policy](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#static-policy) that allows to guarantee a pod the usage exclusive CPUs on the node.

                      By default, StackGres will configure cpu requirements to have the same limit and request for the patroni container. Set this property to true to prevent StackGres from setting patroni container's cpu requirements request equals to the limit
                       when `.spec.requests.cpu` is configured in the referenced `SGInstanceProfile`.
                    type: boolean
                  enableSetPatroniMemoryRequests:
                    description: |
                      On containerized environments, when running production workloads, enforcing container's memory requirements request to be equals to the limit allow to achieve the highest level of performance. Doing so, reduces the chances of leaving
                       the workload with less memory than it requires.

                      By default, StackGres will configure memory requirements to have the same limit and request for the patroni container. Set this property to true to prevent StackGres from setting patroni container's memory requirements request equals to the limit
                       when `.spec.requests.memory` is configured in the referenced `SGInstanceProfile`.
                    type: boolean
                  enabledFeatureGates:
                    description: |
                      A list of StackGres feature gates to enable (not suitable for a production environment).

                      Available feature gates are:
                      * `babelfish-flavor`: Allow to use `babelfish` flavor.
                    items:
                      description: The name of the fature gate to enable.
                      type: string
                    type: array
                type: object
              pods:
                description: Cluster pod's configuration.
                properties:
                  customContainers:
                    description: "A list of custom application containers that run
                      within the cluster's Pods.\n\nThe name used in this section
                      will be prefixed with the string `custom-` so that when\n referencing
                      them in the .spec.containers section of SGInstanceProfile the
                      name used\n have to be prepended with the same prefix.\n \nSee:
                      https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#container-v1-core\n"
                    items:
                      description: "A custom application container that run within
                        the cluster's Pods.\n\nThe name used in this section will
                        be prefixed with the string `custom-` so that when\n referencing
                        them in the .spec.containers section of SGInstanceProfile
                        the name used\n have to be prepended with the same prefix.\n
                        \nSee: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#container-v1-core\n"
                      properties:
                        args:
                          description: 'Arguments to the entrypoint. The docker image''s
                            CMD is used if this is not provided. Variable references
                            $(VAR_NAME) are expanded using the container''s environment.
                            If a variable cannot be resolved, the reference in the
                            input string will be unchanged. Double $$ are reduced
                            to a single $, which allows for escaping the $(VAR_NAME)
                            syntax: i.e. "$$(VAR_NAME)" will produce the string literal
                            "$(VAR_NAME)". Escaped references will never be expanded,
                            regardless of whether the variable exists or not. Cannot
                            be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
                          items:
                            type: string
                          type: array
                        command:
                          description: 'Entrypoint array. Not executed within a shell.
                            The docker image''s ENTRYPOINT is used if this is not
                            provided. Variable references $(VAR_NAME) are expanded
                            using the container''s environment. If a variable cannot
                            be resolved, the reference in the input string will be
                            unchanged. Double $$ are reduced to a single $, which
                            allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)"
                            will produce the string literal "$(VAR_NAME)". Escaped
                            references will never be expanded, regardless of whether
                            the variable exists or not. Cannot be updated. More info:
                            https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
                          items:
                            type: string
                          type: array
                        env:
                          description: List of environment variables to set in the
                            container. Cannot be updated.
                          items:
                            description: EnvVar represents an environment variable
                              present in a Container.
                            properties:
                              name:
                                description: Name of the environment variable. Must
                                  be a C_IDENTIFIER.
                                type: string
                              value:
                                description: 'Variable references $(VAR_NAME) are
                                  expanded using the previously defined environment
                                  variables in the container and any service environment
                                  variables. If a variable cannot be resolved, the
                                  reference in the input string will be unchanged.
                                  Double $$ are reduced to a single $, which allows
                                  for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)"
                                  will produce the string literal "$(VAR_NAME)". Escaped
                                  references will never be expanded, regardless of
                                  whether the variable exists or not. Defaults to
                                  "".'
                                type: string
                              valueFrom:
                                description: EnvVarSource represents a source for
                                  the value of an EnvVar.
                                properties:
                                  configMapKeyRef:
                                    description: Selects a key from a ConfigMap.
                                    properties:
                                      key:
                                        description: The key to select.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info:
                                          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                      optional:
                                        description: Specify whether the ConfigMap
                                          or its key must be defined
                                        type: boolean
                                    required:
                                    - key
                                    type: object
                                  fieldRef:
                                    description: ObjectFieldSelector selects an APIVersioned
                                      field of an object.
                                    properties:
                                      apiVersion:
                                        description: Version of the schema the FieldPath
                                          is written in terms of, defaults to "v1".
                                        type: string
                                      fieldPath:
                                        description: Path of the field to select in
                                          the specified API version.
                                        type: string
                                    required:
                                    - fieldPath
                                    type: object
                                  resourceFieldRef:
                                    description: ResourceFieldSelector represents
                                      container resources (cpu, memory) and their
                                      output format
                                    properties:
                                      containerName:
                                        description: 'Container name: required for
                                          volumes, optional for env vars'
                                        type: string
                                      divisor:
                                        description: |-
                                          Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                                          The serialization format is:

                                          <quantity>        ::= <signedNumber><suffix>
                                            (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                                          <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                                            (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                                          <decimalSI>       ::= m | "" | k | M | G | T | P | E
                                            (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                                          <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                                          No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                                          When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                                          Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                                            a. No precision is lost
                                            b. No fractional digits will be emitted
                                            c. The exponent (or suffix) is as large as possible.
                                          The sign will be omitted unless the number is negative.

                                          Examples:
                                            1.5 will be serialized as "1500m"
                                            1.5Gi will be serialized as "1536Mi"

                                          Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                                          Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                                          This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                                        type: string
                                      resource:
                                        description: 'Required: resource to select'
                                        type: string
                                    required:
                                    - resource
                                    type: object
                                  secretKeyRef:
                                    description: SecretKeySelector selects a key of
                                      a Secret.
                                    properties:
                                      key:
                                        description: The key of the secret to select
                                          from.  Must be a valid secret key.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info:
                                          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                      optional:
                                        description: Specify whether the Secret or
                                          its key must be defined
                                        type: boolean
                                    required:
                                    - key
                                    type: object
                                type: object
                            required:
                            - name
                            type: object
                          type: array
                        envFrom:
                          description: List of sources to populate environment variables
                            in the container. The keys defined within a source must
                            be a C_IDENTIFIER. All invalid keys will be reported as
                            an event when the container is starting. When a key exists
                            in multiple sources, the value associated with the last
                            source will take precedence. Values defined by an Env
                            with a duplicate key will take precedence. Cannot be updated.
                          items:
                            description: EnvFromSource represents the source of a
                              set of ConfigMaps
                            properties:
                              configMapRef:
                                description: |-
                                  ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.

                                  The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
                                properties:
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                    type: string
                                  optional:
                                    description: Specify whether the ConfigMap must
                                      be defined
                                    type: boolean
                                type: object
                              prefix:
                                description: An optional identifier to prepend to
                                  each key in the ConfigMap. Must be a C_IDENTIFIER.
                                type: string
                              secretRef:
                                description: |-
                                  SecretEnvSource selects a Secret to populate the environment variables with.

                                  The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
                                properties:
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                    type: string
                                  optional:
                                    description: Specify whether the Secret must be
                                      defined
                                    type: boolean
                                type: object
                            type: object
                          type: array
                        image:
                          description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
                            This field is optional to allow higher level config management
                            to default or override container images in workload controllers
                            like Deployments and StatefulSets.'
                          type: string
                        imagePullPolicy:
                          description: 'Image pull policy. One of Always, Never, IfNotPresent.
                            Defaults to Always if :latest tag is specified, or IfNotPresent
                            otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
                          type: string
                        lifecycle:
                          description: Lifecycle describes actions that the management
                            system should take in response to container lifecycle
                            events. For the PostStart and PreStop lifecycle handlers,
                            management of the container blocks until the action is
                            complete, unless the container process fails, in which
                            case the handler is aborted.
                          properties:
                            postStart:
                              description: Handler defines a specific action that
                                should be taken
                              properties:
                                exec:
                                  description: ExecAction describes a "run in container"
                                    action.
                                  properties:
                                    command:
                                      description: Command is the command line to
                                        execute inside the container, the working
                                        directory for the command  is root ('/') in
                                        the container's filesystem. The command is
                                        simply exec'd, it is not run inside a shell,
                                        so traditional shell instructions ('|', etc)
                                        won't work. To use a shell, you need to explicitly
                                        call out to that shell. Exit status of 0 is
                                        treated as live/healthy and non-zero is unhealthy.
                                      items:
                                        type: string
                                      type: array
                                  type: object
                                httpGet:
                                  description: HTTPGetAction describes an action based
                                    on HTTP Get requests.
                                  properties:
                                    host:
                                      description: Host name to connect to, defaults
                                        to the pod IP. You probably want to set "Host"
                                        in httpHeaders instead.
                                      type: string
                                    httpHeaders:
                                      description: Custom headers to set in the request.
                                        HTTP allows repeated headers.
                                      items:
                                        description: HTTPHeader describes a custom
                                          header to be used in HTTP probes
                                        properties:
                                          name:
                                            description: The header field name
                                            type: string
                                          value:
                                            description: The header field value
                                            type: string
                                        required:
                                        - name
                                        - value
                                        type: object
                                      type: array
                                    path:
                                      description: Path to access on the HTTP server.
                                      type: string
                                    port:
                                      description: IntOrString is a type that can
                                        hold an int32 or a string.  When used in JSON
                                        or YAML marshalling and unmarshalling, it
                                        produces or consumes the inner type.  This
                                        allows you to have, for example, a JSON field
                                        that can accept a name or number.
                                      format: int-or-string
                                      type: string
                                    scheme:
                                      description: Scheme to use for connecting to
                                        the host. Defaults to HTTP.
                                      type: string
                                  required:
                                  - port
                                  type: object
                                tcpSocket:
                                  description: TCPSocketAction describes an action
                                    based on opening a socket
                                  properties:
                                    host:
                                      description: 'Optional: Host name to connect
                                        to, defaults to the pod IP.'
                                      type: string
                                    port:
                                      description: IntOrString is a type that can
                                        hold an int32 or a string.  When used in JSON
                                        or YAML marshalling and unmarshalling, it
                                        produces or consumes the inner type.  This
                                        allows you to have, for example, a JSON field
                                        that can accept a name or number.
                                      format: int-or-string
                                      type: string
                                  required:
                                  - port
                                  type: object
                              type: object
                            preStop:
                              description: Handler defines a specific action that
                                should be taken
                              properties:
                                exec:
                                  description: ExecAction describes a "run in container"
                                    action.
                                  properties:
                                    command:
                                      description: Command is the command line to
                                        execute inside the container, the working
                                        directory for the command  is root ('/') in
                                        the container's filesystem. The command is
                                        simply exec'd, it is not run inside a shell,
                                        so traditional shell instructions ('|', etc)
                                        won't work. To use a shell, you need to explicitly
                                        call out to that shell. Exit status of 0 is
                                        treated as live/healthy and non-zero is unhealthy.
                                      items:
                                        type: string
                                      type: array
                                  type: object
                                httpGet:
                                  description: HTTPGetAction describes an action based
                                    on HTTP Get requests.
                                  properties:
                                    host:
                                      description: Host name to connect to, defaults
                                        to the pod IP. You probably want to set "Host"
                                        in httpHeaders instead.
                                      type: string
                                    httpHeaders:
                                      description: Custom headers to set in the request.
                                        HTTP allows repeated headers.
                                      items:
                                        description: HTTPHeader describes a custom
                                          header to be used in HTTP probes
                                        properties:
                                          name:
                                            description: The header field name
                                            type: string
                                          value:
                                            description: The header field value
                                            type: string
                                        required:
                                        - name
                                        - value
                                        type: object
                                      type: array
                                    path:
                                      description: Path to access on the HTTP server.
                                      type: string
                                    port:
                                      description: IntOrString is a type that can
                                        hold an int32 or a string.  When used in JSON
                                        or YAML marshalling and unmarshalling, it
                                        produces or consumes the inner type.  This
                                        allows you to have, for example, a JSON field
                                        that can accept a name or number.
                                      format: int-or-string
                                      type: string
                                    scheme:
                                      description: Scheme to use for connecting to
                                        the host. Defaults to HTTP.
                                      type: string
                                  required:
                                  - port
                                  type: object
                                tcpSocket:
                                  description: TCPSocketAction describes an action
                                    based on opening a socket
                                  properties:
                                    host:
                                      description: 'Optional: Host name to connect
                                        to, defaults to the pod IP.'
                                      type: string
                                    port:
                                      description: IntOrString is a type that can
                                        hold an int32 or a string.  When used in JSON
                                        or YAML marshalling and unmarshalling, it
                                        produces or consumes the inner type.  This
                                        allows you to have, for example, a JSON field
                                        that can accept a name or number.
                                      format: int-or-string
                                      type: string
                                  required:
                                  - port
                                  type: object
                              type: object
                          type: object
                        livenessProbe:
                          description: Probe describes a health check to be performed
                            against a container to determine whether it is alive or
                            ready to receive traffic.
                          properties:
                            exec:
                              description: ExecAction describes a "run in container"
                                action.
                              properties:
                                command:
                                  description: Command is the command line to execute
                                    inside the container, the working directory for
                                    the command  is root ('/') in the container's
                                    filesystem. The command is simply exec'd, it is
                                    not run inside a shell, so traditional shell instructions
                                    ('|', etc) won't work. To use a shell, you need
                                    to explicitly call out to that shell. Exit status
                                    of 0 is treated as live/healthy and non-zero is
                                    unhealthy.
                                  items:
                                    type: string
                                  type: array
                              type: object
                            failureThreshold:
                              description: Minimum consecutive failures for the probe
                                to be considered failed after having succeeded. Defaults
                                to 3. Minimum value is 1.
                              format: int32
                              type: integer
                            httpGet:
                              description: HTTPGetAction describes an action based
                                on HTTP Get requests.
                              properties:
                                host:
                                  description: Host name to connect to, defaults to
                                    the pod IP. You probably want to set "Host" in
                                    httpHeaders instead.
                                  type: string
                                httpHeaders:
                                  description: Custom headers to set in the request.
                                    HTTP allows repeated headers.
                                  items:
                                    description: HTTPHeader describes a custom header
                                      to be used in HTTP probes
                                    properties:
                                      name:
                                        description: The header field name
                                        type: string
                                      value:
                                        description: The header field value
                                        type: string
                                    required:
                                    - name
                                    - value
                                    type: object
                                  type: array
                                path:
                                  description: Path to access on the HTTP server.
                                  type: string
                                port:
                                  description: IntOrString is a type that can hold
                                    an int32 or a string.  When used in JSON or YAML
                                    marshalling and unmarshalling, it produces or
                                    consumes the inner type.  This allows you to have,
                                    for example, a JSON field that can accept a name
                                    or number.
                                  format: int-or-string
                                  type: string
                                scheme:
                                  description: Scheme to use for connecting to the
                                    host. Defaults to HTTP.
                                  type: string
                              required:
                              - port
                              type: object
                            initialDelaySeconds:
                              description: 'Number of seconds after the container
                                has started before liveness probes are initiated.
                                More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                              format: int32
                              type: integer
                            periodSeconds:
                              description: How often (in seconds) to perform the probe.
                                Default to 10 seconds. Minimum value is 1.
                              format: int32
                              type: integer
                            successThreshold:
                              description: Minimum consecutive successes for the probe
                                to be considered successful after having failed. Defaults
                                to 1. Must be 1 for liveness and startup. Minimum
                                value is 1.
                              format: int32
                              type: integer
                            tcpSocket:
                              description: TCPSocketAction describes an action based
                                on opening a socket
                              properties:
                                host:
                                  description: 'Optional: Host name to connect to,
                                    defaults to the pod IP.'
                                  type: string
                                port:
                                  description: IntOrString is a type that can hold
                                    an int32 or a string.  When used in JSON or YAML
                                    marshalling and unmarshalling, it produces or
                                    consumes the inner type.  This allows you to have,
                                    for example, a JSON field that can accept a name
                                    or number.
                                  format: int-or-string
                                  type: string
                              required:
                              - port
                              type: object
                            terminationGracePeriodSeconds:
                              description: Optional duration in seconds the pod needs
                                to terminate gracefully upon probe failure. The grace
                                period is the duration in seconds after the processes
                                running in the pod are sent a termination signal and
                                the time when the processes are forcibly halted with
                                a kill signal. Set this value longer than the expected
                                cleanup time for your process. If this value is nil,
                                the pod's terminationGracePeriodSeconds will be used.
                                Otherwise, this value overrides the value provided
                                by the pod spec. Value must be non-negative integer.
                                The value zero indicates stop immediately via the
                                kill signal (no opportunity to shut down). This is
                                a beta field and requires enabling ProbeTerminationGracePeriod
                                feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds
                                is used if unset.
                              format: int64
                              type: integer
                            timeoutSeconds:
                              description: 'Number of seconds after which the probe
                                times out. Defaults to 1 second. Minimum value is
                                1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                              format: int32
                              type: integer
                          type: object
                        name:
                          description: |
                            Name of the container specified as a DNS_LABEL. Each
                             container in a pod must have a unique name (DNS_LABEL). Cannot
                             be updated.

                            The name will be prefixed with the string `custom-` so that when referencing it
                             in the .spec.containers section of SGInstanceProfile the name used have to be
                             prepended with the same prefix.
                          type: string
                        ports:
                          description: List of ports to expose from the container.
                            Exposing a port here gives the system additional information
                            about the network connections a container uses, but is
                            primarily informational. Not specifying a port here DOES
                            NOT prevent that port from being exposed. Any port which
                            is listening on the default "0.0.0.0" address inside a
                            container will be accessible from the network. Cannot
                            be updated.
                          items:
                            description: ContainerPort represents a network port in
                              a single container.
                            properties:
                              containerPort:
                                description: Number of port to expose on the pod's
                                  IP address. This must be a valid port number, 0
                                  < x < 65536.
                                format: int32
                                type: integer
                              hostIP:
                                description: What host IP to bind the external port
                                  to.
                                type: string
                              hostPort:
                                description: Number of port to expose on the host.
                                  If specified, this must be a valid port number,
                                  0 < x < 65536. If HostNetwork is specified, this
                                  must match ContainerPort. Most containers do not
                                  need this.
                                format: int32
                                type: integer
                              name:
                                description: If specified, this must be an IANA_SVC_NAME
                                  and unique within the pod. Each named port in a
                                  pod must have a unique name. Name for the port that
                                  can be referred to by services.
                                type: string
                              protocol:
                                description: Protocol for port. Must be UDP, TCP,
                                  or SCTP. Defaults to "TCP".
                                type: string
                            required:
                            - containerPort
                            type: object
                          type: array
                        readinessProbe:
                          description: Probe describes a health check to be performed
                            against a container to determine whether it is alive or
                            ready to receive traffic.
                          properties:
                            exec:
                              description: ExecAction describes a "run in container"
                                action.
                              properties:
                                command:
                                  description: Command is the command line to execute
                                    inside the container, the working directory for
                                    the command  is root ('/') in the container's
                                    filesystem. The command is simply exec'd, it is
                                    not run inside a shell, so traditional shell instructions
                                    ('|', etc) won't work. To use a shell, you need
                                    to explicitly call out to that shell. Exit status
                                    of 0 is treated as live/healthy and non-zero is
                                    unhealthy.
                                  items:
                                    type: string
                                  type: array
                              type: object
                            failureThreshold:
                              description: Minimum consecutive failures for the probe
                                to be considered failed after having succeeded. Defaults
                                to 3. Minimum value is 1.
                              format: int32
                              type: integer
                            httpGet:
                              description: HTTPGetAction describes an action based
                                on HTTP Get requests.
                              properties:
                                host:
                                  description: Host name to connect to, defaults to
                                    the pod IP. You probably want to set "Host" in
                                    httpHeaders instead.
                                  type: string
                                httpHeaders:
                                  description: Custom headers to set in the request.
                                    HTTP allows repeated headers.
                                  items:
                                    description: HTTPHeader describes a custom header
                                      to be used in HTTP probes
                                    properties:
                                      name:
                                        description: The header field name
                                        type: string
                                      value:
                                        description: The header field value
                                        type: string
                                    required:
                                    - name
                                    - value
                                    type: object
                                  type: array
                                path:
                                  description: Path to access on the HTTP server.
                                  type: string
                                port:
                                  description: IntOrString is a type that can hold
                                    an int32 or a string.  When used in JSON or YAML
                                    marshalling and unmarshalling, it produces or
                                    consumes the inner type.  This allows you to have,
                                    for example, a JSON field that can accept a name
                                    or number.
                                  format: int-or-string
                                  type: string
                                scheme:
                                  description: Scheme to use for connecting to the
                                    host. Defaults to HTTP.
                                  type: string
                              required:
                              - port
                              type: object
                            initialDelaySeconds:
                              description: 'Number of seconds after the container
                                has started before liveness probes are initiated.
                                More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                              format: int32
                              type: integer
                            periodSeconds:
                              description: How often (in seconds) to perform the probe.
                                Default to 10 seconds. Minimum value is 1.
                              format: int32
                              type: integer
                            successThreshold:
                              description: Minimum consecutive successes for the probe
                                to be considered successful after having failed. Defaults
                                to 1. Must be 1 for liveness and startup. Minimum
                                value is 1.
                              format: int32
                              type: integer
                            tcpSocket:
                              description: TCPSocketAction describes an action based
                                on opening a socket
                              properties:
                                host:
                                  description: 'Optional: Host name to connect to,
                                    defaults to the pod IP.'
                                  type: string
                                port:
                                  description: IntOrString is a type that can hold
                                    an int32 or a string.  When used in JSON or YAML
                                    marshalling and unmarshalling, it produces or
                                    consumes the inner type.  This allows you to have,
                                    for example, a JSON field that can accept a name
                                    or number.
                                  format: int-or-string
                                  type: string
                              required:
                              - port
                              type: object
                            terminationGracePeriodSeconds:
                              description: Optional duration in seconds the pod needs
                                to terminate gracefully upon probe failure. The grace
                                period is the duration in seconds after the processes
                                running in the pod are sent a termination signal and
                                the time when the processes are forcibly halted with
                                a kill signal. Set this value longer than the expected
                                cleanup time for your process. If this value is nil,
                                the pod's terminationGracePeriodSeconds will be used.
                                Otherwise, this value overrides the value provided
                                by the pod spec. Value must be non-negative integer.
                                The value zero indicates stop immediately via the
                                kill signal (no opportunity to shut down). This is
                                a beta field and requires enabling ProbeTerminationGracePeriod
                                feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds
                                is used if unset.
                              format: int64
                              type: integer
                            timeoutSeconds:
                              description: 'Number of seconds after which the probe
                                times out. Defaults to 1 second. Minimum value is
                                1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                              format: int32
                              type: integer
                          type: object
                        resources:
                          description: ResourceRequirements describes the compute
                            resource requirements.
                          properties:
                            limits:
                              additionalProperties:
                                description: |-
                                  Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                                  The serialization format is:

                                  <quantity>        ::= <signedNumber><suffix>
                                    (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                                  <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                                    (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                                  <decimalSI>       ::= m | "" | k | M | G | T | P | E
                                    (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                                  <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                                  No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                                  When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                                  Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                                    a. No precision is lost
                                    b. No fractional digits will be emitted
                                    c. The exponent (or suffix) is as large as possible.
                                  The sign will be omitted unless the number is negative.

                                  Examples:
                                    1.5 will be serialized as "1500m"
                                    1.5Gi will be serialized as "1536Mi"

                                  Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                                  Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                                  This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                                type: string
                              description: 'Limits describes the maximum amount of
                                compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                            requests:
                              additionalProperties:
                                description: |-
                                  Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                                  The serialization format is:

                                  <quantity>        ::= <signedNumber><suffix>
                                    (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                                  <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                                    (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                                  <decimalSI>       ::= m | "" | k | M | G | T | P | E
                                    (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                                  <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                                  No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                                  When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                                  Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                                    a. No precision is lost
                                    b. No fractional digits will be emitted
                                    c. The exponent (or suffix) is as large as possible.
                                  The sign will be omitted unless the number is negative.

                                  Examples:
                                    1.5 will be serialized as "1500m"
                                    1.5Gi will be serialized as "1536Mi"

                                  Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                                  Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                                  This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                                type: string
                              description: 'Requests describes the minimum amount
                                of compute resources required. If Requests is omitted
                                for a container, it defaults to Limits if that is
                                explicitly specified, otherwise to an implementation-defined
                                value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                          type: object
                        securityContext:
                          description: SecurityContext holds security configuration
                            that will be applied to a container. Some fields are present
                            in both SecurityContext and PodSecurityContext.  When
                            both are set, the values in SecurityContext take precedence.
                          properties:
                            allowPrivilegeEscalation:
                              description: 'AllowPrivilegeEscalation controls whether
                                a process can gain more privileges than its parent
                                process. This bool directly controls if the no_new_privs
                                flag will be set on the container process. AllowPrivilegeEscalation
                                is true always when the container is: 1) run as Privileged
                                2) has CAP_SYS_ADMIN'
                              type: boolean
                            capabilities:
                              description: Adds and removes POSIX capabilities from
                                running containers.
                              properties:
                                add:
                                  description: Added capabilities
                                  items:
                                    type: string
                                  type: array
                                drop:
                                  description: Removed capabilities
                                  items:
                                    type: string
                                  type: array
                              type: object
                            privileged:
                              description: Run container in privileged mode. Processes
                                in privileged containers are essentially equivalent
                                to root on the host. Defaults to false.
                              type: boolean
                            procMount:
                              description: procMount denotes the type of proc mount
                                to use for the containers. The default is DefaultProcMount
                                which uses the container runtime defaults for readonly
                                paths and masked paths. This requires the ProcMountType
                                feature flag to be enabled.
                              type: string
                            readOnlyRootFilesystem:
                              description: Whether this container has a read-only
                                root filesystem. Default is false.
                              type: boolean
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be
                                set in PodSecurityContext.  If set in both SecurityContext
                                and PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as
                                a non-root user. If true, the Kubelet will validate
                                the image at runtime to ensure that it does not run
                                as UID 0 (root) and fail to start the container if
                                it does. If unset or false, no such validation will
                                be performed. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata
                                if unspecified. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: SELinuxOptions are the labels to be applied
                                to the container
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: SeccompProfile defines a pod/container's
                                seccomp profile settings. Only one profile source
                                may be set.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile
                                    defined in a file on the node should be used.
                                    The profile must be preconfigured on the node
                                    to work. Must be a descending path, relative to
                                    the kubelet's configured seccomp profile location.
                                    Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: |-
                                    type indicates which kind of seccomp profile will be applied. Valid options are:

                                    Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
                                  type: string
                              required:
                              - type
                              type: object
                            windowsOptions:
                              description: WindowsSecurityContextOptions contain Windows-specific
                                options and credentials.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA
                                    admission webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec
                                    named by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name
                                    of the GMSA credential spec to use.
                                  type: string
                                hostProcess:
                                  description: HostProcess determines if a container
                                    should be run as a 'Host Process' container. This
                                    field is alpha-level and will only be honored
                                    by components that enable the WindowsHostProcessContainers
                                    feature flag. Setting this field without the feature
                                    flag will result in errors when validating the
                                    Pod. All of a Pod's containers must have the same
                                    effective HostProcess value (it is not allowed
                                    to have a mix of HostProcess containers and non-HostProcess
                                    containers).  In addition, if HostProcess is true
                                    then HostNetwork must also be set to true.
                                  type: boolean
                                runAsUserName:
                                  description: The UserName in Windows to run the
                                    entrypoint of the container process. Defaults
                                    to the user specified in image metadata if unspecified.
                                    May also be set in PodSecurityContext. If set
                                    in both SecurityContext and PodSecurityContext,
                                    the value specified in SecurityContext takes precedence.
                                  type: string
                              type: object
                          type: object
                        startupProbe:
                          description: Probe describes a health check to be performed
                            against a container to determine whether it is alive or
                            ready to receive traffic.
                          properties:
                            exec:
                              description: ExecAction describes a "run in container"
                                action.
                              properties:
                                command:
                                  description: Command is the command line to execute
                                    inside the container, the working directory for
                                    the command  is root ('/') in the container's
                                    filesystem. The command is simply exec'd, it is
                                    not run inside a shell, so traditional shell instructions
                                    ('|', etc) won't work. To use a shell, you need
                                    to explicitly call out to that shell. Exit status
                                    of 0 is treated as live/healthy and non-zero is
                                    unhealthy.
                                  items:
                                    type: string
                                  type: array
                              type: object
                            failureThreshold:
                              description: Minimum consecutive failures for the probe
                                to be considered failed after having succeeded. Defaults
                                to 3. Minimum value is 1.
                              format: int32
                              type: integer
                            httpGet:
                              description: HTTPGetAction describes an action based
                                on HTTP Get requests.
                              properties:
                                host:
                                  description: Host name to connect to, defaults to
                                    the pod IP. You probably want to set "Host" in
                                    httpHeaders instead.
                                  type: string
                                httpHeaders:
                                  description: Custom headers to set in the request.
                                    HTTP allows repeated headers.
                                  items:
                                    description: HTTPHeader describes a custom header
                                      to be used in HTTP probes
                                    properties:
                                      name:
                                        description: The header field name
                                        type: string
                                      value:
                                        description: The header field value
                                        type: string
                                    required:
                                    - name
                                    - value
                                    type: object
                                  type: array
                                path:
                                  description: Path to access on the HTTP server.
                                  type: string
                                port:
                                  description: IntOrString is a type that can hold
                                    an int32 or a string.  When used in JSON or YAML
                                    marshalling and unmarshalling, it produces or
                                    consumes the inner type.  This allows you to have,
                                    for example, a JSON field that can accept a name
                                    or number.
                                  format: int-or-string
                                  type: string
                                scheme:
                                  description: Scheme to use for connecting to the
                                    host. Defaults to HTTP.
                                  type: string
                              required:
                              - port
                              type: object
                            initialDelaySeconds:
                              description: 'Number of seconds after the container
                                has started before liveness probes are initiated.
                                More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                              format: int32
                              type: integer
                            periodSeconds:
                              description: How often (in seconds) to perform the probe.
                                Default to 10 seconds. Minimum value is 1.
                              format: int32
                              type: integer
                            successThreshold:
                              description: Minimum consecutive successes for the probe
                                to be considered successful after having failed. Defaults
                                to 1. Must be 1 for liveness and startup. Minimum
                                value is 1.
                              format: int32
                              type: integer
                            tcpSocket:
                              description: TCPSocketAction describes an action based
                                on opening a socket
                              properties:
                                host:
                                  description: 'Optional: Host name to connect to,
                                    defaults to the pod IP.'
                                  type: string
                                port:
                                  description: IntOrString is a type that can hold
                                    an int32 or a string.  When used in JSON or YAML
                                    marshalling and unmarshalling, it produces or
                                    consumes the inner type.  This allows you to have,
                                    for example, a JSON field that can accept a name
                                    or number.
                                  format: int-or-string
                                  type: string
                              required:
                              - port
                              type: object
                            terminationGracePeriodSeconds:
                              description: Optional duration in seconds the pod needs
                                to terminate gracefully upon probe failure. The grace
                                period is the duration in seconds after the processes
                                running in the pod are sent a termination signal and
                                the time when the processes are forcibly halted with
                                a kill signal. Set this value longer than the expected
                                cleanup time for your process. If this value is nil,
                                the pod's terminationGracePeriodSeconds will be used.
                                Otherwise, this value overrides the value provided
                                by the pod spec. Value must be non-negative integer.
                                The value zero indicates stop immediately via the
                                kill signal (no opportunity to shut down). This is
                                a beta field and requires enabling ProbeTerminationGracePeriod
                                feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds
                                is used if unset.
                              format: int64
                              type: integer
                            timeoutSeconds:
                              description: 'Number of seconds after which the probe
                                times out. Defaults to 1 second. Minimum value is
                                1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                              format: int32
                              type: integer
                          type: object
                        stdin:
                          description: Whether this container should allocate a buffer
                            for stdin in the container runtime. If this is not set,
                            reads from stdin in the container will always result in
                            EOF. Default is false.
                          type: boolean
                        stdinOnce:
                          description: Whether the container runtime should close
                            the stdin channel after it has been opened by a single
                            attach. When stdin is true the stdin stream will remain
                            open across multiple attach sessions. If stdinOnce is
                            set to true, stdin is opened on container start, is empty
                            until the first client attaches to stdin, and then remains
                            open and accepts data until the client disconnects, at
                            which time stdin is closed and remains closed until the
                            container is restarted. If this flag is false, a container
                            processes that reads from stdin will never receive an
                            EOF. Default is false
                          type: boolean
                        terminationMessagePath:
                          description: 'Optional: Path at which the file to which
                            the container''s termination message will be written is
                            mounted into the container''s filesystem. Message written
                            is intended to be brief final status, such as an assertion
                            failure message. Will be truncated by the node if greater
                            than 4096 bytes. The total message length across all containers
                            will be limited to 12kb. Defaults to /dev/termination-log.
                            Cannot be updated.'
                          type: string
                        terminationMessagePolicy:
                          description: Indicate how the termination message should
                            be populated. File will use the contents of terminationMessagePath
                            to populate the container status message on both success
                            and failure. FallbackToLogsOnError will use the last chunk
                            of container log output if the termination message file
                            is empty and the container exited with an error. The log
                            output is limited to 2048 bytes or 80 lines, whichever
                            is smaller. Defaults to File. Cannot be updated.
                          type: string
                        tty:
                          description: Whether this container should allocate a TTY
                            for itself, also requires 'stdin' to be true. Default
                            is false.
                          type: boolean
                        volumeDevices:
                          description: volumeDevices is the list of block devices
                            to be used by the container.
                          items:
                            description: volumeDevice describes a mapping of a raw
                              block device within a container.
                            properties:
                              devicePath:
                                description: devicePath is the path inside of the
                                  container that the device will be mapped to.
                                type: string
                              name:
                                description: name must match the name of a persistentVolumeClaim
                                  in the pod
                                type: string
                            required:
                            - name
                            - devicePath
                            type: object
                          type: array
                        volumeMounts:
                          description: Pod volumes to mount into the container's filesystem.
                            Cannot be updated.
                          items:
                            description: VolumeMount describes a mounting of a Volume
                              within a container.
                            properties:
                              mountPath:
                                description: Path within the container at which the
                                  volume should be mounted.  Must not contain ':'.
                                type: string
                              mountPropagation:
                                description: mountPropagation determines how mounts
                                  are propagated from the host to container and the
                                  other way around. When not set, MountPropagationNone
                                  is used. This field is beta in 1.10.
                                type: string
                              name:
                                description: This must match the Name of a Volume.
                                type: string
                              readOnly:
                                description: Mounted read-only if true, read-write
                                  otherwise (false or unspecified). Defaults to false.
                                type: boolean
                              subPath:
                                description: Path within the volume from which the
                                  container's volume should be mounted. Defaults to
                                  "" (volume's root).
                                type: string
                              subPathExpr:
                                description: Expanded path within the volume from
                                  which the container's volume should be mounted.
                                  Behaves similarly to SubPath but environment variable
                                  references $(VAR_NAME) are expanded using the container's
                                  environment. Defaults to "" (volume's root). SubPathExpr
                                  and SubPath are mutually exclusive.
                                type: string
                            required:
                            - name
                            - mountPath
                            type: object
                          type: array
                        workingDir:
                          description: Container's working directory. If not specified,
                            the container runtime's default will be used, which might
                            be configured in the container image. Cannot be updated.
                          type: string
                      required:
                      - name
                      type: object
                    type: array
                  customInitContainers:
                    description: "A list of custom application init containers that
                      run within the cluster's Pods. The\n custom init containers
                      will run following the defined sequence as the end of\n cluster's
                      Pods init containers.\n\nThe name used in this section will
                      be prefixed with the string `custom-` so that when\n referencing
                      them in the .spec.containers section of SGInstanceProfile the
                      name used\n have to be prepended with the same prefix.\n \nSee:
                      https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#container-v1-core\n"
                    items:
                      description: "A custom application init container that run within
                        the cluster's Pods. The custom init\n containers will run
                        following the defined sequence as the end of cluster's Pods
                        init\n containers.\n\nThe name used in this section will be
                        prefixed with the string `custom-` so that when\n referencing
                        them in the .spec.containers section of SGInstanceProfile
                        the name used\n have to be prepended with the same prefix.\n
                        \nSee: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#container-v1-core\n"
                      properties:
                        args:
                          description: 'Arguments to the entrypoint. The docker image''s
                            CMD is used if this is not provided. Variable references
                            $(VAR_NAME) are expanded using the container''s environment.
                            If a variable cannot be resolved, the reference in the
                            input string will be unchanged. Double $$ are reduced
                            to a single $, which allows for escaping the $(VAR_NAME)
                            syntax: i.e. "$$(VAR_NAME)" will produce the string literal
                            "$(VAR_NAME)". Escaped references will never be expanded,
                            regardless of whether the variable exists or not. Cannot
                            be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
                          items:
                            type: string
                          type: array
                        command:
                          description: 'Entrypoint array. Not executed within a shell.
                            The docker image''s ENTRYPOINT is used if this is not
                            provided. Variable references $(VAR_NAME) are expanded
                            using the container''s environment. If a variable cannot
                            be resolved, the reference in the input string will be
                            unchanged. Double $$ are reduced to a single $, which
                            allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)"
                            will produce the string literal "$(VAR_NAME)". Escaped
                            references will never be expanded, regardless of whether
                            the variable exists or not. Cannot be updated. More info:
                            https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
                          items:
                            type: string
                          type: array
                        env:
                          description: List of environment variables to set in the
                            container. Cannot be updated.
                          items:
                            description: EnvVar represents an environment variable
                              present in a Container.
                            properties:
                              name:
                                description: Name of the environment variable. Must
                                  be a C_IDENTIFIER.
                                type: string
                              value:
                                description: 'Variable references $(VAR_NAME) are
                                  expanded using the previously defined environment
                                  variables in the container and any service environment
                                  variables. If a variable cannot be resolved, the
                                  reference in the input string will be unchanged.
                                  Double $$ are reduced to a single $, which allows
                                  for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)"
                                  will produce the string literal "$(VAR_NAME)". Escaped
                                  references will never be expanded, regardless of
                                  whether the variable exists or not. Defaults to
                                  "".'
                                type: string
                              valueFrom:
                                description: EnvVarSource represents a source for
                                  the value of an EnvVar.
                                properties:
                                  configMapKeyRef:
                                    description: Selects a key from a ConfigMap.
                                    properties:
                                      key:
                                        description: The key to select.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info:
                                          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                      optional:
                                        description: Specify whether the ConfigMap
                                          or its key must be defined
                                        type: boolean
                                    required:
                                    - key
                                    type: object
                                  fieldRef:
                                    description: ObjectFieldSelector selects an APIVersioned
                                      field of an object.
                                    properties:
                                      apiVersion:
                                        description: Version of the schema the FieldPath
                                          is written in terms of, defaults to "v1".
                                        type: string
                                      fieldPath:
                                        description: Path of the field to select in
                                          the specified API version.
                                        type: string
                                    required:
                                    - fieldPath
                                    type: object
                                  resourceFieldRef:
                                    description: ResourceFieldSelector represents
                                      container resources (cpu, memory) and their
                                      output format
                                    properties:
                                      containerName:
                                        description: 'Container name: required for
                                          volumes, optional for env vars'
                                        type: string
                                      divisor:
                                        description: |-
                                          Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                                          The serialization format is:

                                          <quantity>        ::= <signedNumber><suffix>
                                            (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                                          <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                                            (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                                          <decimalSI>       ::= m | "" | k | M | G | T | P | E
                                            (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                                          <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                                          No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                                          When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                                          Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                                            a. No precision is lost
                                            b. No fractional digits will be emitted
                                            c. The exponent (or suffix) is as large as possible.
                                          The sign will be omitted unless the number is negative.

                                          Examples:
                                            1.5 will be serialized as "1500m"
                                            1.5Gi will be serialized as "1536Mi"

                                          Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                                          Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                                          This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                                        type: string
                                      resource:
                                        description: 'Required: resource to select'
                                        type: string
                                    required:
                                    - resource
                                    type: object
                                  secretKeyRef:
                                    description: SecretKeySelector selects a key of
                                      a Secret.
                                    properties:
                                      key:
                                        description: The key of the secret to select
                                          from.  Must be a valid secret key.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info:
                                          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                      optional:
                                        description: Specify whether the Secret or
                                          its key must be defined
                                        type: boolean
                                    required:
                                    - key
                                    type: object
                                type: object
                            required:
                            - name
                            type: object
                          type: array
                        envFrom:
                          description: List of sources to populate environment variables
                            in the container. The keys defined within a source must
                            be a C_IDENTIFIER. All invalid keys will be reported as
                            an event when the container is starting. When a key exists
                            in multiple sources, the value associated with the last
                            source will take precedence. Values defined by an Env
                            with a duplicate key will take precedence. Cannot be updated.
                          items:
                            description: EnvFromSource represents the source of a
                              set of ConfigMaps
                            properties:
                              configMapRef:
                                description: |-
                                  ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.

                                  The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
                                properties:
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                    type: string
                                  optional:
                                    description: Specify whether the ConfigMap must
                                      be defined
                                    type: boolean
                                type: object
                              prefix:
                                description: An optional identifier to prepend to
                                  each key in the ConfigMap. Must be a C_IDENTIFIER.
                                type: string
                              secretRef:
                                description: |-
                                  SecretEnvSource selects a Secret to populate the environment variables with.

                                  The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
                                properties:
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                    type: string
                                  optional:
                                    description: Specify whether the Secret must be
                                      defined
                                    type: boolean
                                type: object
                            type: object
                          type: array
                        image:
                          description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
                            This field is optional to allow higher level config management
                            to default or override container images in workload controllers
                            like Deployments and StatefulSets.'
                          type: string
                        imagePullPolicy:
                          description: 'Image pull policy. One of Always, Never, IfNotPresent.
                            Defaults to Always if :latest tag is specified, or IfNotPresent
                            otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
                          type: string
                        lifecycle:
                          description: Lifecycle describes actions that the management
                            system should take in response to container lifecycle
                            events. For the PostStart and PreStop lifecycle handlers,
                            management of the container blocks until the action is
                            complete, unless the container process fails, in which
                            case the handler is aborted.
                          properties:
                            postStart:
                              description: Handler defines a specific action that
                                should be taken
                              properties:
                                exec:
                                  description: ExecAction describes a "run in container"
                                    action.
                                  properties:
                                    command:
                                      description: Command is the command line to
                                        execute inside the container, the working
                                        directory for the command  is root ('/') in
                                        the container's filesystem. The command is
                                        simply exec'd, it is not run inside a shell,
                                        so traditional shell instructions ('|', etc)
                                        won't work. To use a shell, you need to explicitly
                                        call out to that shell. Exit status of 0 is
                                        treated as live/healthy and non-zero is unhealthy.
                                      items:
                                        type: string
                                      type: array
                                  type: object
                                httpGet:
                                  description: HTTPGetAction describes an action based
                                    on HTTP Get requests.
                                  properties:
                                    host:
                                      description: Host name to connect to, defaults
                                        to the pod IP. You probably want to set "Host"
                                        in httpHeaders instead.
                                      type: string
                                    httpHeaders:
                                      description: Custom headers to set in the request.
                                        HTTP allows repeated headers.
                                      items:
                                        description: HTTPHeader describes a custom
                                          header to be used in HTTP probes
                                        properties:
                                          name:
                                            description: The header field name
                                            type: string
                                          value:
                                            description: The header field value
                                            type: string
                                        required:
                                        - name
                                        - value
                                        type: object
                                      type: array
                                    path:
                                      description: Path to access on the HTTP server.
                                      type: string
                                    port:
                                      description: IntOrString is a type that can
                                        hold an int32 or a string.  When used in JSON
                                        or YAML marshalling and unmarshalling, it
                                        produces or consumes the inner type.  This
                                        allows you to have, for example, a JSON field
                                        that can accept a name or number.
                                      format: int-or-string
                                      type: string
                                    scheme:
                                      description: Scheme to use for connecting to
                                        the host. Defaults to HTTP.
                                      type: string
                                  required:
                                  - port
                                  type: object
                                tcpSocket:
                                  description: TCPSocketAction describes an action
                                    based on opening a socket
                                  properties:
                                    host:
                                      description: 'Optional: Host name to connect
                                        to, defaults to the pod IP.'
                                      type: string
                                    port:
                                      description: IntOrString is a type that can
                                        hold an int32 or a string.  When used in JSON
                                        or YAML marshalling and unmarshalling, it
                                        produces or consumes the inner type.  This
                                        allows you to have, for example, a JSON field
                                        that can accept a name or number.
                                      format: int-or-string
                                      type: string
                                  required:
                                  - port
                                  type: object
                              type: object
                            preStop:
                              description: Handler defines a specific action that
                                should be taken
                              properties:
                                exec:
                                  description: ExecAction describes a "run in container"
                                    action.
                                  properties:
                                    command:
                                      description: Command is the command line to
                                        execute inside the container, the working
                                        directory for the command  is root ('/') in
                                        the container's filesystem. The command is
                                        simply exec'd, it is not run inside a shell,
                                        so traditional shell instructions ('|', etc)
                                        won't work. To use a shell, you need to explicitly
                                        call out to that shell. Exit status of 0 is
                                        treated as live/healthy and non-zero is unhealthy.
                                      items:
                                        type: string
                                      type: array
                                  type: object
                                httpGet:
                                  description: HTTPGetAction describes an action based
                                    on HTTP Get requests.
                                  properties:
                                    host:
                                      description: Host name to connect to, defaults
                                        to the pod IP. You probably want to set "Host"
                                        in httpHeaders instead.
                                      type: string
                                    httpHeaders:
                                      description: Custom headers to set in the request.
                                        HTTP allows repeated headers.
                                      items:
                                        description: HTTPHeader describes a custom
                                          header to be used in HTTP probes
                                        properties:
                                          name:
                                            description: The header field name
                                            type: string
                                          value:
                                            description: The header field value
                                            type: string
                                        required:
                                        - name
                                        - value
                                        type: object
                                      type: array
                                    path:
                                      description: Path to access on the HTTP server.
                                      type: string
                                    port:
                                      description: IntOrString is a type that can
                                        hold an int32 or a string.  When used in JSON
                                        or YAML marshalling and unmarshalling, it
                                        produces or consumes the inner type.  This
                                        allows you to have, for example, a JSON field
                                        that can accept a name or number.
                                      format: int-or-string
                                      type: string
                                    scheme:
                                      description: Scheme to use for connecting to
                                        the host. Defaults to HTTP.
                                      type: string
                                  required:
                                  - port
                                  type: object
                                tcpSocket:
                                  description: TCPSocketAction describes an action
                                    based on opening a socket
                                  properties:
                                    host:
                                      description: 'Optional: Host name to connect
                                        to, defaults to the pod IP.'
                                      type: string
                                    port:
                                      description: IntOrString is a type that can
                                        hold an int32 or a string.  When used in JSON
                                        or YAML marshalling and unmarshalling, it
                                        produces or consumes the inner type.  This
                                        allows you to have, for example, a JSON field
                                        that can accept a name or number.
                                      format: int-or-string
                                      type: string
                                  required:
                                  - port
                                  type: object
                              type: object
                          type: object
                        livenessProbe:
                          description: Probe describes a health check to be performed
                            against a container to determine whether it is alive or
                            ready to receive traffic.
                          properties:
                            exec:
                              description: ExecAction describes a "run in container"
                                action.
                              properties:
                                command:
                                  description: Command is the command line to execute
                                    inside the container, the working directory for
                                    the command  is root ('/') in the container's
                                    filesystem. The command is simply exec'd, it is
                                    not run inside a shell, so traditional shell instructions
                                    ('|', etc) won't work. To use a shell, you need
                                    to explicitly call out to that shell. Exit status
                                    of 0 is treated as live/healthy and non-zero is
                                    unhealthy.
                                  items:
                                    type: string
                                  type: array
                              type: object
                            failureThreshold:
                              description: Minimum consecutive failures for the probe
                                to be considered failed after having succeeded. Defaults
                                to 3. Minimum value is 1.
                              format: int32
                              type: integer
                            httpGet:
                              description: HTTPGetAction describes an action based
                                on HTTP Get requests.
                              properties:
                                host:
                                  description: Host name to connect to, defaults to
                                    the pod IP. You probably want to set "Host" in
                                    httpHeaders instead.
                                  type: string
                                httpHeaders:
                                  description: Custom headers to set in the request.
                                    HTTP allows repeated headers.
                                  items:
                                    description: HTTPHeader describes a custom header
                                      to be used in HTTP probes
                                    properties:
                                      name:
                                        description: The header field name
                                        type: string
                                      value:
                                        description: The header field value
                                        type: string
                                    required:
                                    - name
                                    - value
                                    type: object
                                  type: array
                                path:
                                  description: Path to access on the HTTP server.
                                  type: string
                                port:
                                  description: IntOrString is a type that can hold
                                    an int32 or a string.  When used in JSON or YAML
                                    marshalling and unmarshalling, it produces or
                                    consumes the inner type.  This allows you to have,
                                    for example, a JSON field that can accept a name
                                    or number.
                                  format: int-or-string
                                  type: string
                                scheme:
                                  description: Scheme to use for connecting to the
                                    host. Defaults to HTTP.
                                  type: string
                              required:
                              - port
                              type: object
                            initialDelaySeconds:
                              description: 'Number of seconds after the container
                                has started before liveness probes are initiated.
                                More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                              format: int32
                              type: integer
                            periodSeconds:
                              description: How often (in seconds) to perform the probe.
                                Default to 10 seconds. Minimum value is 1.
                              format: int32
                              type: integer
                            successThreshold:
                              description: Minimum consecutive successes for the probe
                                to be considered successful after having failed. Defaults
                                to 1. Must be 1 for liveness and startup. Minimum
                                value is 1.
                              format: int32
                              type: integer
                            tcpSocket:
                              description: TCPSocketAction describes an action based
                                on opening a socket
                              properties:
                                host:
                                  description: 'Optional: Host name to connect to,
                                    defaults to the pod IP.'
                                  type: string
                                port:
                                  description: IntOrString is a type that can hold
                                    an int32 or a string.  When used in JSON or YAML
                                    marshalling and unmarshalling, it produces or
                                    consumes the inner type.  This allows you to have,
                                    for example, a JSON field that can accept a name
                                    or number.
                                  format: int-or-string
                                  type: string
                              required:
                              - port
                              type: object
                            terminationGracePeriodSeconds:
                              description: Optional duration in seconds the pod needs
                                to terminate gracefully upon probe failure. The grace
                                period is the duration in seconds after the processes
                                running in the pod are sent a termination signal and
                                the time when the processes are forcibly halted with
                                a kill signal. Set this value longer than the expected
                                cleanup time for your process. If this value is nil,
                                the pod's terminationGracePeriodSeconds will be used.
                                Otherwise, this value overrides the value provided
                                by the pod spec. Value must be non-negative integer.
                                The value zero indicates stop immediately via the
                                kill signal (no opportunity to shut down). This is
                                a beta field and requires enabling ProbeTerminationGracePeriod
                                feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds
                                is used if unset.
                              format: int64
                              type: integer
                            timeoutSeconds:
                              description: 'Number of seconds after which the probe
                                times out. Defaults to 1 second. Minimum value is
                                1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                              format: int32
                              type: integer
                          type: object
                        name:
                          description: |
                            Name of the container specified as a DNS_LABEL. Each
                             container in a pod must have a unique name (DNS_LABEL). Cannot
                             be updated.

                            The name will be prefixed with the string `custom-` so that when referencing it
                             in the .spec.containers section of SGInstanceProfile the name used have to be
                             prepended with the same prefix.
                          type: string
                        ports:
                          description: List of ports to expose from the container.
                            Exposing a port here gives the system additional information
                            about the network connections a container uses, but is
                            primarily informational. Not specifying a port here DOES
                            NOT prevent that port from being exposed. Any port which
                            is listening on the default "0.0.0.0" address inside a
                            container will be accessible from the network. Cannot
                            be updated.
                          items:
                            description: ContainerPort represents a network port in
                              a single container.
                            properties:
                              containerPort:
                                description: Number of port to expose on the pod's
                                  IP address. This must be a valid port number, 0
                                  < x < 65536.
                                format: int32
                                type: integer
                              hostIP:
                                description: What host IP to bind the external port
                                  to.
                                type: string
                              hostPort:
                                description: Number of port to expose on the host.
                                  If specified, this must be a valid port number,
                                  0 < x < 65536. If HostNetwork is specified, this
                                  must match ContainerPort. Most containers do not
                                  need this.
                                format: int32
                                type: integer
                              name:
                                description: If specified, this must be an IANA_SVC_NAME
                                  and unique within the pod. Each named port in a
                                  pod must have a unique name. Name for the port that
                                  can be referred to by services.
                                type: string
                              protocol:
                                description: Protocol for port. Must be UDP, TCP,
                                  or SCTP. Defaults to "TCP".
                                type: string
                            required:
                            - containerPort
                            type: object
                          type: array
                        readinessProbe:
                          description: Probe describes a health check to be performed
                            against a container to determine whether it is alive or
                            ready to receive traffic.
                          properties:
                            exec:
                              description: ExecAction describes a "run in container"
                                action.
                              properties:
                                command:
                                  description: Command is the command line to execute
                                    inside the container, the working directory for
                                    the command  is root ('/') in the container's
                                    filesystem. The command is simply exec'd, it is
                                    not run inside a shell, so traditional shell instructions
                                    ('|', etc) won't work. To use a shell, you need
                                    to explicitly call out to that shell. Exit status
                                    of 0 is treated as live/healthy and non-zero is
                                    unhealthy.
                                  items:
                                    type: string
                                  type: array
                              type: object
                            failureThreshold:
                              description: Minimum consecutive failures for the probe
                                to be considered failed after having succeeded. Defaults
                                to 3. Minimum value is 1.
                              format: int32
                              type: integer
                            httpGet:
                              description: HTTPGetAction describes an action based
                                on HTTP Get requests.
                              properties:
                                host:
                                  description: Host name to connect to, defaults to
                                    the pod IP. You probably want to set "Host" in
                                    httpHeaders instead.
                                  type: string
                                httpHeaders:
                                  description: Custom headers to set in the request.
                                    HTTP allows repeated headers.
                                  items:
                                    description: HTTPHeader describes a custom header
                                      to be used in HTTP probes
                                    properties:
                                      name:
                                        description: The header field name
                                        type: string
                                      value:
                                        description: The header field value
                                        type: string
                                    required:
                                    - name
                                    - value
                                    type: object
                                  type: array
                                path:
                                  description: Path to access on the HTTP server.
                                  type: string
                                port:
                                  description: IntOrString is a type that can hold
                                    an int32 or a string.  When used in JSON or YAML
                                    marshalling and unmarshalling, it produces or
                                    consumes the inner type.  This allows you to have,
                                    for example, a JSON field that can accept a name
                                    or number.
                                  format: int-or-string
                                  type: string
                                scheme:
                                  description: Scheme to use for connecting to the
                                    host. Defaults to HTTP.
                                  type: string
                              required:
                              - port
                              type: object
                            initialDelaySeconds:
                              description: 'Number of seconds after the container
                                has started before liveness probes are initiated.
                                More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                              format: int32
                              type: integer
                            periodSeconds:
                              description: How often (in seconds) to perform the probe.
                                Default to 10 seconds. Minimum value is 1.
                              format: int32
                              type: integer
                            successThreshold:
                              description: Minimum consecutive successes for the probe
                                to be considered successful after having failed. Defaults
                                to 1. Must be 1 for liveness and startup. Minimum
                                value is 1.
                              format: int32
                              type: integer
                            tcpSocket:
                              description: TCPSocketAction describes an action based
                                on opening a socket
                              properties:
                                host:
                                  description: 'Optional: Host name to connect to,
                                    defaults to the pod IP.'
                                  type: string
                                port:
                                  description: IntOrString is a type that can hold
                                    an int32 or a string.  When used in JSON or YAML
                                    marshalling and unmarshalling, it produces or
                                    consumes the inner type.  This allows you to have,
                                    for example, a JSON field that can accept a name
                                    or number.
                                  format: int-or-string
                                  type: string
                              required:
                              - port
                              type: object
                            terminationGracePeriodSeconds:
                              description: Optional duration in seconds the pod needs
                                to terminate gracefully upon probe failure. The grace
                                period is the duration in seconds after the processes
                                running in the pod are sent a termination signal and
                                the time when the processes are forcibly halted with
                                a kill signal. Set this value longer than the expected
                                cleanup time for your process. If this value is nil,
                                the pod's terminationGracePeriodSeconds will be used.
                                Otherwise, this value overrides the value provided
                                by the pod spec. Value must be non-negative integer.
                                The value zero indicates stop immediately via the
                                kill signal (no opportunity to shut down). This is
                                a beta field and requires enabling ProbeTerminationGracePeriod
                                feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds
                                is used if unset.
                              format: int64
                              type: integer
                            timeoutSeconds:
                              description: 'Number of seconds after which the probe
                                times out. Defaults to 1 second. Minimum value is
                                1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                              format: int32
                              type: integer
                          type: object
                        resources:
                          description: ResourceRequirements describes the compute
                            resource requirements.
                          properties:
                            limits:
                              additionalProperties:
                                description: |-
                                  Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                                  The serialization format is:

                                  <quantity>        ::= <signedNumber><suffix>
                                    (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                                  <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                                    (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                                  <decimalSI>       ::= m | "" | k | M | G | T | P | E
                                    (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                                  <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                                  No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                                  When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                                  Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                                    a. No precision is lost
                                    b. No fractional digits will be emitted
                                    c. The exponent (or suffix) is as large as possible.
                                  The sign will be omitted unless the number is negative.

                                  Examples:
                                    1.5 will be serialized as "1500m"
                                    1.5Gi will be serialized as "1536Mi"

                                  Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                                  Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                                  This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                                type: string
                              description: 'Limits describes the maximum amount of
                                compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                            requests:
                              additionalProperties:
                                description: |-
                                  Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                                  The serialization format is:

                                  <quantity>        ::= <signedNumber><suffix>
                                    (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                                  <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                                    (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                                  <decimalSI>       ::= m | "" | k | M | G | T | P | E
                                    (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                                  <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                                  No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                                  When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                                  Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                                    a. No precision is lost
                                    b. No fractional digits will be emitted
                                    c. The exponent (or suffix) is as large as possible.
                                  The sign will be omitted unless the number is negative.

                                  Examples:
                                    1.5 will be serialized as "1500m"
                                    1.5Gi will be serialized as "1536Mi"

                                  Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                                  Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                                  This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                                type: string
                              description: 'Requests describes the minimum amount
                                of compute resources required. If Requests is omitted
                                for a container, it defaults to Limits if that is
                                explicitly specified, otherwise to an implementation-defined
                                value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                          type: object
                        securityContext:
                          description: SecurityContext holds security configuration
                            that will be applied to a container. Some fields are present
                            in both SecurityContext and PodSecurityContext.  When
                            both are set, the values in SecurityContext take precedence.
                          properties:
                            allowPrivilegeEscalation:
                              description: 'AllowPrivilegeEscalation controls whether
                                a process can gain more privileges than its parent
                                process. This bool directly controls if the no_new_privs
                                flag will be set on the container process. AllowPrivilegeEscalation
                                is true always when the container is: 1) run as Privileged
                                2) has CAP_SYS_ADMIN'
                              type: boolean
                            capabilities:
                              description: Adds and removes POSIX capabilities from
                                running containers.
                              properties:
                                add:
                                  description: Added capabilities
                                  items:
                                    type: string
                                  type: array
                                drop:
                                  description: Removed capabilities
                                  items:
                                    type: string
                                  type: array
                              type: object
                            privileged:
                              description: Run container in privileged mode. Processes
                                in privileged containers are essentially equivalent
                                to root on the host. Defaults to false.
                              type: boolean
                            procMount:
                              description: procMount denotes the type of proc mount
                                to use for the containers. The default is DefaultProcMount
                                which uses the container runtime defaults for readonly
                                paths and masked paths. This requires the ProcMountType
                                feature flag to be enabled.
                              type: string
                            readOnlyRootFilesystem:
                              description: Whether this container has a read-only
                                root filesystem. Default is false.
                              type: boolean
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be
                                set in PodSecurityContext.  If set in both SecurityContext
                                and PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as
                                a non-root user. If true, the Kubelet will validate
                                the image at runtime to ensure that it does not run
                                as UID 0 (root) and fail to start the container if
                                it does. If unset or false, no such validation will
                                be performed. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata
                                if unspecified. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: SELinuxOptions are the labels to be applied
                                to the container
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: SeccompProfile defines a pod/container's
                                seccomp profile settings. Only one profile source
                                may be set.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile
                                    defined in a file on the node should be used.
                                    The profile must be preconfigured on the node
                                    to work. Must be a descending path, relative to
                                    the kubelet's configured seccomp profile location.
                                    Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: |-
                                    type indicates which kind of seccomp profile will be applied. Valid options are:

                                    Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
                                  type: string
                              required:
                              - type
                              type: object
                            windowsOptions:
                              description: WindowsSecurityContextOptions contain Windows-specific
                                options and credentials.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA
                                    admission webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec
                                    named by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name
                                    of the GMSA credential spec to use.
                                  type: string
                                hostProcess:
                                  description: HostProcess determines if a container
                                    should be run as a 'Host Process' container. This
                                    field is alpha-level and will only be honored
                                    by components that enable the WindowsHostProcessContainers
                                    feature flag. Setting this field without the feature
                                    flag will result in errors when validating the
                                    Pod. All of a Pod's containers must have the same
                                    effective HostProcess value (it is not allowed
                                    to have a mix of HostProcess containers and non-HostProcess
                                    containers).  In addition, if HostProcess is true
                                    then HostNetwork must also be set to true.
                                  type: boolean
                                runAsUserName:
                                  description: The UserName in Windows to run the
                                    entrypoint of the container process. Defaults
                                    to the user specified in image metadata if unspecified.
                                    May also be set in PodSecurityContext. If set
                                    in both SecurityContext and PodSecurityContext,
                                    the value specified in SecurityContext takes precedence.
                                  type: string
                              type: object
                          type: object
                        startupProbe:
                          description: Probe describes a health check to be performed
                            against a container to determine whether it is alive or
                            ready to receive traffic.
                          properties:
                            exec:
                              description: ExecAction describes a "run in container"
                                action.
                              properties:
                                command:
                                  description: Command is the command line to execute
                                    inside the container, the working directory for
                                    the command  is root ('/') in the container's
                                    filesystem. The command is simply exec'd, it is
                                    not run inside a shell, so traditional shell instructions
                                    ('|', etc) won't work. To use a shell, you need
                                    to explicitly call out to that shell. Exit status
                                    of 0 is treated as live/healthy and non-zero is
                                    unhealthy.
                                  items:
                                    type: string
                                  type: array
                              type: object
                            failureThreshold:
                              description: Minimum consecutive failures for the probe
                                to be considered failed after having succeeded. Defaults
                                to 3. Minimum value is 1.
                              format: int32
                              type: integer
                            httpGet:
                              description: HTTPGetAction describes an action based
                                on HTTP Get requests.
                              properties:
                                host:
                                  description: Host name to connect to, defaults to
                                    the pod IP. You probably want to set "Host" in
                                    httpHeaders instead.
                                  type: string
                                httpHeaders:
                                  description: Custom headers to set in the request.
                                    HTTP allows repeated headers.
                                  items:
                                    description: HTTPHeader describes a custom header
                                      to be used in HTTP probes
                                    properties:
                                      name:
                                        description: The header field name
                                        type: string
                                      value:
                                        description: The header field value
                                        type: string
                                    required:
                                    - name
                                    - value
                                    type: object
                                  type: array
                                path:
                                  description: Path to access on the HTTP server.
                                  type: string
                                port:
                                  description: IntOrString is a type that can hold
                                    an int32 or a string.  When used in JSON or YAML
                                    marshalling and unmarshalling, it produces or
                                    consumes the inner type.  This allows you to have,
                                    for example, a JSON field that can accept a name
                                    or number.
                                  format: int-or-string
                                  type: string
                                scheme:
                                  description: Scheme to use for connecting to the
                                    host. Defaults to HTTP.
                                  type: string
                              required:
                              - port
                              type: object
                            initialDelaySeconds:
                              description: 'Number of seconds after the container
                                has started before liveness probes are initiated.
                                More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                              format: int32
                              type: integer
                            periodSeconds:
                              description: How often (in seconds) to perform the probe.
                                Default to 10 seconds. Minimum value is 1.
                              format: int32
                              type: integer
                            successThreshold:
                              description: Minimum consecutive successes for the probe
                                to be considered successful after having failed. Defaults
                                to 1. Must be 1 for liveness and startup. Minimum
                                value is 1.
                              format: int32
                              type: integer
                            tcpSocket:
                              description: TCPSocketAction describes an action based
                                on opening a socket
                              properties:
                                host:
                                  description: 'Optional: Host name to connect to,
                                    defaults to the pod IP.'
                                  type: string
                                port:
                                  description: IntOrString is a type that can hold
                                    an int32 or a string.  When used in JSON or YAML
                                    marshalling and unmarshalling, it produces or
                                    consumes the inner type.  This allows you to have,
                                    for example, a JSON field that can accept a name
                                    or number.
                                  format: int-or-string
                                  type: string
                              required:
                              - port
                              type: object
                            terminationGracePeriodSeconds:
                              description: Optional duration in seconds the pod needs
                                to terminate gracefully upon probe failure. The grace
                                period is the duration in seconds after the processes
                                running in the pod are sent a termination signal and
                                the time when the processes are forcibly halted with
                                a kill signal. Set this value longer than the expected
                                cleanup time for your process. If this value is nil,
                                the pod's terminationGracePeriodSeconds will be used.
                                Otherwise, this value overrides the value provided
                                by the pod spec. Value must be non-negative integer.
                                The value zero indicates stop immediately via the
                                kill signal (no opportunity to shut down). This is
                                a beta field and requires enabling ProbeTerminationGracePeriod
                                feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds
                                is used if unset.
                              format: int64
                              type: integer
                            timeoutSeconds:
                              description: 'Number of seconds after which the probe
                                times out. Defaults to 1 second. Minimum value is
                                1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                              format: int32
                              type: integer
                          type: object
                        stdin:
                          description: Whether this container should allocate a buffer
                            for stdin in the container runtime. If this is not set,
                            reads from stdin in the container will always result in
                            EOF. Default is false.
                          type: boolean
                        stdinOnce:
                          description: Whether the container runtime should close
                            the stdin channel after it has been opened by a single
                            attach. When stdin is true the stdin stream will remain
                            open across multiple attach sessions. If stdinOnce is
                            set to true, stdin is opened on container start, is empty
                            until the first client attaches to stdin, and then remains
                            open and accepts data until the client disconnects, at
                            which time stdin is closed and remains closed until the
                            container is restarted. If this flag is false, a container
                            processes that reads from stdin will never receive an
                            EOF. Default is false
                          type: boolean
                        terminationMessagePath:
                          description: 'Optional: Path at which the file to which
                            the container''s termination message will be written is
                            mounted into the container''s filesystem. Message written
                            is intended to be brief final status, such as an assertion
                            failure message. Will be truncated by the node if greater
                            than 4096 bytes. The total message length across all containers
                            will be limited to 12kb. Defaults to /dev/termination-log.
                            Cannot be updated.'
                          type: string
                        terminationMessagePolicy:
                          description: Indicate how the termination message should
                            be populated. File will use the contents of terminationMessagePath
                            to populate the container status message on both success
                            and failure. FallbackToLogsOnError will use the last chunk
                            of container log output if the termination message file
                            is empty and the container exited with an error. The log
                            output is limited to 2048 bytes or 80 lines, whichever
                            is smaller. Defaults to File. Cannot be updated.
                          type: string
                        tty:
                          description: Whether this container should allocate a TTY
                            for itself, also requires 'stdin' to be true. Default
                            is false.
                          type: boolean
                        volumeDevices:
                          description: volumeDevices is the list of block devices
                            to be used by the container.
                          items:
                            description: volumeDevice describes a mapping of a raw
                              block device within a container.
                            properties:
                              devicePath:
                                description: devicePath is the path inside of the
                                  container that the device will be mapped to.
                                type: string
                              name:
                                description: name must match the name of a persistentVolumeClaim
                                  in the pod
                                type: string
                            required:
                            - name
                            - devicePath
                            type: object
                          type: array
                        volumeMounts:
                          description: Pod volumes to mount into the container's filesystem.
                            Cannot be updated.
                          items:
                            description: VolumeMount describes a mounting of a Volume
                              within a container.
                            properties:
                              mountPath:
                                description: Path within the container at which the
                                  volume should be mounted.  Must not contain ':'.
                                type: string
                              mountPropagation:
                                description: mountPropagation determines how mounts
                                  are propagated from the host to container and the
                                  other way around. When not set, MountPropagationNone
                                  is used. This field is beta in 1.10.
                                type: string
                              name:
                                description: This must match the Name of a Volume.
                                type: string
                              readOnly:
                                description: Mounted read-only if true, read-write
                                  otherwise (false or unspecified). Defaults to false.
                                type: boolean
                              subPath:
                                description: Path within the volume from which the
                                  container's volume should be mounted. Defaults to
                                  "" (volume's root).
                                type: string
                              subPathExpr:
                                description: Expanded path within the volume from
                                  which the container's volume should be mounted.
                                  Behaves similarly to SubPath but environment variable
                                  references $(VAR_NAME) are expanded using the container's
                                  environment. Defaults to "" (volume's root). SubPathExpr
                                  and SubPath are mutually exclusive.
                                type: string
                            required:
                            - name
                            - mountPath
                            type: object
                          type: array
                        workingDir:
                          description: Container's working directory. If not specified,
                            the container runtime's default will be used, which might
                            be configured in the container image. Cannot be updated.
                          type: string
                      required:
                      - name
                      type: object
                    type: array
                  customVolumes:
                    description: "A list of custom volumes that may be used along
                      with any container defined in\n customInitContainers or customContainers
                      sections.\n\nThe name used in this section will be prefixed
                      with the string `custom-` so that when\n referencing them in
                      the customInitContainers or customContainers sections the name
                      used\n have to be prepended with the same prefix.\n\nOnly the
                      following volume types are allowed: configMap, downwardAPI,
                      emptyDir,\n gitRepo, glusterfs, hostPath, nfs, projected and
                      secret\n \nSee: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#volume-v1-core\n"
                    items:
                      description: "A custom volume that may be used along with any
                        container defined in\n customInitContainers or customContainers
                        sections.\n\nThe name used in this section will be prefixed
                        with the string `custom-` so that when\n referencing them
                        in the customInitContainers or customContainers sections the
                        name used\n have to be prepended with the same prefix.\n\nOnly
                        the following volume types are allowed: configMap, downwardAPI,
                        emptyDir,\n gitRepo, glusterfs, hostPath, nfs, projected and
                        secret\n \nSee: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#volume-v1-core\n"
                      properties:
                        configMap:
                          description: |-
                            Adapts a ConfigMap into a volume.

                            The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
                          properties:
                            defaultMode:
                              description: 'Optional: mode bits used to set permissions
                                on created files by default. Must be an octal value
                                between 0000 and 0777 or a decimal value between 0
                                and 511. YAML accepts both octal and decimal values,
                                JSON requires decimal values for mode bits. Defaults
                                to 0644. Directories within the path are not affected
                                by this setting. This might be in conflict with other
                                options that affect the file mode, like fsGroup, and
                                the result can be other mode bits set.'
                              format: int32
                              type: integer
                            items:
                              description: If unspecified, each key-value pair in
                                the Data field of the referenced ConfigMap will be
                                projected into the volume as a file whose name is
                                the key and content is the value. If specified, the
                                listed keys will be projected into the specified paths,
                                and unlisted keys will not be present. If a key is
                                specified which is not present in the ConfigMap, the
                                volume setup will error unless it is marked optional.
                                Paths must be relative and may not contain the '..'
                                path or start with '..'.
                              items:
                                description: Maps a string key to a path within a
                                  volume.
                                properties:
                                  key:
                                    description: The key to project.
                                    type: string
                                  mode:
                                    description: 'Optional: mode bits used to set
                                      permissions on this file. Must be an octal value
                                      between 0000 and 0777 or a decimal value between
                                      0 and 511. YAML accepts both octal and decimal
                                      values, JSON requires decimal values for mode
                                      bits. If not specified, the volume defaultMode
                                      will be used. This might be in conflict with
                                      other options that affect the file mode, like
                                      fsGroup, and the result can be other mode bits
                                      set.'
                                    format: int32
                                    type: integer
                                  path:
                                    description: The relative path of the file to
                                      map the key to. May not be an absolute path.
                                      May not contain the path element '..'. May not
                                      start with the string '..'.
                                    type: string
                                required:
                                - key
                                - path
                                type: object
                              type: array
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            optional:
                              description: Specify whether the ConfigMap or its keys
                                must be defined
                              type: boolean
                          type: object
                        downwardAPI:
                          description: DownwardAPIVolumeSource represents a volume
                            containing downward API info. Downward API volumes support
                            ownership management and SELinux relabeling.
                          properties:
                            defaultMode:
                              description: 'Optional: mode bits to use on created
                                files by default. Must be a Optional: mode bits used
                                to set permissions on created files by default. Must
                                be an octal value between 0000 and 0777 or a decimal
                                value between 0 and 511. YAML accepts both octal and
                                decimal values, JSON requires decimal values for mode
                                bits. Defaults to 0644. Directories within the path
                                are not affected by this setting. This might be in
                                conflict with other options that affect the file mode,
                                like fsGroup, and the result can be other mode bits
                                set.'
                              format: int32
                              type: integer
                            items:
                              description: Items is a list of downward API volume
                                file
                              items:
                                description: DownwardAPIVolumeFile represents information
                                  to create the file containing the pod field
                                properties:
                                  fieldRef:
                                    description: ObjectFieldSelector selects an APIVersioned
                                      field of an object.
                                    properties:
                                      apiVersion:
                                        description: Version of the schema the FieldPath
                                          is written in terms of, defaults to "v1".
                                        type: string
                                      fieldPath:
                                        description: Path of the field to select in
                                          the specified API version.
                                        type: string
                                    required:
                                    - fieldPath
                                    type: object
                                  mode:
                                    description: 'Optional: mode bits used to set
                                      permissions on this file, must be an octal value
                                      between 0000 and 0777 or a decimal value between
                                      0 and 511. YAML accepts both octal and decimal
                                      values, JSON requires decimal values for mode
                                      bits. If not specified, the volume defaultMode
                                      will be used. This might be in conflict with
                                      other options that affect the file mode, like
                                      fsGroup, and the result can be other mode bits
                                      set.'
                                    format: int32
                                    type: integer
                                  path:
                                    description: 'Required: Path is  the relative
                                      path name of the file to be created. Must not
                                      be absolute or contain the ''..'' path. Must
                                      be utf-8 encoded. The first item of the relative
                                      path must not start with ''..'''
                                    type: string
                                  resourceFieldRef:
                                    description: ResourceFieldSelector represents
                                      container resources (cpu, memory) and their
                                      output format
                                    properties:
                                      containerName:
                                        description: 'Container name: required for
                                          volumes, optional for env vars'
                                        type: string
                                      divisor:
                                        description: |-
                                          Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                                          The serialization format is:

                                          <quantity>        ::= <signedNumber><suffix>
                                            (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                                          <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                                            (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                                          <decimalSI>       ::= m | "" | k | M | G | T | P | E
                                            (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                                          <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                                          No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                                          When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                                          Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                                            a. No precision is lost
                                            b. No fractional digits will be emitted
                                            c. The exponent (or suffix) is as large as possible.
                                          The sign will be omitted unless the number is negative.

                                          Examples:
                                            1.5 will be serialized as "1500m"
                                            1.5Gi will be serialized as "1536Mi"

                                          Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                                          Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                                          This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                                        type: string
                                      resource:
                                        description: 'Required: resource to select'
                                        type: string
                                    required:
                                    - resource
                                    type: object
                                required:
                                - path
                                type: object
                              type: array
                          type: object
                        emptyDir:
                          description: Represents an empty directory for a pod. Empty
                            directory volumes support ownership management and SELinux
                            relabeling.
                          properties:
                            medium:
                              description: 'What type of storage medium should back
                                this directory. The default is "" which means to use
                                the node''s default medium. Must be an empty string
                                (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
                              type: string
                            sizeLimit:
                              description: |-
                                Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                                The serialization format is:

                                <quantity>        ::= <signedNumber><suffix>
                                  (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                                <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                                  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                                <decimalSI>       ::= m | "" | k | M | G | T | P | E
                                  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                                <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                                No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                                When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                                Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                                  a. No precision is lost
                                  b. No fractional digits will be emitted
                                  c. The exponent (or suffix) is as large as possible.
                                The sign will be omitted unless the number is negative.

                                Examples:
                                  1.5 will be serialized as "1500m"
                                  1.5Gi will be serialized as "1536Mi"

                                Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                                Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                                This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                              type: string
                          type: object
                        gitRepo:
                          description: |-
                            Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.

                            DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
                          properties:
                            directory:
                              description: Target directory name. Must not contain
                                or start with '..'.  If '.' is supplied, the volume
                                directory will be the git repository.  Otherwise,
                                if specified, the volume will contain the git repository
                                in the subdirectory with the given name.
                              type: string
                            repository:
                              description: Repository URL
                              type: string
                            revision:
                              description: Commit hash for the specified revision.
                              type: string
                          required:
                          - repository
                          type: object
                        glusterfs:
                          description: Represents a Glusterfs mount that lasts the
                            lifetime of a pod. Glusterfs volumes do not support ownership
                            management or SELinux relabeling.
                          properties:
                            endpoints:
                              description: 'EndpointsName is the endpoint name that
                                details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                              type: string
                            path:
                              description: 'Path is the Glusterfs volume path. More
                                info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                              type: string
                            readOnly:
                              description: 'ReadOnly here will force the Glusterfs
                                volume to be mounted with read-only permissions. Defaults
                                to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                              type: boolean
                          required:
                          - endpoints
                          - path
                          type: object
                        hostPath:
                          description: Represents a host path mapped into a pod. Host
                            path volumes do not support ownership management or SELinux
                            relabeling.
                          properties:
                            path:
                              description: 'Path of the directory on the host. If
                                the path is a symlink, it will follow the link to
                                the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
                              type: string
                            type:
                              description: 'Type for HostPath Volume Defaults to ""
                                More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
                              type: string
                          required:
                          - path
                          type: object
                        name:
                          description: |
                            Volumes name. Must be a DNS_LABEL and unique within the pod.
                             More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names

                            The name will be prefixed with the string `custom-` so that when referencing them in the
                             customInitContainers or customContainers sections the name used have to be prepended with
                             the same prefix.
                          type: string
                        nfs:
                          description: Represents an NFS mount that lasts the lifetime
                            of a pod. NFS volumes do not support ownership management
                            or SELinux relabeling.
                          properties:
                            path:
                              description: 'Path that is exported by the NFS server.
                                More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                              type: string
                            readOnly:
                              description: 'ReadOnly here will force the NFS export
                                to be mounted with read-only permissions. Defaults
                                to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                              type: boolean
                            server:
                              description: 'Server is the hostname or IP address of
                                the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                              type: string
                          required:
                          - server
                          - path
                          type: object
                        projected:
                          description: Represents a projected volume source
                          properties:
                            defaultMode:
                              description: Mode bits used to set permissions on created
                                files by default. Must be an octal value between 0000
                                and 0777 or a decimal value between 0 and 511. YAML
                                accepts both octal and decimal values, JSON requires
                                decimal values for mode bits. Directories within the
                                path are not affected by this setting. This might
                                be in conflict with other options that affect the
                                file mode, like fsGroup, and the result can be other
                                mode bits set.
                              format: int32
                              type: integer
                            sources:
                              description: list of volume projections
                              items:
                                description: Projection that may be projected along
                                  with other supported volume types
                                properties:
                                  configMap:
                                    description: |-
                                      Adapts a ConfigMap into a projected volume.

                                      The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
                                    properties:
                                      items:
                                        description: If unspecified, each key-value
                                          pair in the Data field of the referenced
                                          ConfigMap will be projected into the volume
                                          as a file whose name is the key and content
                                          is the value. If specified, the listed keys
                                          will be projected into the specified paths,
                                          and unlisted keys will not be present. If
                                          a key is specified which is not present
                                          in the ConfigMap, the volume setup will
                                          error unless it is marked optional. Paths
                                          must be relative and may not contain the
                                          '..' path or start with '..'.
                                        items:
                                          description: Maps a string key to a path
                                            within a volume.
                                          properties:
                                            key:
                                              description: The key to project.
                                              type: string
                                            mode:
                                              description: 'Optional: mode bits used
                                                to set permissions on this file. Must
                                                be an octal value between 0000 and
                                                0777 or a decimal value between 0
                                                and 511. YAML accepts both octal and
                                                decimal values, JSON requires decimal
                                                values for mode bits. If not specified,
                                                the volume defaultMode will be used.
                                                This might be in conflict with other
                                                options that affect the file mode,
                                                like fsGroup, and the result can be
                                                other mode bits set.'
                                              format: int32
                                              type: integer
                                            path:
                                              description: The relative path of the
                                                file to map the key to. May not be
                                                an absolute path. May not contain
                                                the path element '..'. May not start
                                                with the string '..'.
                                              type: string
                                          required:
                                          - key
                                          - path
                                          type: object
                                        type: array
                                      name:
                                        description: 'Name of the referent. More info:
                                          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                      optional:
                                        description: Specify whether the ConfigMap
                                          or its keys must be defined
                                        type: boolean
                                    type: object
                                  downwardAPI:
                                    description: Represents downward API info for
                                      projecting into a projected volume. Note that
                                      this is identical to a downwardAPI volume source
                                      without the default mode.
                                    properties:
                                      items:
                                        description: Items is a list of DownwardAPIVolume
                                          file
                                        items:
                                          description: DownwardAPIVolumeFile represents
                                            information to create the file containing
                                            the pod field
                                          properties:
                                            fieldRef:
                                              description: ObjectFieldSelector selects
                                                an APIVersioned field of an object.
                                              properties:
                                                apiVersion:
                                                  description: Version of the schema
                                                    the FieldPath is written in terms
                                                    of, defaults to "v1".
                                                  type: string
                                                fieldPath:
                                                  description: Path of the field to
                                                    select in the specified API version.
                                                  type: string
                                              required:
                                              - fieldPath
                                              type: object
                                            mode:
                                              description: 'Optional: mode bits used
                                                to set permissions on this file, must
                                                be an octal value between 0000 and
                                                0777 or a decimal value between 0
                                                and 511. YAML accepts both octal and
                                                decimal values, JSON requires decimal
                                                values for mode bits. If not specified,
                                                the volume defaultMode will be used.
                                                This might be in conflict with other
                                                options that affect the file mode,
                                                like fsGroup, and the result can be
                                                other mode bits set.'
                                              format: int32
                                              type: integer
                                            path:
                                              description: 'Required: Path is  the
                                                relative path name of the file to
                                                be created. Must not be absolute or
                                                contain the ''..'' path. Must be utf-8
                                                encoded. The first item of the relative
                                                path must not start with ''..'''
                                              type: string
                                            resourceFieldRef:
                                              description: ResourceFieldSelector represents
                                                container resources (cpu, memory)
                                                and their output format
                                              properties:
                                                containerName:
                                                  description: 'Container name: required
                                                    for volumes, optional for env
                                                    vars'
                                                  type: string
                                                divisor:
                                                  description: |-
                                                    Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                                                    The serialization format is:

                                                    <quantity>        ::= <signedNumber><suffix>
                                                      (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                                                    <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                                                      (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                                                    <decimalSI>       ::= m | "" | k | M | G | T | P | E
                                                      (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                                                    <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                                                    No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                                                    When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                                                    Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                                                      a. No precision is lost
                                                      b. No fractional digits will be emitted
                                                      c. The exponent (or suffix) is as large as possible.
                                                    The sign will be omitted unless the number is negative.

                                                    Examples:
                                                      1.5 will be serialized as "1500m"
                                                      1.5Gi will be serialized as "1536Mi"

                                                    Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                                                    Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                                                    This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                                                  type: string
                                                resource:
                                                  description: 'Required: resource
                                                    to select'
                                                  type: string
                                              required:
                                              - resource
                                              type: object
                                          required:
                                          - path
                                          type: object
                                        type: array
                                    type: object
                                  secret:
                                    description: |-
                                      Adapts a secret into a projected volume.

                                      The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
                                    properties:
                                      items:
                                        description: If unspecified, each key-value
                                          pair in the Data field of the referenced
                                          Secret will be projected into the volume
                                          as a file whose name is the key and content
                                          is the value. If specified, the listed keys
                                          will be projected into the specified paths,
                                          and unlisted keys will not be present. If
                                          a key is specified which is not present
                                          in the Secret, the volume setup will error
                                          unless it is marked optional. Paths must
                                          be relative and may not contain the '..'
                                          path or start with '..'.
                                        items:
                                          description: Maps a string key to a path
                                            within a volume.
                                          properties:
                                            key:
                                              description: The key to project.
                                              type: string
                                            mode:
                                              description: 'Optional: mode bits used
                                                to set permissions on this file. Must
                                                be an octal value between 0000 and
                                                0777 or a decimal value between 0
                                                and 511. YAML accepts both octal and
                                                decimal values, JSON requires decimal
                                                values for mode bits. If not specified,
                                                the volume defaultMode will be used.
                                                This might be in conflict with other
                                                options that affect the file mode,
                                                like fsGroup, and the result can be
                                                other mode bits set.'
                                              format: int32
                                              type: integer
                                            path:
                                              description: The relative path of the
                                                file to map the key to. May not be
                                                an absolute path. May not contain
                                                the path element '..'. May not start
                                                with the string '..'.
                                              type: string
                                          required:
                                          - key
                                          - path
                                          type: object
                                        type: array
                                      name:
                                        description: 'Name of the referent. More info:
                                          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                      optional:
                                        description: Specify whether the Secret or
                                          its key must be defined
                                        type: boolean
                                    type: object
                                  serviceAccountToken:
                                    description: ServiceAccountTokenProjection represents
                                      a projected service account token volume. This
                                      projection can be used to insert a service account
                                      token into the pods runtime filesystem for use
                                      against APIs (Kubernetes API Server or otherwise).
                                    properties:
                                      audience:
                                        description: Audience is the intended audience
                                          of the token. A recipient of a token must
                                          identify itself with an identifier specified
                                          in the audience of the token, and otherwise
                                          should reject the token. The audience defaults
                                          to the identifier of the apiserver.
                                        type: string
                                      expirationSeconds:
                                        description: ExpirationSeconds is the requested
                                          duration of validity of the service account
                                          token. As the token approaches expiration,
                                          the kubelet volume plugin will proactively
                                          rotate the service account token. The kubelet
                                          will start trying to rotate the token if
                                          the token is older than 80 percent of its
                                          time to live or if the token is older than
                                          24 hours.Defaults to 1 hour and must be
                                          at least 10 minutes.
                                        format: int64
                                        type: integer
                                      path:
                                        description: Path is the path relative to
                                          the mount point of the file to project the
                                          token into.
                                        type: string
                                    required:
                                    - path
                                    type: object
                                type: object
                              type: array
                          type: object
                        secret:
                          description: |-
                            Adapts a Secret into a volume.

                            The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
                          properties:
                            defaultMode:
                              description: 'Optional: mode bits used to set permissions
                                on created files by default. Must be an octal value
                                between 0000 and 0777 or a decimal value between 0
                                and 511. YAML accepts both octal and decimal values,
                                JSON requires decimal values for mode bits. Defaults
                                to 0644. Directories within the path are not affected
                                by this setting. This might be in conflict with other
                                options that affect the file mode, like fsGroup, and
                                the result can be other mode bits set.'
                              format: int32
                              type: integer
                            items:
                              description: If unspecified, each key-value pair in
                                the Data field of the referenced Secret will be projected
                                into the volume as a file whose name is the key and
                                content is the value. If specified, the listed keys
                                will be projected into the specified paths, and unlisted
                                keys will not be present. If a key is specified which
                                is not present in the Secret, the volume setup will
                                error unless it is marked optional. Paths must be
                                relative and may not contain the '..' path or start
                                with '..'.
                              items:
                                description: Maps a string key to a path within a
                                  volume.
                                properties:
                                  key:
                                    description: The key to project.
                                    type: string
                                  mode:
                                    description: 'Optional: mode bits used to set
                                      permissions on this file. Must be an octal value
                                      between 0000 and 0777 or a decimal value between
                                      0 and 511. YAML accepts both octal and decimal
                                      values, JSON requires decimal values for mode
                                      bits. If not specified, the volume defaultMode
                                      will be used. This might be in conflict with
                                      other options that affect the file mode, like
                                      fsGroup, and the result can be other mode bits
                                      set.'
                                    format: int32
                                    type: integer
                                  path:
                                    description: The relative path of the file to
                                      map the key to. May not be an absolute path.
                                      May not contain the path element '..'. May not
                                      start with the string '..'.
                                    type: string
                                required:
                                - key
                                - path
                                type: object
                              type: array
                            optional:
                              description: Specify whether the Secret or its keys
                                must be defined
                              type: boolean
                            secretName:
                              description: 'Name of the secret in the pod''s namespace
                                to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
                              type: string
                          type: object
                      type: object
                    type: array
                  disableConnectionPooling:
                    description: If set to `true`, avoids creating a connection pooling
                      (using [PgBouncer](https://www.pgbouncer.org/)) sidecar.
                    type: boolean
                  disableMetricsExporter:
                    description: If set to `true`, avoids creating the Prometheus
                      exporter sidecar. Recommended when there's no intention to use
                      Prometheus for monitoring.
                    type: boolean
                  disablePostgresUtil:
                    description: If set to `true`, avoids creating the `postgres-util`
                      sidecar. This sidecar contains usual Postgres administration
                      utilities *that are not present in the main (`patroni`) container*,
                      like `psql`. Only disable if you know what you are doing.
                    type: boolean
                  managementPolicy:
                    description: |
                      managementPolicy controls how pods are created during initial scale up, when replacing pods
                       on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created
                       in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is
                       ready before continuing. When scaling down, the pods are removed in the opposite order.
                       The alternative policy is `Parallel` which will create pods in parallel to match the desired
                       scale without waiting, and on scale down will delete all pods at once.
                    type: string
                  persistentVolume:
                    description: Pod's persistent volume configuration.
                    properties:
                      size:
                        description: |
                          Size of the PersistentVolume set for each instance of the cluster. This size is specified either in Mebibytes, Gibibytes or Tebibytes (multiples of 2^20, 2^30 or 2^40, respectively).
                        pattern: ^[0-9]+(\.[0-9]+)?(Mi|Gi|Ti)$
                        type: string
                      storageClass:
                        description: |
                          Name of an existing StorageClass in the Kubernetes cluster, used to create the PersistentVolumes for the instances of the cluster.
                        type: string
                    required:
                    - size
                    type: object
                  resources:
                    description: Pod custom resources configuration.
                    properties:
                      enableClusterLimitsRequirements:
                        description: When enabled resource limits for containers other
                          than the patroni container wil be set just like for patroni
                          contianer as specified in the SGInstanceProfile.
                        type: boolean
                    type: object
                  scheduling:
                    description: Pod custom scheduling, affinity and topology spread
                      constratins configuration.
                    properties:
                      backup:
                        description: Backup Pod custom scheduling and affinity configuration.
                        properties:
                          nodeAffinity:
                            description: |
                              Node affinity is a group of node affinity scheduling rules.

                              See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#nodeaffinity-v1-core
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule
                                  pods to nodes that satisfy the affinity expressions
                                  specified by this field, but it may choose a node
                                  that violates one or more of the expressions. The
                                  node that is most preferred is the one with the
                                  greatest sum of weights, i.e. for each node that
                                  meets all of the scheduling requirements (resource
                                  request, requiredDuringScheduling affinity expressions,
                                  etc.), compute a sum by iterating through the elements
                                  of this field and adding "weight" to the sum if
                                  the node matches the corresponding matchExpressions;
                                  the node(s) with the highest sum are the most preferred.
                                items:
                                  description: An empty preferred scheduling term
                                    matches all objects with implicit weight 0 (i.e.
                                    it's a no-op). A null preferred scheduling term
                                    matches no objects (i.e. is also a no-op).
                                  properties:
                                    preference:
                                      description: A null or empty node selector term
                                        matches no objects. The requirements of them
                                        are ANDed. The TopologySelectorTerm type implements
                                        a subset of the NodeSelectorTerm.
                                      properties:
                                        matchExpressions:
                                          description: A list of node selector requirements
                                            by node's labels.
                                          items:
                                            description: A node selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: The label key that the
                                                  selector applies to.
                                                type: string
                                              operator:
                                                description: |+
                                                  Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.

                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn,
                                                  the values array must be non-empty.
                                                  If the operator is Exists or DoesNotExist,
                                                  the values array must be empty.
                                                  If the operator is Gt or Lt, the
                                                  values array must have a single
                                                  element, which will be interpreted
                                                  as an integer. This array is replaced
                                                  during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchFields:
                                          description: A list of node selector requirements
                                            by node's fields.
                                          items:
                                            description: A node selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: The label key that the
                                                  selector applies to.
                                                type: string
                                              operator:
                                                description: |+
                                                  Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.

                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn,
                                                  the values array must be non-empty.
                                                  If the operator is Exists or DoesNotExist,
                                                  the values array must be empty.
                                                  If the operator is Gt or Lt, the
                                                  values array must have a single
                                                  element, which will be interpreted
                                                  as an integer. This array is replaced
                                                  during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                      type: object
                                    weight:
                                      description: Weight associated with matching
                                        the corresponding nodeSelectorTerm, in the
                                        range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                  - weight
                                  - preference
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: A node selector represents the union
                                  of the results of one or more label queries over
                                  a set of nodes; that is, it represents the OR of
                                  the selectors represented by the node selector terms.
                                properties:
                                  nodeSelectorTerms:
                                    description: Required. A list of node selector
                                      terms. The terms are ORed.
                                    items:
                                      description: A null or empty node selector term
                                        matches no objects. The requirements of them
                                        are ANDed. The TopologySelectorTerm type implements
                                        a subset of the NodeSelectorTerm.
                                      properties:
                                        matchExpressions:
                                          description: A list of node selector requirements
                                            by node's labels.
                                          items:
                                            description: A node selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: The label key that the
                                                  selector applies to.
                                                type: string
                                              operator:
                                                description: |+
                                                  Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.

                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn,
                                                  the values array must be non-empty.
                                                  If the operator is Exists or DoesNotExist,
                                                  the values array must be empty.
                                                  If the operator is Gt or Lt, the
                                                  values array must have a single
                                                  element, which will be interpreted
                                                  as an integer. This array is replaced
                                                  during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchFields:
                                          description: A list of node selector requirements
                                            by node's fields.
                                          items:
                                            description: A node selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: The label key that the
                                                  selector applies to.
                                                type: string
                                              operator:
                                                description: |+
                                                  Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.

                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn,
                                                  the values array must be non-empty.
                                                  If the operator is Exists or DoesNotExist,
                                                  the values array must be empty.
                                                  If the operator is Gt or Lt, the
                                                  values array must have a single
                                                  element, which will be interpreted
                                                  as an integer. This array is replaced
                                                  during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                      type: object
                                    type: array
                                required:
                                - nodeSelectorTerms
                                type: object
                            type: object
                          nodeSelector:
                            additionalProperties:
                              type: string
                            description: |
                              NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
                            type: object
                          podAffinity:
                            description: |
                              Pod affinity is a group of inter pod affinity scheduling rules.

                              See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#podaffinity-v1-core
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule
                                  pods to nodes that satisfy the affinity expressions
                                  specified by this field, but it may choose a node
                                  that violates one or more of the expressions. The
                                  node that is most preferred is the one with the
                                  greatest sum of weights, i.e. for each node that
                                  meets all of the scheduling requirements (resource
                                  request, requiredDuringScheduling affinity expressions,
                                  etc.), compute a sum by iterating through the elements
                                  of this field and adding "weight" to the sum if
                                  the node has pods which matches the corresponding
                                  podAffinityTerm; the node(s) with the highest sum
                                  are the most preferred.
                                items:
                                  description: The weights of all of the matched WeightedPodAffinityTerm
                                    fields are added per-node to find the most preferred
                                    node(s)
                                  properties:
                                    podAffinityTerm:
                                      description: Defines a set of pods (namely those
                                        matching the labelSelector relative to the
                                        given namespace(s)) that this pod should be
                                        co-located (affinity) or not co-located (anti-affinity)
                                        with, where co-located is defined as running
                                        on a node whose value of the label with key
                                        <topologyKey> matches that of any node on
                                        which a pod of the set of pods is running
                                      properties:
                                        labelSelector:
                                          description: A label selector is a label
                                            query over a set of resources. The result
                                            of matchLabels and matchExpressions are
                                            ANDed. An empty label selector matches
                                            all objects. A null label selector matches
                                            no objects.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list
                                                of label selector requirements. The
                                                requirements are ANDed.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label
                                                      key that the selector applies
                                                      to.
                                                    type: string
                                                  operator:
                                                    description: operator represents
                                                      a key's relationship to a set
                                                      of values. Valid operators are
                                                      In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array
                                                      of string values. If the operator
                                                      is In or NotIn, the values array
                                                      must be non-empty. If the operator
                                                      is Exists or DoesNotExist, the
                                                      values array must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of
                                                {key,value} pairs. A single {key,value}
                                                in the matchLabels map is equivalent
                                                to an element of matchExpressions,
                                                whose key field is "key", the operator
                                                is "In", and the values array contains
                                                only "value". The requirements are
                                                ANDed.
                                              type: object
                                          type: object
                                        namespaceSelector:
                                          description: A label selector is a label
                                            query over a set of resources. The result
                                            of matchLabels and matchExpressions are
                                            ANDed. An empty label selector matches
                                            all objects. A null label selector matches
                                            no objects.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list
                                                of label selector requirements. The
                                                requirements are ANDed.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label
                                                      key that the selector applies
                                                      to.
                                                    type: string
                                                  operator:
                                                    description: operator represents
                                                      a key's relationship to a set
                                                      of values. Valid operators are
                                                      In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array
                                                      of string values. If the operator
                                                      is In or NotIn, the values array
                                                      must be non-empty. If the operator
                                                      is Exists or DoesNotExist, the
                                                      values array must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of
                                                {key,value} pairs. A single {key,value}
                                                in the matchLabels map is equivalent
                                                to an element of matchExpressions,
                                                whose key field is "key", the operator
                                                is "In", and the values array contains
                                                only "value". The requirements are
                                                ANDed.
                                              type: object
                                          type: object
                                        namespaces:
                                          description: namespaces specifies a static
                                            list of namespace names that the term
                                            applies to. The term is applied to the
                                            union of the namespaces listed in this
                                            field and the ones selected by namespaceSelector.
                                            null or empty namespaces list and null
                                            namespaceSelector means "this pod's namespace".
                                          items:
                                            type: string
                                          type: array
                                        topologyKey:
                                          description: This pod should be co-located
                                            (affinity) or not co-located (anti-affinity)
                                            with the pods matching the labelSelector
                                            in the specified namespaces, where co-located
                                            is defined as running on a node whose
                                            value of the label with key topologyKey
                                            matches that of any node on which any
                                            of the selected pods is running. Empty
                                            topologyKey is not allowed.
                                          type: string
                                      required:
                                      - topologyKey
                                      type: object
                                    weight:
                                      description: weight associated with matching
                                        the corresponding podAffinityTerm, in the
                                        range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                  - weight
                                  - podAffinityTerm
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: If the affinity requirements specified
                                  by this field are not met at scheduling time, the
                                  pod will not be scheduled onto the node. If the
                                  affinity requirements specified by this field cease
                                  to be met at some point during pod execution (e.g.
                                  due to a pod label update), the system may or may
                                  not try to eventually evict the pod from its node.
                                  When there are multiple elements, the lists of nodes
                                  corresponding to each podAffinityTerm are intersected,
                                  i.e. all terms must be satisfied.
                                items:
                                  description: Defines a set of pods (namely those
                                    matching the labelSelector relative to the given
                                    namespace(s)) that this pod should be co-located
                                    (affinity) or not co-located (anti-affinity) with,
                                    where co-located is defined as running on a node
                                    whose value of the label with key <topologyKey>
                                    matches that of any node on which a pod of the
                                    set of pods is running
                                  properties:
                                    labelSelector:
                                      description: A label selector is a label query
                                        over a set of resources. The result of matchLabels
                                        and matchExpressions are ANDed. An empty label
                                        selector matches all objects. A null label
                                        selector matches no objects.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaceSelector:
                                      description: A label selector is a label query
                                        over a set of resources. The result of matchLabels
                                        and matchExpressions are ANDed. An empty label
                                        selector matches all objects. A null label
                                        selector matches no objects.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaces:
                                      description: namespaces specifies a static list
                                        of namespace names that the term applies to.
                                        The term is applied to the union of the namespaces
                                        listed in this field and the ones selected
                                        by namespaceSelector. null or empty namespaces
                                        list and null namespaceSelector means "this
                                        pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity)
                                        or not co-located (anti-affinity) with the
                                        pods matching the labelSelector in the specified
                                        namespaces, where co-located is defined as
                                        running on a node whose value of the label
                                        with key topologyKey matches that of any node
                                        on which any of the selected pods is running.
                                        Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                  - topologyKey
                                  type: object
                                type: array
                            type: object
                          podAntiAffinity:
                            description: |
                              Pod anti affinity is a group of inter pod anti affinity scheduling rules.

                              See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#podantiaffinity-v1-core
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule
                                  pods to nodes that satisfy the anti-affinity expressions
                                  specified by this field, but it may choose a node
                                  that violates one or more of the expressions. The
                                  node that is most preferred is the one with the
                                  greatest sum of weights, i.e. for each node that
                                  meets all of the scheduling requirements (resource
                                  request, requiredDuringScheduling anti-affinity
                                  expressions, etc.), compute a sum by iterating through
                                  the elements of this field and adding "weight" to
                                  the sum if the node has pods which matches the corresponding
                                  podAffinityTerm; the node(s) with the highest sum
                                  are the most preferred.
                                items:
                                  description: The weights of all of the matched WeightedPodAffinityTerm
                                    fields are added per-node to find the most preferred
                                    node(s)
                                  properties:
                                    podAffinityTerm:
                                      description: Defines a set of pods (namely those
                                        matching the labelSelector relative to the
                                        given namespace(s)) that this pod should be
                                        co-located (affinity) or not co-located (anti-affinity)
                                        with, where co-located is defined as running
                                        on a node whose value of the label with key
                                        <topologyKey> matches that of any node on
                                        which a pod of the set of pods is running
                                      properties:
                                        labelSelector:
                                          description: A label selector is a label
                                            query over a set of resources. The result
                                            of matchLabels and matchExpressions are
                                            ANDed. An empty label selector matches
                                            all objects. A null label selector matches
                                            no objects.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list
                                                of label selector requirements. The
                                                requirements are ANDed.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label
                                                      key that the selector applies
                                                      to.
                                                    type: string
                                                  operator:
                                                    description: operator represents
                                                      a key's relationship to a set
                                                      of values. Valid operators are
                                                      In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array
                                                      of string values. If the operator
                                                      is In or NotIn, the values array
                                                      must be non-empty. If the operator
                                                      is Exists or DoesNotExist, the
                                                      values array must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of
                                                {key,value} pairs. A single {key,value}
                                                in the matchLabels map is equivalent
                                                to an element of matchExpressions,
                                                whose key field is "key", the operator
                                                is "In", and the values array contains
                                                only "value". The requirements are
                                                ANDed.
                                              type: object
                                          type: object
                                        namespaceSelector:
                                          description: A label selector is a label
                                            query over a set of resources. The result
                                            of matchLabels and matchExpressions are
                                            ANDed. An empty label selector matches
                                            all objects. A null label selector matches
                                            no objects.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list
                                                of label selector requirements. The
                                                requirements are ANDed.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label
                                                      key that the selector applies
                                                      to.
                                                    type: string
                                                  operator:
                                                    description: operator represents
                                                      a key's relationship to a set
                                                      of values. Valid operators are
                                                      In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array
                                                      of string values. If the operator
                                                      is In or NotIn, the values array
                                                      must be non-empty. If the operator
                                                      is Exists or DoesNotExist, the
                                                      values array must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of
                                                {key,value} pairs. A single {key,value}
                                                in the matchLabels map is equivalent
                                                to an element of matchExpressions,
                                                whose key field is "key", the operator
                                                is "In", and the values array contains
                                                only "value". The requirements are
                                                ANDed.
                                              type: object
                                          type: object
                                        namespaces:
                                          description: namespaces specifies a static
                                            list of namespace names that the term
                                            applies to. The term is applied to the
                                            union of the namespaces listed in this
                                            field and the ones selected by namespaceSelector.
                                            null or empty namespaces list and null
                                            namespaceSelector means "this pod's namespace".
                                          items:
                                            type: string
                                          type: array
                                        topologyKey:
                                          description: This pod should be co-located
                                            (affinity) or not co-located (anti-affinity)
                                            with the pods matching the labelSelector
                                            in the specified namespaces, where co-located
                                            is defined as running on a node whose
                                            value of the label with key topologyKey
                                            matches that of any node on which any
                                            of the selected pods is running. Empty
                                            topologyKey is not allowed.
                                          type: string
                                      required:
                                      - topologyKey
                                      type: object
                                    weight:
                                      description: weight associated with matching
                                        the corresponding podAffinityTerm, in the
                                        range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                  - weight
                                  - podAffinityTerm
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: If the anti-affinity requirements specified
                                  by this field are not met at scheduling time, the
                                  pod will not be scheduled onto the node. If the
                                  anti-affinity requirements specified by this field
                                  cease to be met at some point during pod execution
                                  (e.g. due to a pod label update), the system may
                                  or may not try to eventually evict the pod from
                                  its node. When there are multiple elements, the
                                  lists of nodes corresponding to each podAffinityTerm
                                  are intersected, i.e. all terms must be satisfied.
                                items:
                                  description: Defines a set of pods (namely those
                                    matching the labelSelector relative to the given
                                    namespace(s)) that this pod should be co-located
                                    (affinity) or not co-located (anti-affinity) with,
                                    where co-located is defined as running on a node
                                    whose value of the label with key <topologyKey>
                                    matches that of any node on which a pod of the
                                    set of pods is running
                                  properties:
                                    labelSelector:
                                      description: A label selector is a label query
                                        over a set of resources. The result of matchLabels
                                        and matchExpressions are ANDed. An empty label
                                        selector matches all objects. A null label
                                        selector matches no objects.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaceSelector:
                                      description: A label selector is a label query
                                        over a set of resources. The result of matchLabels
                                        and matchExpressions are ANDed. An empty label
                                        selector matches all objects. A null label
                                        selector matches no objects.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaces:
                                      description: namespaces specifies a static list
                                        of namespace names that the term applies to.
                                        The term is applied to the union of the namespaces
                                        listed in this field and the ones selected
                                        by namespaceSelector. null or empty namespaces
                                        list and null namespaceSelector means "this
                                        pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity)
                                        or not co-located (anti-affinity) with the
                                        pods matching the labelSelector in the specified
                                        namespaces, where co-located is defined as
                                        running on a node whose value of the label
                                        with key topologyKey matches that of any node
                                        on which any of the selected pods is running.
                                        Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                  - topologyKey
                                  type: object
                                type: array
                            type: object
                          tolerations:
                            description: |
                              If specified, the pod's tolerations.

                              See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#toleration-v1-core
                            items:
                              description: |
                                The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>

                                See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#toleration-v1-core
                              properties:
                                effect:
                                  description: |+
                                    Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.

                                  type: string
                                key:
                                  description: Key is the taint key that the toleration
                                    applies to. Empty means match all taint keys.
                                    If the key is empty, operator must be Exists;
                                    this combination means to match all values and
                                    all keys.
                                  type: string
                                operator:
                                  description: |+
                                    Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.

                                  type: string
                                tolerationSeconds:
                                  description: TolerationSeconds represents the period
                                    of time the toleration (which must be of effect
                                    NoExecute, otherwise this field is ignored) tolerates
                                    the taint. By default, it is not set, which means
                                    tolerate the taint forever (do not evict). Zero
                                    and negative values will be treated as 0 (evict
                                    immediately) by the system.
                                  format: int64
                                  type: integer
                                value:
                                  description: Value is the taint value the toleration
                                    matches to. If the operator is Exists, the value
                                    should be empty, otherwise just a regular string.
                                  type: string
                              type: object
                            type: array
                        type: object
                      nodeAffinity:
                        description: |
                          Node affinity is a group of node affinity scheduling rules.

                          See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#nodeaffinity-v1-core
                        properties:
                          preferredDuringSchedulingIgnoredDuringExecution:
                            description: The scheduler will prefer to schedule pods
                              to nodes that satisfy the affinity expressions specified
                              by this field, but it may choose a node that violates
                              one or more of the expressions. The node that is most
                              preferred is the one with the greatest sum of weights,
                              i.e. for each node that meets all of the scheduling
                              requirements (resource request, requiredDuringScheduling
                              affinity expressions, etc.), compute a sum by iterating
                              through the elements of this field and adding "weight"
                              to the sum if the node matches the corresponding matchExpressions;
                              the node(s) with the highest sum are the most preferred.
                            items:
                              description: An empty preferred scheduling term matches
                                all objects with implicit weight 0 (i.e. it's a no-op).
                                A null preferred scheduling term matches no objects
                                (i.e. is also a no-op).
                              properties:
                                preference:
                                  description: A null or empty node selector term
                                    matches no objects. The requirements of them are
                                    ANDed. The TopologySelectorTerm type implements
                                    a subset of the NodeSelectorTerm.
                                  properties:
                                    matchExpressions:
                                      description: A list of node selector requirements
                                        by node's labels.
                                      items:
                                        description: A node selector requirement is
                                          a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: |+
                                              Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.

                                            type: string
                                          values:
                                            description: An array of string values.
                                              If the operator is In or NotIn, the
                                              values array must be non-empty. If the
                                              operator is Exists or DoesNotExist,
                                              the values array must be empty. If the
                                              operator is Gt or Lt, the values array
                                              must have a single element, which will
                                              be interpreted as an integer. This array
                                              is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchFields:
                                      description: A list of node selector requirements
                                        by node's fields.
                                      items:
                                        description: A node selector requirement is
                                          a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: |+
                                              Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.

                                            type: string
                                          values:
                                            description: An array of string values.
                                              If the operator is In or NotIn, the
                                              values array must be non-empty. If the
                                              operator is Exists or DoesNotExist,
                                              the values array must be empty. If the
                                              operator is Gt or Lt, the values array
                                              must have a single element, which will
                                              be interpreted as an integer. This array
                                              is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                  type: object
                                weight:
                                  description: Weight associated with matching the
                                    corresponding nodeSelectorTerm, in the range 1-100.
                                  format: int32
                                  type: integer
                              required:
                              - weight
                              - preference
                              type: object
                            type: array
                          requiredDuringSchedulingIgnoredDuringExecution:
                            description: A node selector represents the union of the
                              results of one or more label queries over a set of nodes;
                              that is, it represents the OR of the selectors represented
                              by the node selector terms.
                            properties:
                              nodeSelectorTerms:
                                description: Required. A list of node selector terms.
                                  The terms are ORed.
                                items:
                                  description: A null or empty node selector term
                                    matches no objects. The requirements of them are
                                    ANDed. The TopologySelectorTerm type implements
                                    a subset of the NodeSelectorTerm.
                                  properties:
                                    matchExpressions:
                                      description: A list of node selector requirements
                                        by node's labels.
                                      items:
                                        description: A node selector requirement is
                                          a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: |+
                                              Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.

                                            type: string
                                          values:
                                            description: An array of string values.
                                              If the operator is In or NotIn, the
                                              values array must be non-empty. If the
                                              operator is Exists or DoesNotExist,
                                              the values array must be empty. If the
                                              operator is Gt or Lt, the values array
                                              must have a single element, which will
                                              be interpreted as an integer. This array
                                              is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchFields:
                                      description: A list of node selector requirements
                                        by node's fields.
                                      items:
                                        description: A node selector requirement is
                                          a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: |+
                                              Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.

                                            type: string
                                          values:
                                            description: An array of string values.
                                              If the operator is In or NotIn, the
                                              values array must be non-empty. If the
                                              operator is Exists or DoesNotExist,
                                              the values array must be empty. If the
                                              operator is Gt or Lt, the values array
                                              must have a single element, which will
                                              be interpreted as an integer. This array
                                              is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                  type: object
                                type: array
                            required:
                            - nodeSelectorTerms
                            type: object
                        type: object
                      nodeSelector:
                        additionalProperties:
                          type: string
                        description: |
                          NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
                        type: object
                      podAffinity:
                        description: |
                          Pod affinity is a group of inter pod affinity scheduling rules.

                          See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#podaffinity-v1-core
                        properties:
                          preferredDuringSchedulingIgnoredDuringExecution:
                            description: The scheduler will prefer to schedule pods
                              to nodes that satisfy the affinity expressions specified
                              by this field, but it may choose a node that violates
                              one or more of the expressions. The node that is most
                              preferred is the one with the greatest sum of weights,
                              i.e. for each node that meets all of the scheduling
                              requirements (resource request, requiredDuringScheduling
                              affinity expressions, etc.), compute a sum by iterating
                              through the elements of this field and adding "weight"
                              to the sum if the node has pods which matches the corresponding
                              podAffinityTerm; the node(s) with the highest sum are
                              the most preferred.
                            items:
                              description: The weights of all of the matched WeightedPodAffinityTerm
                                fields are added per-node to find the most preferred
                                node(s)
                              properties:
                                podAffinityTerm:
                                  description: Defines a set of pods (namely those
                                    matching the labelSelector relative to the given
                                    namespace(s)) that this pod should be co-located
                                    (affinity) or not co-located (anti-affinity) with,
                                    where co-located is defined as running on a node
                                    whose value of the label with key <topologyKey>
                                    matches that of any node on which a pod of the
                                    set of pods is running
                                  properties:
                                    labelSelector:
                                      description: A label selector is a label query
                                        over a set of resources. The result of matchLabels
                                        and matchExpressions are ANDed. An empty label
                                        selector matches all objects. A null label
                                        selector matches no objects.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaceSelector:
                                      description: A label selector is a label query
                                        over a set of resources. The result of matchLabels
                                        and matchExpressions are ANDed. An empty label
                                        selector matches all objects. A null label
                                        selector matches no objects.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaces:
                                      description: namespaces specifies a static list
                                        of namespace names that the term applies to.
                                        The term is applied to the union of the namespaces
                                        listed in this field and the ones selected
                                        by namespaceSelector. null or empty namespaces
                                        list and null namespaceSelector means "this
                                        pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity)
                                        or not co-located (anti-affinity) with the
                                        pods matching the labelSelector in the specified
                                        namespaces, where co-located is defined as
                                        running on a node whose value of the label
                                        with key topologyKey matches that of any node
                                        on which any of the selected pods is running.
                                        Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                  - topologyKey
                                  type: object
                                weight:
                                  description: weight associated with matching the
                                    corresponding podAffinityTerm, in the range 1-100.
                                  format: int32
                                  type: integer
                              required:
                              - weight
                              - podAffinityTerm
                              type: object
                            type: array
                          requiredDuringSchedulingIgnoredDuringExecution:
                            description: If the affinity requirements specified by
                              this field are not met at scheduling time, the pod will
                              not be scheduled onto the node. If the affinity requirements
                              specified by this field cease to be met at some point
                              during pod execution (e.g. due to a pod label update),
                              the system may or may not try to eventually evict the
                              pod from its node. When there are multiple elements,
                              the lists of nodes corresponding to each podAffinityTerm
                              are intersected, i.e. all terms must be satisfied.
                            items:
                              description: Defines a set of pods (namely those matching
                                the labelSelector relative to the given namespace(s))
                                that this pod should be co-located (affinity) or not
                                co-located (anti-affinity) with, where co-located
                                is defined as running on a node whose value of the
                                label with key <topologyKey> matches that of any node
                                on which a pod of the set of pods is running
                              properties:
                                labelSelector:
                                  description: A label selector is a label query over
                                    a set of resources. The result of matchLabels
                                    and matchExpressions are ANDed. An empty label
                                    selector matches all objects. A null label selector
                                    matches no objects.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value}
                                        pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions,
                                        whose key field is "key", the operator is
                                        "In", and the values array contains only "value".
                                        The requirements are ANDed.
                                      type: object
                                  type: object
                                namespaceSelector:
                                  description: A label selector is a label query over
                                    a set of resources. The result of matchLabels
                                    and matchExpressions are ANDed. An empty label
                                    selector matches all objects. A null label selector
                                    matches no objects.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value}
                                        pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions,
                                        whose key field is "key", the operator is
                                        "In", and the values array contains only "value".
                                        The requirements are ANDed.
                                      type: object
                                  type: object
                                namespaces:
                                  description: namespaces specifies a static list
                                    of namespace names that the term applies to. The
                                    term is applied to the union of the namespaces
                                    listed in this field and the ones selected by
                                    namespaceSelector. null or empty namespaces list
                                    and null namespaceSelector means "this pod's namespace".
                                  items:
                                    type: string
                                  type: array
                                topologyKey:
                                  description: This pod should be co-located (affinity)
                                    or not co-located (anti-affinity) with the pods
                                    matching the labelSelector in the specified namespaces,
                                    where co-located is defined as running on a node
                                    whose value of the label with key topologyKey
                                    matches that of any node on which any of the selected
                                    pods is running. Empty topologyKey is not allowed.
                                  type: string
                              required:
                              - topologyKey
                              type: object
                            type: array
                        type: object
                      podAntiAffinity:
                        description: |
                          Pod anti affinity is a group of inter pod anti affinity scheduling rules.

                          See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#podantiaffinity-v1-core
                        properties:
                          preferredDuringSchedulingIgnoredDuringExecution:
                            description: The scheduler will prefer to schedule pods
                              to nodes that satisfy the anti-affinity expressions
                              specified by this field, but it may choose a node that
                              violates one or more of the expressions. The node that
                              is most preferred is the one with the greatest sum of
                              weights, i.e. for each node that meets all of the scheduling
                              requirements (resource request, requiredDuringScheduling
                              anti-affinity expressions, etc.), compute a sum by iterating
                              through the elements of this field and adding "weight"
                              to the sum if the node has pods which matches the corresponding
                              podAffinityTerm; the node(s) with the highest sum are
                              the most preferred.
                            items:
                              description: The weights of all of the matched WeightedPodAffinityTerm
                                fields are added per-node to find the most preferred
                                node(s)
                              properties:
                                podAffinityTerm:
                                  description: Defines a set of pods (namely those
                                    matching the labelSelector relative to the given
                                    namespace(s)) that this pod should be co-located
                                    (affinity) or not co-located (anti-affinity) with,
                                    where co-located is defined as running on a node
                                    whose value of the label with key <topologyKey>
                                    matches that of any node on which a pod of the
                                    set of pods is running
                                  properties:
                                    labelSelector:
                                      description: A label selector is a label query
                                        over a set of resources. The result of matchLabels
                                        and matchExpressions are ANDed. An empty label
                                        selector matches all objects. A null label
                                        selector matches no objects.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaceSelector:
                                      description: A label selector is a label query
                                        over a set of resources. The result of matchLabels
                                        and matchExpressions are ANDed. An empty label
                                        selector matches all objects. A null label
                                        selector matches no objects.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaces:
                                      description: namespaces specifies a static list
                                        of namespace names that the term applies to.
                                        The term is applied to the union of the namespaces
                                        listed in this field and the ones selected
                                        by namespaceSelector. null or empty namespaces
                                        list and null namespaceSelector means "this
                                        pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity)
                                        or not co-located (anti-affinity) with the
                                        pods matching the labelSelector in the specified
                                        namespaces, where co-located is defined as
                                        running on a node whose value of the label
                                        with key topologyKey matches that of any node
                                        on which any of the selected pods is running.
                                        Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                  - topologyKey
                                  type: object
                                weight:
                                  description: weight associated with matching the
                                    corresponding podAffinityTerm, in the range 1-100.
                                  format: int32
                                  type: integer
                              required:
                              - weight
                              - podAffinityTerm
                              type: object
                            type: array
                          requiredDuringSchedulingIgnoredDuringExecution:
                            description: If the anti-affinity requirements specified
                              by this field are not met at scheduling time, the pod
                              will not be scheduled onto the node. If the anti-affinity
                              requirements specified by this field cease to be met
                              at some point during pod execution (e.g. due to a pod
                              label update), the system may or may not try to eventually
                              evict the pod from its node. When there are multiple
                              elements, the lists of nodes corresponding to each podAffinityTerm
                              are intersected, i.e. all terms must be satisfied.
                            items:
                              description: Defines a set of pods (namely those matching
                                the labelSelector relative to the given namespace(s))
                                that this pod should be co-located (affinity) or not
                                co-located (anti-affinity) with, where co-located
                                is defined as running on a node whose value of the
                                label with key <topologyKey> matches that of any node
                                on which a pod of the set of pods is running
                              properties:
                                labelSelector:
                                  description: A label selector is a label query over
                                    a set of resources. The result of matchLabels
                                    and matchExpressions are ANDed. An empty label
                                    selector matches all objects. A null label selector
                                    matches no objects.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value}
                                        pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions,
                                        whose key field is "key", the operator is
                                        "In", and the values array contains only "value".
                                        The requirements are ANDed.
                                      type: object
                                  type: object
                                namespaceSelector:
                                  description: A label selector is a label query over
                                    a set of resources. The result of matchLabels
                                    and matchExpressions are ANDed. An empty label
                                    selector matches all objects. A null label selector
                                    matches no objects.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value}
                                        pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions,
                                        whose key field is "key", the operator is
                                        "In", and the values array contains only "value".
                                        The requirements are ANDed.
                                      type: object
                                  type: object
                                namespaces:
                                  description: namespaces specifies a static list
                                    of namespace names that the term applies to. The
                                    term is applied to the union of the namespaces
                                    listed in this field and the ones selected by
                                    namespaceSelector. null or empty namespaces list
                                    and null namespaceSelector means "this pod's namespace".
                                  items:
                                    type: string
                                  type: array
                                topologyKey:
                                  description: This pod should be co-located (affinity)
                                    or not co-located (anti-affinity) with the pods
                                    matching the labelSelector in the specified namespaces,
                                    where co-located is defined as running on a node
                                    whose value of the label with key topologyKey
                                    matches that of any node on which any of the selected
                                    pods is running. Empty topologyKey is not allowed.
                                  type: string
                              required:
                              - topologyKey
                              type: object
                            type: array
                        type: object
                      tolerations:
                        description: |
                          If specified, the pod's tolerations.

                          See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#toleration-v1-core
                        items:
                          description: |
                            The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>

                            See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#toleration-v1-core
                          properties:
                            effect:
                              description: |+
                                Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.

                              type: string
                            key:
                              description: Key is the taint key that the toleration
                                applies to. Empty means match all taint keys. If the
                                key is empty, operator must be Exists; this combination
                                means to match all values and all keys.
                              type: string
                            operator:
                              description: |+
                                Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.

                              type: string
                            tolerationSeconds:
                              description: TolerationSeconds represents the period
                                of time the toleration (which must be of effect NoExecute,
                                otherwise this field is ignored) tolerates the taint.
                                By default, it is not set, which means tolerate the
                                taint forever (do not evict). Zero and negative values
                                will be treated as 0 (evict immediately) by the system.
                              format: int64
                              type: integer
                            value:
                              description: Value is the taint value the toleration
                                matches to. If the operator is Exists, the value should
                                be empty, otherwise just a regular string.
                              type: string
                          type: object
                        type: array
                      topologySpreadConstraints:
                        description: |
                          TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
                        items:
                          description: |
                            TopologySpreadConstraint specifies how to spread matching pods among the given topology.

                            See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#topologyspreadconstraint-v1-core
                          properties:
                            labelSelector:
                              description: A label selector is a label query over
                                a set of resources. The result of matchLabels and
                                matchExpressions are ANDed. An empty label selector
                                matches all objects. A null label selector matches
                                no objects.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label
                                    selector requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a
                                      selector that contains values, a key, and an
                                      operator that relates the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the
                                          selector applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship
                                          to a set of values. Valid operators are
                                          In, NotIn, Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string
                                          values. If the operator is In or NotIn,
                                          the values array must be non-empty. If the
                                          operator is Exists or DoesNotExist, the
                                          values array must be empty. This array is
                                          replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value}
                                    pairs. A single {key,value} in the matchLabels
                                    map is equivalent to an element of matchExpressions,
                                    whose key field is "key", the operator is "In",
                                    and the values array contains only "value". The
                                    requirements are ANDed.
                                  type: object
                              type: object
                            matchLabelKeys:
                              description: MatchLabelKeys is a set of pod label keys
                                to select the pods over which spreading will be calculated.
                                The keys are used to lookup values from the incoming
                                pod labels, those key-value labels are ANDed with
                                labelSelector to select the group of existing pods
                                over which spreading will be calculated for the incoming
                                pod. Keys that don't exist in the incoming pod labels
                                will be ignored. A null or empty list means only match
                                against labelSelector.
                              items:
                                type: string
                              type: array
                            maxSkew:
                              description: 'MaxSkew describes the degree to which
                                pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`,
                                it is the maximum permitted difference between the
                                number of matching pods in the target topology and
                                the global minimum. The global minimum is the minimum
                                number of matching pods in an eligible domain or zero
                                if the number of eligible domains is less than MinDomains.
                                For example, in a 3-zone cluster, MaxSkew is set to
                                1, and pods with the same labelSelector spread as
                                2/2/1: In this case, the global minimum is 1. | zone1
                                | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew
                                is 1, incoming pod can only be scheduled to zone3
                                to become 2/2/2; scheduling it onto zone1(zone2) would
                                make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1).
                                - if MaxSkew is 2, incoming pod can be scheduled onto
                                any zone. When `whenUnsatisfiable=ScheduleAnyway`,
                                it is used to give higher precedence to topologies
                                that satisfy it. It''s a required field. Default value
                                is 1 and 0 is not allowed.'
                              format: int32
                              type: integer
                            minDomains:
                              description: |-
                                MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.

                                For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.

                                This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
                              format: int32
                              type: integer
                            nodeAffinityPolicy:
                              description: |-
                                NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.

                                If this value is nil, the behavior is equivalent to the Honor policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
                              type: string
                            nodeTaintsPolicy:
                              description: |-
                                NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.

                                If this value is nil, the behavior is equivalent to the Ignore policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
                              type: string
                            topologyKey:
                              description: TopologyKey is the key of node labels.
                                Nodes that have a label with this key and identical
                                values are considered to be in the same topology.
                                We consider each <key, value> as a "bucket", and try
                                to put balanced number of pods into each bucket. We
                                define a domain as a particular instance of a topology.
                                Also, we define an eligible domain as a domain whose
                                nodes meet the requirements of nodeAffinityPolicy
                                and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname",
                                each Node is a domain of that topology. And, if TopologyKey
                                is "topology.kubernetes.io/zone", each zone is a domain
                                of that topology. It's a required field.
                              type: string
                            whenUnsatisfiable:
                              description: |+
                                WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
                                  but giving higher precedence to topologies that would help reduce the
                                  skew.
                                A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.

                              type: string
                          required:
                          - maxSkew
                          - topologyKey
                          - whenUnsatisfiable
                          type: object
                        type: array
                    type: object
                required:
                - persistentVolume
                type: object
              postgres:
                description: |
                  This section allows to configure Postgres features
                properties:
                  extensions:
                    description: |
                      StackGres support deploy of extensions at runtime by simply adding an entry to this array. A deployed extension still
                      requires the creation in a database using the [`CREATE EXTENSION`](https://www.postgresql.org/docs/current/sql-createextension.html)
                      statement. After an extension is deployed correctly it will be present until removed and the cluster restarted.

                      A cluster restart is required for:
                      * Extensions that requires to add an entry to [`shared_preload_libraries`](https://postgresqlco.nf/en/doc/param/shared_preload_libraries/) configuration parameter.
                      * Upgrading extensions that overwrite any file that is not the extension''s control file or extension''s script file.
                      * Removing extensions. Until the cluster is not restarted a removed extension will still be available.
                      * Install of extensions that require extra mount. After installed the cluster will require to be restarted.
                    items:
                      properties:
                        name:
                          description: The name of the extension to deploy.
                          type: string
                        publisher:
                          description: The id of the publisher of the extension to
                            deploy. If not specified `com.ongres` will be used by
                            default.
                          type: string
                        repository:
                          description: The repository base URL from where to obtain
                            the extension to deploy. If not specified https://stackgres.io/downloads/postgres/extensions
                            will be used by default (or the value specified during
                            operator deployment).
                          type: string
                        version:
                          description: The version of the extension to deploy. If
                            not specified version of `stable` channel will be used
                            by default.
                          type: string
                      required:
                      - name
                      type: object
                    type: array
                  flavor:
                    description: |
                      Postgres flavor used on the cluster. It is either of:
                      *  `babelfish` will use the [Babelfish for Postgres](https://babelfish-for-postgresql.github.io/babelfish-for-postgresql/).

                      If not specified then the vanilla Postgres will be used for the cluster.
                    type: string
                  ssl:
                    description: |
                      This section allows to use SSL when connecting to Postgres
                    properties:
                      certificateSecretKeySelector:
                        description: |
                          Secret key selector for the certificate or certificate chain used for SSL connections.
                        properties:
                          key:
                            description: |
                              The key of Secret that contains the certificate or certificate chain for SSL connections
                            type: string
                          name:
                            description: |
                              The name of Secret that contains the certificate or certificate chain for SSL connections
                            type: string
                        required:
                        - name
                        - key
                        type: object
                      enabled:
                        description: |
                          Allow to enable SSL for connections to Postgres. By default is `false`.

                          If `true` fields `certificateSecretKeySelector` and `privateKeySecretKeySelector` will be required.
                        type: boolean
                      privateKeySecretKeySelector:
                        description: |
                          Secret key selector for the private key used for SSL connections.
                        properties:
                          key:
                            description: |
                              The key of Secret that contains the private key for SSL connections
                            type: string
                          name:
                            description: |
                              The name of Secret that contains the private key for SSL connections
                            type: string
                        required:
                        - name
                        - key
                        type: object
                    type: object
                  version:
                    description: |
                      Postgres version used on the cluster. It is either of:
                      *  The string 'latest', which automatically sets the latest major.minor Postgres version.
                      *  A major version, like '14' or '13', which sets that major version and the latest minor version.
                      *  A specific major.minor version, like '14.4'.
                    type: string
                required:
                - version
                type: object
              postgresServices:
                description: Kubernetes [services](https://kubernetes.io/docs/concepts/services-networking/service/)
                  created or managed by StackGres.
                properties:
                  primary:
                    description: Configuration for the `-primary` service. It provides
                      a stable connection (regardless of primary failures or switchovers)
                      to the read-write Postgres server of the cluster.
                    properties:
                      customPorts:
                        description: |
                          The list of custom ports that will be exposed by the Postgres primary service.

                          The names of custom ports will be prefixed with the string `custom-` so they do not
                           conflict with ports defined for the primary service.

                          The names of target ports will be prefixed with the string `custom-` so that the ports
                           that can be referenced in this section will be only those defined under
                           .spec.pods.customContainers[].ports sections were names are also prepended with the same
                           prefix.

                          See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#serviceport-v1-core
                        items:
                          description: "A custom port that will be exposed by the
                            Postgres primary service.\n\nThe name of the custom port
                            will be prefixed with the string `custom-` so it does
                            not\n conflict with ports defined for the primary service.\n\nThe
                            name of target port will be prefixed with the string `custom-`
                            so that the port\n that can be referenced in this section
                            will be only those defined under\n .spec.pods.customContainers[].ports
                            sections were names are also prepended with the same\n
                            prefix.\n \nSee: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#serviceport-v1-core\n"
                          properties:
                            appProtocol:
                              description: The application protocol for this port.
                                This field follows standard Kubernetes label syntax.
                                Un-prefixed names are reserved for IANA standard service
                                names (as per RFC-6335 and http://www.iana.org/assignments/service-names).
                                Non-standard protocols should use prefixed names such
                                as mycompany.com/my-custom-protocol.
                              type: string
                            name:
                              description: The name of this port within the service.
                                This must be a DNS_LABEL. All ports within a ServiceSpec
                                must have unique names. When considering the endpoints
                                for a Service, this must match the 'name' field in
                                the EndpointPort. Optional if only one ServicePort
                                is defined on this service.
                              type: string
                            nodePort:
                              description: 'The port on each node on which this service
                                is exposed when type is NodePort or LoadBalancer.  Usually
                                assigned by the system. If a value is specified, in-range,
                                and not in use it will be used, otherwise the operation
                                will fail.  If not specified, a port will be allocated
                                if this Service requires one.  If this field is specified
                                when creating a Service which does not need it, creation
                                will fail. This field will be wiped when updating
                                a Service to no longer need it (e.g. changing type
                                from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                              format: int32
                              type: integer
                            port:
                              description: The port that will be exposed by this service.
                              format: int32
                              type: integer
                            protocol:
                              description: The IP protocol for this port. Supports
                                "TCP", "UDP", and "SCTP". Default is TCP.
                              type: string
                            targetPort:
                              description: |
                                IntOrString is a type that can hold an int32 or a string.  When
                                 used in JSON or YAML marshalling and unmarshalling, it produces
                                 or consumes the inner type.  This allows you to have, for example,
                                 a JSON field that can accept a name or number.

                                The name will be prefixed with the string `custom-` so that the target port that can be
                                 referenced will be only those defined under .spec.pods.customContainers[].ports sections
                                 were names are also prepended with the same prefix.
                              format: int-or-string
                              type: string
                          required:
                          - port
                          type: object
                        type: array
                      enabled:
                        description: Specify if the `-primary` service should be created
                          or not.
                        type: boolean
                      externalIPs:
                        description: Specify custom external IPs for Postgres primary
                          service
                        items:
                          type: string
                        type: array
                      loadBalancerIP:
                        description: Specify loadBalancer IP for Postgres primary
                          service
                        type: string
                      type:
                        description: Specifies the type of Kubernetes service.
                        enum:
                        - ClusterIP
                        - LoadBalancer
                        - NodePort
                        type: string
                    type: object
                  replicas:
                    description: Configuration for the `-replicas` service. It provides
                      a stable connection (regardless of replica node failures) to
                      any read-only Postgres server of the cluster. Read-only servers
                      are load-balanced via this service.
                    properties:
                      customPorts:
                        description: |
                          The list of custom ports that will be exposed by the Postgres replicas service.

                          The names of custom ports will be prefixed with the string `custom-` so they do not
                           conflict with ports defined for the replicas service.

                          The names of target ports will be prefixed with the string `custom-` so that the ports
                           that can be referenced in this section will be only those defined under
                           .spec.pods.customContainers[].ports sections were names are also prepended with the same
                           prefix.
                        items:
                          description: |
                            A custom port that will be exposed by the Postgres replicas service.

                            The name of the custom port will be prefixed with the string `custom-` so it does not
                             conflict with ports defined for the replicas service.

                            The name of target port will be prefixed with the string `custom-` so that the port
                             that can be referenced in this section will be only those defined under
                             .spec.pods.customContainers[].ports sections were names are also prepended with the same
                             prefix.
                          properties:
                            appProtocol:
                              description: The application protocol for this port.
                                This field follows standard Kubernetes label syntax.
                                Un-prefixed names are reserved for IANA standard service
                                names (as per RFC-6335 and http://www.iana.org/assignments/service-names).
                                Non-standard protocols should use prefixed names such
                                as mycompany.com/my-custom-protocol.
                              type: string
                            name:
                              description: The name of this port within the service.
                                This must be a DNS_LABEL. All ports within a ServiceSpec
                                must have unique names. When considering the endpoints
                                for a Service, this must match the 'name' field in
                                the EndpointPort. Optional if only one ServicePort
                                is defined on this service.
                              type: string
                            nodePort:
                              description: 'The port on each node on which this service
                                is exposed when type is NodePort or LoadBalancer.  Usually
                                assigned by the system. If a value is specified, in-range,
                                and not in use it will be used, otherwise the operation
                                will fail.  If not specified, a port will be allocated
                                if this Service requires one.  If this field is specified
                                when creating a Service which does not need it, creation
                                will fail. This field will be wiped when updating
                                a Service to no longer need it (e.g. changing type
                                from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                              format: int32
                              type: integer
                            port:
                              description: The port that will be exposed by this service.
                              format: int32
                              type: integer
                            protocol:
                              description: The IP protocol for this port. Supports
                                "TCP", "UDP", and "SCTP". Default is TCP.
                              type: string
                            targetPort:
                              description: |
                                IntOrString is a type that can hold an int32 or a string.  When
                                 used in JSON or YAML marshalling and unmarshalling, it produces
                                 or consumes the inner type.  This allows you to have, for example,
                                 a JSON field that can accept a name or number.

                                The name will be prefixed with the string `custom-` so that the target port that can be
                                 referenced will be only those defined under .spec.pods.customContainers[].ports sections
                                 were names are also prepended with the same prefix.
                              format: int-or-string
                              type: string
                          required:
                          - port
                          type: object
                        type: array
                      enabled:
                        description: Specify if the `-replicas` service should be
                          created or not.
                        type: boolean
                      externalIPs:
                        description: Specify the custom external IPs for Postgres
                          replicas service
                        items:
                          type: string
                        type: array
                      loadBalancerIP:
                        description: Specify loadBalancer IP for Postgres replica
                          service
                        type: string
                      type:
                        description: Specifies the type of Kubernetes service.
                        enum:
                        - ClusterIP
                        - LoadBalancer
                        - NodePort
                        type: string
                    type: object
                type: object
              prometheusAutobind:
                description: |
                  If enabled, a ServiceMonitor is created for each Prometheus instance found in order to collect metrics.
                type: boolean
              replicateFrom:
                description: |
                  Make the cluster a read-only standby replica allowing to replicate from another PostgreSQL instance and acting as a rely.

                  Changing this section is allowed to fix issues or to change the replication source.

                  Removing this section convert the cluster in a normal cluster where the standby leader is converted into the a primary instance.
                properties:
                  instance:
                    description: |
                      Configure replication from a PostgreSQL instance.
                    properties:
                      external:
                        description: |
                          Configure replication from an external PostgreSQL instance.
                        properties:
                          host:
                            description: The host of the PostgreSQL to replicate from.
                            type: string
                          port:
                            description: The port of the PostgreSQL to replicate from.
                            type: integer
                        required:
                        - host
                        - port
                        type: object
                      sgCluster:
                        description: |
                          Configure replication from an SGCluster.
                        type: string
                    type: object
                  storage:
                    description: |
                      Configure replication from an SGObjectStorage using WAL shipping.

                      The file structure of the object storage must follow the
                       [WAL-G](https://github.com/wal-g/wal-g) file structure.
                    properties:
                      path:
                        description: The path in the SGObjectStorage to replicate
                          from.
                        type: string
                      performance:
                        description: |
                          Configuration that affects the backup network and disk usage performance.
                        properties:
                          downloadConcurrency:
                            description: |
                              Backup storage may use several concurrent streams to read the data. This parameter configures the number of parallel streams to use. By default, it's set to the minimum between the number of file to read and 10.
                            minimum: 1
                            type: integer
                          maxDiskBandwidth:
                            description: |
                              Maximum disk read I/O when performing a backup. In bytes (per second).
                            type: integer
                          maxNetworkBandwidth:
                            description: |
                              Maximum storage upload bandwidth used when storing a backup. In bytes (per second).
                            type: integer
                        type: object
                      sgObjectStorage:
                        description: The SGObjectStorage name to replicate from.
                        type: string
                    required:
                    - sgObjectStorage
                    - path
                    type: object
                  users:
                    description: |
                      A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the credentials of the users.
                    properties:
                      authenticator:
                        description: |
                          A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the credentials of the authenticator user used by pgbouncer to authenticate other users.
                        properties:
                          password:
                            description: |
                              A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the password of the user.
                            properties:
                              key:
                                description: The key of the secret to select from.
                                  Must be a valid secret key.
                                type: string
                              name:
                                description: Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
                                type: string
                            required:
                            - name
                            - key
                            type: object
                          username:
                            description: |
                              A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the username of the user.
                            properties:
                              key:
                                description: The key of the secret to select from.
                                  Must be a valid secret key.
                                type: string
                              name:
                                description: Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
                                type: string
                            required:
                            - name
                            - key
                            type: object
                        required:
                        - username
                        - password
                        type: object
                      replication:
                        description: |
                          A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the credentials of the replication user used to replicate from the primary cluster and from replicas of this cluster.
                        properties:
                          password:
                            description: |
                              A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the password of the user.
                            properties:
                              key:
                                description: The key of the secret to select from.
                                  Must be a valid secret key.
                                type: string
                              name:
                                description: Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
                                type: string
                            required:
                            - name
                            - key
                            type: object
                          username:
                            description: |
                              A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the username of the user.
                            properties:
                              key:
                                description: The key of the secret to select from.
                                  Must be a valid secret key.
                                type: string
                              name:
                                description: Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
                                type: string
                            required:
                            - name
                            - key
                            type: object
                        required:
                        - username
                        - password
                        type: object
                      superuser:
                        description: |
                          A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the credentials of the superuser (usually the postgres user).
                        properties:
                          password:
                            description: |
                              A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the password of the user.
                            properties:
                              key:
                                description: The key of the secret to select from.
                                  Must be a valid secret key.
                                type: string
                              name:
                                description: Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
                                type: string
                            required:
                            - name
                            - key
                            type: object
                          username:
                            description: |
                              A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretkeyselector-v1-core) that contains the username of the user.
                            properties:
                              key:
                                description: The key of the secret to select from.
                                  Must be a valid secret key.
                                type: string
                              name:
                                description: Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
                                type: string
                            required:
                            - name
                            - key
                            type: object
                        required:
                        - username
                        - password
                        type: object
                    required:
                    - superuser
                    - replication
                    - authenticator
                    type: object
                type: object
              replication:
                description: |
                  This section allows to configure Postgres replication mode and HA roles groups.

                  The main replication group is implicit and contains the total number of instances less the sum of all
                   instances in other replication groups.

                  The total number of instances is always specified by `.spec.instances`.
                properties:
                  groups:
                    description: |
                      StackGres support replication groups where a replication group of a specified number of instances could have different
                       replication role. The main replication group is implicit and contains the total number of instances less the sum of all
                       instances in other replication groups.
                    items:
                      properties:
                        instances:
                          description: |
                            Number of StackGres instances for this replication group.

                            The total number of instance of a cluster is always `.spec.instances`. The sum of the instances in the replication group must be
                             less than the total number of instances.
                          maximum: 16
                          minimum: 1
                          type: integer
                        name:
                          description: The name of the replication group. If not set
                            will default to the `group-<index>`.
                          type: string
                        role:
                          description: |
                            This role is applied to the instances of this replication group.
                            Possible values are:
                            * `ha-read`
                            * `ha`
                            * `readonly`
                            * `none`
                            The primary instance will be elected among all the replication groups that are either `ha` or `ha-read`.
                            Only if the role is set to `readonly` or `ha-read` instances of such replication group will be exposed via the replicas service.
                          type: string
                      required:
                      - role
                      - instances
                      type: object
                    type: array
                  mode:
                    description: |
                      The replication mode applied to the whole cluster.
                      Possible values are:
                      * `async` (default)
                      * `sync`
                      * `strict-sync`

                      ### `async` Mode

                      When in asynchronous mode the cluster is allowed to lose some committed transactions.
                       When the primary server fails or becomes unavailable for any other reason a sufficiently healthy standby
                       will automatically be promoted to primary. Any transactions that have not been replicated to that standby
                       remain in a "forked timeline" on the primary, and are effectively unrecoverable (the data is still there,
                       but recovering it requires a manual recovery effort by data recovery specialists).

                      ### `sync` Mode

                      When in synchronous mode a standby will not be promoted unless it is certain that the standby contains all
                       transactions that may have returned a successful commit status to client (clients can change the behavior
                       per transaction using PostgreSQL’s `synchronous_commit` setting. Transactions with `synchronous_commit`
                       values of `off` and `local` may be lost on fail over, but will not be blocked by replication delays). This
                       means that the system may be unavailable for writes even though some servers are available. System
                       administrators can still use manual failover commands to promote a standby even if it results in transaction
                       loss.

                      Synchronous mode does not guarantee multi node durability of commits under all circumstances. When no suitable
                       standby is available, primary server will still accept writes, but does not guarantee their replication. When
                       the primary fails in this mode no standby will be promoted. When the host that used to be the primary comes
                       back it will get promoted automatically, unless system administrator performed a manual failover. This behavior
                       makes synchronous mode usable with 2 node clusters.

                      When synchronous mode is used and a standby crashes, commits will block until the primary is switched to standalone
                       mode. Manually shutting down or restarting a standby will not cause a commit service interruption. Standby will
                       signal the primary to release itself from synchronous standby duties before PostgreSQL shutdown is initiated.

                      ### `strict-sync` Mode

                      When it is absolutely necessary to guarantee that each write is stored durably on at least two nodes, use the strict
                       synchronous mode. This mode prevents synchronous replication to be switched off on the primary when no synchronous
                       standby candidates are available. As a downside, the primary will not be available for writes (unless the Postgres
                       transaction explicitly turns off `synchronous_mode` parameter), blocking all client write requests until at least one
                       synchronous replica comes up.

                      **Note**: Because of the way synchronous replication is implemented in PostgreSQL it is still possible to lose
                       transactions even when using strict synchronous mode. If the PostgreSQL backend is cancelled while waiting to acknowledge
                       replication (as a result of packet cancellation due to client timeout or backend failure) transaction changes become
                       visible for other backends. Such changes are not yet replicated and may be lost in case of standby promotion.
                    type: string
                  role:
                    description: |
                      This role is applied to the instances of the implicit replication group that is composed by `.spec.instances` number of instances.
                      Possible values are:
                      * `ha-read` (default)
                      * `ha`
                      The primary instance will be elected among all the replication groups that are either `ha` or `ha-read`.
                      Only if the role is set to `ha-read` instances of main replication group will be exposed via the replicas service.
                    type: string
                  syncInstances:
                    description: |
                      Number of synchronous standby instances. Must be less than the total number of instances. It is set to 1 by default.
                       Only setteable if mode is `sync` or `strict-sync`.
                    minimum: 1
                    type: integer
                type: object
              sgInstanceProfile:
                description: |
                  Name of the [SGInstanceProfile](https://stackgres.io/doc/latest/04-postgres-cluster-management/03-resource-profiles/). A SGInstanceProfile defines CPU and memory limits. Must exist before creating a cluster. When no profile is set, a default (currently: 1 core, 2 GiB RAM) one is used.
                type: string
              toInstallPostgresExtensions:
                description: The list of Postgres extensions to install. This section
                  is filled by the operator.
                items:
                  properties:
                    build:
                      description: The build version of the extension to install.
                      type: string
                    extraMounts:
                      description: The extra mounts of the extension to install.
                      items:
                        description: The extra mount of the installed extension.
                        type: string
                      type: array
                    name:
                      description: The name of the extension to install.
                      type: string
                    postgresVersion:
                      description: The postgres major version of the extension to
                        install.
                      type: string
                    publisher:
                      description: The id of the publisher of the extension to install.
                      type: string
                    repository:
                      description: The repository base URL from where the extension
                        will be installed from.
                      type: string
                    version:
                      description: The version of the extension to install.
                      type: string
                  required:
                  - name
                  - publisher
                  - version
                  - repository
                  - postgresVersion
                  type: object
                type: array
            required:
            - instances
            - postgres
            - pods
            type: object
          status:
            properties:
              arch:
                description: The architecture on which the cluster has been initialized.
                type: string
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another.
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of deployment condition.
                      type: string
                  type: object
                type: array
              dbOps:
                description: |
                  Used by some [SGDbOps](https://stackgres.io/doc/latest/reference/crd/sgdbops) to indicate the operation configuration and status to the operator.
                properties:
                  majorVersionUpgrade:
                    description: |
                      The major version upgrade configuration and status
                    properties:
                      check:
                        description: |
                          Run `pg_upgrade` with check option instead of performing the real upgrade
                        type: boolean
                      clone:
                        description: |
                          Use `--clone` option when running `pg_upgrade`
                        type: boolean
                      dataChecksum:
                        description: |
                          Indicates if PostgreSQL data checksum is enabled
                        type: boolean
                      encoding:
                        description: |
                          The PostgreSQL encoding
                        type: string
                      initialInstances:
                        description: |
                          The instances that this operation is targetting
                        items:
                          type: string
                        type: array
                      link:
                        description: |
                          Use `--link` option when running `pg_upgrade`
                        type: boolean
                      locale:
                        description: |
                          The PostgreSQL locale
                        type: string
                      primaryInstance:
                        description: |
                          The primary instance that this operation is targetting
                        type: string
                      rollback:
                        description: |
                          Indicates to rollback from a previous major version upgrade
                        type: boolean
                      sourceBackupPath:
                        description: |
                          The source backup path
                        type: string
                      sourcePostgresVersion:
                        description: |
                          The source PostgreSQL version
                        type: string
                      sourceSgPostgresConfig:
                        description: |
                          The source SGPostgresConfig reference
                        type: string
                      targetPostgresVersion:
                        description: |
                          The target PostgreSQL version
                        type: string
                    type: object
                  minorVersionUpgrade:
                    description: |
                      The minor version upgrade configuration and status
                    properties:
                      initialInstances:
                        description: |
                          The instances that this operation is targetting
                        items:
                          type: string
                        type: array
                      primaryInstance:
                        description: |
                          The primary instance that this operation is targetting
                        type: string
                      sourcePostgresVersion:
                        description: |
                          Postgres version that is currently running on the cluster
                        type: string
                      targetPostgresVersion:
                        description: |
                          The desired Postgres version for the cluster
                        type: string
                    type: object
                  restart:
                    description: |
                      The minor version upgrade configuration and status
                    properties:
                      initialInstances:
                        description: |
                          The instances that this operation is targetting
                        items:
                          type: string
                        type: array
                      primaryInstance:
                        description: |
                          The primary instance that this operation is targetting
                        type: string
                    type: object
                  securityUpgrade:
                    description: |
                      The minor version upgrade configuration and status
                    properties:
                      initialInstances:
                        description: |
                          The instances that this operation is targetting
                        items:
                          type: string
                        type: array
                      primaryInstance:
                        description: |
                          The primary instance that this operation is targetting
                        type: string
                    type: object
                type: object
              labelPrefix:
                description: The custom prefix that is prepended to all labels.
                type: string
              managedSql:
                description: |
                  This section stores the state of referenced SQL scripts that are applied to the cluster live.
                properties:
                  scripts:
                    description: A list of statuses for script references.
                    items:
                      description: The status of a script reference.
                      properties:
                        completedAt:
                          description: ISO-8601 datetime of when the script execution
                            had completed (mutually exclusive with `failedAt`).
                          type: string
                        failedAt:
                          description: ISO-8601 datetime of when the script execution
                            had failed (mutually exclusive with `completedAt`).
                          type: string
                        id:
                          description: Identify the associated `SGScript` entry with
                            the same value in the `id` field.
                          type: integer
                        scripts:
                          description: A list of statuses for script entries of referenced
                            script.
                          items:
                            description: The status of a script entry of a referenced
                              script.
                            properties:
                              failure:
                                description: If failed, a message of the failure
                                type: string
                              failureCode:
                                description: If failed, the error code of the failure.
                                  See also https://www.postgresql.org/docs/current/errcodes-appendix.html
                                type: string
                              id:
                                description: Identify the associated script entry
                                  with the same value in the `id` field.
                                type: integer
                              intents:
                                description: Indicates the number of intents or failures
                                  occurred
                                type: integer
                              version:
                                description: The latest version applied
                                type: integer
                            type: object
                          type: array
                        startedAt:
                          description: ISO-8601 datetime of when the script execution
                            has been started.
                          type: string
                        updatedAt:
                          description: ISO-8601 datetime of when the last script execution
                            occurred. Will be reset each time the referenced `SGScripts`
                            entry will be applied.
                          type: string
                      type: object
                    type: array
                type: object
              os:
                description: The operative system on which the cluster has been initialized.
                type: string
              podStatuses:
                description: The list of pod statuses.
                items:
                  properties:
                    installedPostgresExtensions:
                      description: The list of Postgres extensions currently installed.
                      items:
                        properties:
                          build:
                            description: The build version of the installed extension.
                            type: string
                          extraMounts:
                            description: The extra mounts of the installed extension.
                            items:
                              description: The extra mount of the installed extension.
                              type: string
                            type: array
                          name:
                            description: The name of the installed extension.
                            type: string
                          postgresVersion:
                            description: The postgres major version of the installed
                              extension.
                            type: string
                          publisher:
                            description: The id of the publisher of the installed
                              extension.
                            type: string
                          repository:
                            description: The repository base URL from where the extension
                              was installed from.
                            type: string
                          version:
                            description: The version of the installed extension.
                            type: string
                        required:
                        - name
                        - publisher
                        - version
                        - repository
                        - postgresVersion
                        type: object
                      type: array
                    name:
                      description: The name of the pod.
                      type: string
                    pendingRestart:
                      description: Indicates if the pod requires restart
                      type: boolean
                    primary:
                      description: Indicates if the pod is the elected primary
                      type: boolean
                    replicationGroup:
                      description: Indicates the replication group this Pod belongs
                        to.
                      type: integer
                  required:
                  - name
                  type: object
                type: array
            type: object
        required:
        - metadata
        - spec
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
