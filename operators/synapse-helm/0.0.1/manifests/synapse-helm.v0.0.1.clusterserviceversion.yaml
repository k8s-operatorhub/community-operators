apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "charts.opdev.io/v1alpha1",
          "kind": "Synapse",
          "metadata": {
            "name": "synapse-sample"
          },
          "spec": {
            "bridges": {
              "affinity": false,
              "discord": {
                "auth": {
                  "botToken": "",
                  "clientId": ""
                },
                "channelName": "[Discord] :guild :name",
                "data": {
                  "capacity": "512Mi",
                  "storageClass": ""
                },
                "defaultVisibility": "public",
                "enabled": false,
                "image": {
                  "pullPolicy": "Always",
                  "repository": "halfshot/matrix-appservice-discord",
                  "tag": "latest"
                },
                "joinLeaveEvents": true,
                "presence": true,
                "readReceipt": true,
                "replicaCount": 1,
                "resources": {},
                "selfService": false,
                "service": {
                  "port": 9005,
                  "type": "ClusterIP"
                },
                "typingNotifications": true,
                "users": {
                  "nickname": ":nick",
                  "username": ":username#:tag"
                }
              },
              "irc": {
                "data": {
                  "capacity": "1Mi"
                },
                "database": "matrix_irc",
                "databaseSslVerify": true,
                "enabled": false,
                "image": {
                  "pullPolicy": "IfNotPresent",
                  "repository": "matrixdotorg/matrix-appservice-irc",
                  "tag": "release-0.26.0"
                },
                "presence": false,
                "replicaCount": 1,
                "resources": {},
                "servers": {
                  "chat.freenode.net": {
                    "name": "Freenode",
                    "port": 6697,
                    "ssl": true
                  }
                },
                "service": {
                  "port": 9006,
                  "type": "ClusterIP"
                }
              },
              "volume": {
                "accessMode": "ReadWriteMany",
                "capacity": "1Mi",
                "storageClass": ""
              },
              "whatsapp": {
                "bot": {
                  "avatar": "mxc://maunium.net/NeXNQarUbrlYBiPCpprYsRqr",
                  "displayName": "WhatsApp bridge bot",
                  "username": "whatsappbot"
                },
                "callNotices": true,
                "communityName": "whatsapp_{{.Localpart}}={{.Server}}",
                "connection": {
                  "maxAttempts": 3,
                  "qrRegenCount": 2,
                  "reportRetry": true,
                  "retryDelay": -1,
                  "timeout": 20
                },
                "data": {
                  "capacity": "512Mi",
                  "storageClass": ""
                },
                "enabled": false,
                "image": {
                  "pullPolicy": "Always",
                  "repository": "dock.mau.dev/tulir/mautrix-whatsapp",
                  "tag": "latest"
                },
                "permissions": {
                  "*": "relaybot"
                },
                "relaybot": {
                  "enabled": false,
                  "invites": [],
                  "management": "!foo:example.com"
                },
                "replicaCount": 1,
                "resources": {},
                "service": {
                  "port": 29318,
                  "type": "ClusterIP"
                },
                "users": {
                  "displayName": "{{if .Notify}}{{.Notify}}{{else}}{{.Jid}}{{end}} (WA)",
                  "username": "whatsapp_{{.}}"
                }
              }
            },
            "coturn": {
              "allowGuests": true,
              "enabled": true,
              "image": {
                "pullPolicy": "IfNotPresent",
                "repository": "coturn/coturn",
                "tag": "4.5.2"
              },
              "kind": "DaemonSet",
              "labels": {
                "component": "coturn"
              },
              "ports": {
                "from": 49152,
                "to": 49172
              },
              "replicaCount": 1,
              "resources": {},
              "service": {
                "type": "ClusterIP"
              },
              "sharedSecret": "ChangeMe",
              "uris": []
            },
            "fullnameOverride": "",
            "imagePullSecrets": [],
            "ingress": {
              "annotations": {
                "nginx.ingress.kubernetes.io/configuration-snippet": "proxy_intercept_errors off;\n"
              },
              "enabled": true,
              "federation": true,
              "hosts": {
                "federation": "matrix-fed.chart-example.local",
                "riot": "element.chart-example.local",
                "synapse": "matrix.chart-example.local"
              },
              "tls": []
            },
            "isOpenshift": true,
            "mail": {
              "enabled": true,
              "external": {
                "host": "",
                "password": "",
                "port": 25,
                "requireTransportSecurity": true,
                "username": ""
              },
              "from": "Matrix \u003cmatrix@example.com\u003e",
              "relay": {
                "enabled": true,
                "image": {
                  "pullPolicy": "IfNotPresent",
                  "repository": "devture/exim-relay",
                  "tag": "4.94.2-r0-1"
                },
                "labels": {
                  "component": "mail"
                },
                "probes": {
                  "liveness": {},
                  "readiness": {},
                  "startup": {}
                },
                "replicaCount": 1,
                "resources": {},
                "service": {
                  "port": 25,
                  "type": "ClusterIP"
                }
              },
              "riotUrl": ""
            },
            "matrix": {
              "adminEmail": "admin@example.com",
              "blockNonAdminInvites": false,
              "disabled": false,
              "disabledMessage": "",
              "encryptByDefault": "invite",
              "federation": {
                "allowPublicRooms": true,
                "blacklist": [
                  "127.0.0.0/8",
                  "10.0.0.0/8",
                  "172.16.0.0/12",
                  "192.168.0.0/16",
                  "100.64.0.0/10",
                  "169.254.0.0/16",
                  "::1/128",
                  "fe80::/64",
                  "fc00::/7"
                ],
                "enabled": true
              },
              "logging": {
                "rootLogLevel": "WARNING",
                "sqlLogLevel": "WARNING",
                "synapseLogLevel": "WARNING"
              },
              "presence": true,
              "registration": {
                "allowGuests": false,
                "autoJoinRooms": [],
                "enabled": false
              },
              "retentionPeriod": "7d",
              "search": true,
              "security": {
                "surpressKeyServerWarning": true
              },
              "serverName": "example.com",
              "telemetry": false,
              "uploads": {
                "maxPixels": "32M",
                "maxSize": "10M"
              },
              "urlPreviews": {
                "enabled": false,
                "rules": {
                  "ip": {
                    "blacklist": [
                      "127.0.0.0/8",
                      "10.0.0.0/8",
                      "172.16.0.0/12",
                      "192.168.0.0/16",
                      "100.64.0.0/10",
                      "169.254.0.0/16",
                      "::1/128",
                      "fe80::/64",
                      "fc00::/7"
                    ]
                  },
                  "maxSize": "10M",
                  "url": {}
                }
              }
            },
            "nameOverride": "",
            "networkPolicies": {
              "enabled": true
            },
            "postgresql": {
              "database": "matrix",
              "enabled": true,
              "extraEnv": [],
              "global": {
                "postgresql": {}
              },
              "hostname": "",
              "image": {
                "debug": false,
                "pullPolicy": "IfNotPresent",
                "registry": "docker.io",
                "repository": "bitnami/postgresql",
                "tag": "11.6.0-debian-9-r0"
              },
              "initdbScriptsConfigMap": "{{ .Release.Name }}-postgresql-initdb",
              "ldap": {
                "baseDN": "",
                "bindDN": "",
                "enabled": false,
                "port": "",
                "prefix": "",
                "scheme": "",
                "search_attr": "",
                "search_filter": "",
                "server": "",
                "suffix": "",
                "tls": false,
                "url": ""
              },
              "livenessProbe": {
                "enabled": true,
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5
              },
              "master": {
                "affinity": {},
                "annotations": {},
                "extraInitContainers": "",
                "extraVolumeMounts": [],
                "extraVolumes": [],
                "labels": {},
                "nodeSelector": {},
                "podAnnotations": {},
                "podLabels": {},
                "tolerations": []
              },
              "metrics": {
                "enabled": false,
                "image": {
                  "pullPolicy": "IfNotPresent",
                  "registry": "docker.io",
                  "repository": "bitnami/postgres-exporter",
                  "tag": "0.7.0-debian-9-r12"
                },
                "livenessProbe": {
                  "enabled": true,
                  "failureThreshold": 6,
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 5
                },
                "prometheusRule": {
                  "additionalLabels": {},
                  "enabled": false,
                  "namespace": "",
                  "rules": []
                },
                "readinessProbe": {
                  "enabled": true,
                  "failureThreshold": 6,
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 5
                },
                "securityContext": {
                  "enabled": false,
                  "runAsUser": 1001
                },
                "service": {
                  "annotations": {
                    "prometheus.io/port": "9187",
                    "prometheus.io/scrape": "true"
                  },
                  "type": "ClusterIP"
                },
                "serviceMonitor": {
                  "additionalLabels": {},
                  "enabled": false
                }
              },
              "networkPolicy": {
                "allowExternal": true,
                "enabled": false
              },
              "password": "matrix",
              "persistence": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "annotations": {},
                "enabled": true,
                "mountPath": "/bitnami/postgresql",
                "size": "8Gi",
                "subPath": ""
              },
              "port": 5432,
              "postgresqlDataDir": "/bitnami/postgresql/data",
              "postgresqlPassword": "ChangeMe!",
              "postgresqlUsername": "postgres",
              "readinessProbe": {
                "enabled": true,
                "failureThreshold": 6,
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5
              },
              "replication": {
                "applicationName": "my_application",
                "enabled": false,
                "numSynchronousReplicas": 0,
                "password": "repl_password",
                "slaveReplicas": 1,
                "synchronousCommit": "off",
                "user": "repl_user"
              },
              "resources": {
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                }
              },
              "securityContext": {
                "enabled": true,
                "fsGroup": 1000,
                "runAsUser": 1000
              },
              "service": {
                "annotations": {},
                "port": 5432,
                "type": "ClusterIP"
              },
              "serviceAccount": {
                "enabled": false
              },
              "shmVolume": {
                "enabled": true
              },
              "slave": {
                "affinity": {},
                "annotations": {},
                "extraInitContainers": "",
                "extraVolumeMounts": [],
                "extraVolumes": [],
                "labels": {},
                "nodeSelector": {},
                "podAnnotations": {},
                "podLabels": {},
                "tolerations": []
              },
              "ssl": false,
              "sslMode": "prefer",
              "updateStrategy": {
                "type": "RollingUpdate"
              },
              "username": "matrix",
              "volumePermissions": {
                "enabled": true,
                "image": {
                  "pullPolicy": "Always",
                  "registry": "docker.io",
                  "repository": "bitnami/minideb",
                  "tag": "stretch"
                },
                "securityContext": {
                  "runAsUser": 0
                }
              }
            },
            "riot": {
              "branding": {
                "authFooterLinks": [],
                "authHeaderLogoUrl": "",
                "brand": "Element",
                "welcomeBackgroundUrl": ""
              },
              "enabled": true,
              "image": {
                "pullPolicy": "IfNotPresent",
                "repository": "vectorim/riot-web",
                "tag": "v1.7.30"
              },
              "integrations": {
                "api": "https://scalar.vector.im/api",
                "enabled": true,
                "ui": "https://scalar.vector.im/",
                "widgets": [
                  "https://scalar.vector.im/_matrix/integrations/v1",
                  "https://scalar.vector.im/api",
                  "https://scalar-staging.vector.im/_matrix/integrations/v1",
                  "https://scalar-staging.vector.im/api",
                  "https://scalar-staging.riot.im/scalar/api"
                ]
              },
              "labels": {
                "component": "element"
              },
              "labs": [
                "feature_new_spinner",
                "feature_pinning",
                "feature_custom_status",
                "feature_custom_tags",
                "feature_state_counters",
                "feature_many_integration_managers",
                "feature_mjolnir",
                "feature_dm_verification",
                "feature_bridge_state",
                "feature_presence_in_room_list",
                "feature_custom_themes"
              ],
              "permalinkPrefix": "https://matrix.to",
              "probes": {
                "liveness": {},
                "readiness": {},
                "startup": {}
              },
              "replicaCount": 1,
              "resources": {},
              "roomDirectoryServers": [
                "matrix.org"
              ],
              "service": {
                "port": 80,
                "type": "ClusterIP"
              },
              "welcomeUserId": ""
            },
            "synapse": {
              "image": {
                "pullPolicy": "IfNotPresent",
                "repository": "matrixdotorg/synapse",
                "tag": "v1.35.1"
              },
              "labels": {
                "component": "synapse"
              },
              "metrics": {
                "annotations": true,
                "enabled": true,
                "port": 9092
              },
              "probes": {
                "liveness": {
                  "periodSeconds": 10,
                  "timeoutSeconds": 5
                },
                "readiness": {
                  "periodSeconds": 10,
                  "timeoutSeconds": 5
                },
                "startup": {
                  "failureThreshold": 6,
                  "periodSeconds": 5,
                  "timeoutSeconds": 5
                }
              },
              "replicaCount": 1,
              "resources": {},
              "service": {
                "federation": {
                  "port": 80,
                  "type": "ClusterIP"
                },
                "port": 80,
                "type": "ClusterIP"
              }
            },
            "volumes": {
              "media": {
                "capacity": "10Gi",
                "storageClass": ""
              },
              "signingKey": {
                "capacity": "1Mi",
                "storageClass": ""
              }
            }
          }
        }
      ]
    capabilities: Basic Install
    certified: 'false'
    categories: Developer Tools
    operators.operatorframework.io/builder: operator-sdk-v1.7.1+git
    operators.operatorframework.io/project_layout: helm.sdk.operatorframework.io/v1
    containerImage: 'quay.io/mgoerens/synapse-helm:v0.0.11'
    repository: https://github.com/opdev/synapse-helm
  name: synapse-helm.v0.0.1
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - kind: Synapse
      name: synapses.charts.opdev.io
      version: v1alpha1
      resources:
      - kind: ConfigMap
        version: v1
      - kind: Deployment
        version: apps/v1
      - kind: Ingress
        version: networking.k8s.io/v1
      - kind: NetworkPolicy
        version: networking.k8s.io/v1
      - kind: PersistentVolumeClaim
        version: v1
      - kind: PrometheusRule
        version: monitoring.coreos.com/v1
      - kind: RoleBinding
        version: rbac.authorization.k8s.io/v1
      - kind: Secret
        version: v1
      - kind: Service
        version: v1
      - kind: ServiceAccount
        version: v1
      - kind: ServiceMonitor
        version: monitoring.coreos.com/v1
      - kind: StatefulSet
        version: v1
      specDescriptors:
      - description: Runtime configuration for Synapse and settings related to the Matrix protocol
        displayName: Matrix
        path: matrix
      - description: Domain name of the server
        displayName: Server name
        path: matrix.serverName
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:text'
      - description: Persistent volumes configuration
        displayName: Volumes
        path: volumes
      - description: Ingress configuration
        displayName: Ingress
        path: ingress
      - description: PostgreSQL Database Configuration
        displayName: PostreSQL
        path: postgresql
      - description: Whether to deploy a postgresql instance alongside Synapse. If disabled, make sure to configure a hostname and credentials in the spec.postgresql section.
        displayName: PostgreSQL enabled
        path: postgresql.enabled
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:booleanSwitch'
      - description: Root password to setup and connect to the PostgreSQL instance
        displayName: PostgreSQL password
        path: postgresql.postgresqlPassword
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:text'
      - description: Username to connect to the PostgreSQL database
        displayName: PostgreSQL username
        path: postgresql.username
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:text'
      - description: Password to connect to the PostgreSQL database
        displayName: PostgreSQL password
        path: postgresql.password
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:text'
      - description: Name of the postreSQL database to setup and connect to.
        displayName: PostgreSQL database
        path: postgresql.database
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:text'
      - description: If postgresql.enabled is set to false, set the hostname of the PostreSQL instance to connect to.
        displayName: PostgreSQL hostname
        path: postgresql.hostname
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:text'
      - description: If postgresql.enabled is set to false, set the port on which to access the PostreSQL instance.
        displayName: PostgreSQL port
        path: postgresql.port
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:number'
      - description: Synapse Kubernetes resource settings
        displayName: Synapse
        path: synapse
      - description: Element (formerly Riot Web) client configuration
        displayName: Riot
        path: riot
      - description: Set to false to disable a deployment of Element. Users will still be able to connect via any other instances of Element (such as https://app.element.io), Element Desktop, or any other Matrix clients
        displayName: Riot enabled
        path: riot.enabled
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:booleanSwitch'
      - description: Settings for Coturn TURN relay, used for routing voice calls
        displayName: Coturn
        path: coturn
      - description: Set to false to disable the deployment of Coturn
        displayName: Coturn enabled
        path: riot.enabled
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:booleanSwitch'
      - description: Shared secret for communication between Synapse and Coturn.
        displayName: Coturn shared secret
        path: coturn.sharedSecret
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:text'
      - description: Settings for email notifications
        displayName: Mail
        path: mail
      - description: Set to false to disable all email notifications. If enabled, either enable the Exim relay or configure an external mail server below.
        displayName: Mail enabled
        path: mail.enabled
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:booleanSwitch'
      - description: Bridges settings
        displayName: Bridges
        path: bridges
      - description: Boolean to set to true if the CR is being deployed on an OpenShift cluster.
        displayName: IsOpenshift
        path: isOpenshift
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:booleanSwitch'
      - description: imagePullSecrets
        displayName: imagePullSecrets
        path: imagePullSecrets
      - description: nameOverride
        displayName: nameOverride
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:text'
        path: nameOverride
      - description: networkPolicies
        displayName: networkPolicies
        path: networkPolicies
      - description: fullnameOverride
        displayName: fullnameOverride
        path: fullnameOverride
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:text'
      statusDescriptors:
      - description: descriptions
        displayName: Descriptions
        path: descriptions
  description: |-
    ## Helm based operator for Synapse

    Currently in early alpha !

    This operator automates the deployment of Synapse, a reference homeserver
    implementation of a Matrix, on Kubernetes.

    It supports the deployment of:

    - Synapse
    - (Optional) Riot Web
    - (Optional) Choice of lightweight Exim relay or external mail server for
      email notifications
    - (Optional) Coturn TURN server for VoIP calls
    - (Optional) PostgreSQL cluster via stable/postgresql chart

    Credit to @dacruz21 for the original Helm chart powering this Operator.

  displayName: synapse-helm
  icon:
  - base64data: "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"
    mediatype: "image/png"
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - get
        - apiGroups:
          - ""
          resources:
          - secrets
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
        - apiGroups:
          - charts.opdev.io
          resources:
          - synapses
          - synapses/status
          - synapses/finalizers
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - networking.k8s.io
          resources:
          - ingresses
          - networkpolicies
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - configmaps
          - persistentvolumeclaims
          - secrets
          - services
          verbs:
          - '*'
        - apiGroups:
          - apps
          resources:
          - daemonsets
          - deployments
          - statefulsets
          verbs:
          - '*'
        - apiGroups:
          - rbac.authorization.k8s.io
          resources:
          - rolebindings
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - rbac.authorization.k8s.io
          resourceNames:
          - system:openshift:scc:privileged
          resources:
          - clusterroles
          verbs:
          - bind
        - apiGroups:
          - authentication.k8s.io
          resources:
          - tokenreviews
          verbs:
          - create
        - apiGroups:
          - authorization.k8s.io
          resources:
          - subjectaccessreviews
          verbs:
          - create
        serviceAccountName: synapse-helm-controller-manager
      deployments:
      - name: synapse-helm-controller-manager
        spec:
          replicas: 1
          selector:
            matchLabels:
              control-plane: controller-manager
          strategy: {}
          template:
            metadata:
              labels:
                control-plane: controller-manager
            spec:
              containers:
              - args:
                - --secure-listen-address=0.0.0.0:8443
                - --upstream=http://127.0.0.1:8080/
                - --logtostderr=true
                - --v=10
                image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
                name: kube-rbac-proxy
                ports:
                - containerPort: 8443
                  name: https
                resources: {}
              - args:
                - --health-probe-bind-address=:8081
                - --metrics-bind-address=127.0.0.1:8080
                - --leader-elect
                - --leader-election-id=synapse-helm
                image: quay.io/mgoerens/synapse-helm:v0.0.11
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: 8081
                  initialDelaySeconds: 15
                  periodSeconds: 20
                name: manager
                readinessProbe:
                  httpGet:
                    path: /readyz
                    port: 8081
                  initialDelaySeconds: 5
                  periodSeconds: 10
                resources:
                  limits:
                    cpu: 100m
                    memory: 1Gi
                  requests:
                    cpu: 100m
                    memory: 60Mi
                securityContext:
                  allowPrivilegeEscalation: false
              securityContext:
                runAsNonRoot: true
              serviceAccountName: synapse-helm-controller-manager
              terminationGracePeriodSeconds: 10
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
          - patch
        serviceAccountName: synapse-helm-controller-manager
    strategy: deployment
  installModes:
  - supported: false
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - synapse
  - matrix
  - helm
  links:
  - name: Helm Synapse Operator repository
    url: https://github.com/opdev/synapse-helm
  - name: Base Helm chart
    url: https://github.com/mgoerens/matrix-chart
  - name: Synapse repository
    url: https://github.com/matrix-org/synapse
  maintainers:
  - email: mgoerens@redhat.com
    name: 'Matthias Goerens'
  maturity: alpha
  minKubeVersion: 1.19.0
  provider:
    name: Community
  version: 0.0.1
