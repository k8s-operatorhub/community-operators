apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.16.2
  creationTimestamp: null
  name: workgroups.athena.services.k8s.aws
spec:
  group: athena.services.k8s.aws
  names:
    kind: WorkGroup
    listKind: WorkGroupList
    plural: workgroups
    singular: workgroup
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: WorkGroup is the Schema for the WorkGroups API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: |-
              WorkGroupSpec defines the desired state of WorkGroup.

              A workgroup, which contains a name, description, creation time, state, and
              other configuration, listed under WorkGroup$Configuration. Each workgroup
              enables you to isolate queries for you or your group of users from other
              queries in the same account, to configure the query results location and
              the encryption configuration (known as workgroup settings), to enable sending
              query metrics to Amazon CloudWatch, and to establish per-query data usage
              control limits for all queries in a workgroup. The workgroup settings override
              is specified in EnforceWorkGroupConfiguration (true/false) in the WorkGroupConfiguration.
              See WorkGroupConfiguration$EnforceWorkGroupConfiguration.
            properties:
              configuration:
                description: |-
                  Contains configuration information for creating an Athena SQL workgroup or
                  Spark enabled Athena workgroup. Athena SQL workgroup configuration includes
                  the location in Amazon S3 where query and calculation results are stored,
                  the encryption configuration, if any, used for encrypting query results,
                  whether the Amazon CloudWatch Metrics are enabled for the workgroup, the
                  limit for the amount of bytes scanned (cutoff) per query, if it is specified,
                  and whether workgroup's settings (specified with EnforceWorkGroupConfiguration)
                  in the WorkGroupConfiguration override client-side settings. See WorkGroupConfiguration$EnforceWorkGroupConfiguration.
                properties:
                  additionalConfiguration:
                    type: string
                  bytesScannedCutoffPerQuery:
                    format: int64
                    type: integer
                  customerContentEncryptionConfiguration:
                    description: |-
                      Specifies the customer managed KMS key that is used to encrypt the user's
                      data stores in Athena. When an Amazon Web Services managed key is used, this
                      value is null. This setting does not apply to Athena SQL workgroups.
                    properties:
                      kmsKey:
                        type: string
                    type: object
                  enableMinimumEncryptionConfiguration:
                    type: boolean
                  enforceWorkGroupConfiguration:
                    type: boolean
                  engineVersion:
                    description: |-
                      The Athena engine version for running queries, or the PySpark engine version
                      for running sessions.
                    properties:
                      effectiveEngineVersion:
                        type: string
                      selectedEngineVersion:
                        type: string
                    type: object
                  executionRole:
                    type: string
                  identityCenterConfiguration:
                    description: Specifies whether the workgroup is IAM Identity Center
                      supported.
                    properties:
                      enableIdentityCenter:
                        type: boolean
                      identityCenterInstanceARN:
                        type: string
                    type: object
                  publishCloudWatchMetricsEnabled:
                    type: boolean
                  queryResultsS3AccessGrantsConfiguration:
                    description: Specifies whether Amazon S3 access grants are enabled
                      for query results.
                    properties:
                      authenticationType:
                        type: string
                      createUserLevelPrefix:
                        type: boolean
                      enableS3AccessGrants:
                        type: boolean
                    type: object
                  requesterPaysEnabled:
                    type: boolean
                  resultConfiguration:
                    description: |-
                      The location in Amazon S3 where query and calculation results are stored
                      and the encryption option, if any, used for query and calculation results.
                      These are known as "client-side settings". If workgroup settings override
                      client-side settings, then the query uses the workgroup settings.
                    properties:
                      aclConfiguration:
                        description: |-
                          Indicates that an Amazon S3 canned ACL should be set to control ownership
                          of stored query results. When Athena stores query results in Amazon S3, the
                          canned ACL is set with the x-amz-acl request header. For more information
                          about S3 Object Ownership, see Object Ownership settings (https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html#object-ownership-overview)
                          in the Amazon S3 User Guide.
                        properties:
                          s3ACLOption:
                            type: string
                        type: object
                      encryptionConfiguration:
                        description: |-
                          If query and calculation results are encrypted in Amazon S3, indicates the
                          encryption option used (for example, SSE_KMS or CSE_KMS) and key information.
                        properties:
                          encryptionOption:
                            type: string
                          kmsKey:
                            type: string
                        type: object
                      expectedBucketOwner:
                        type: string
                      outputLocation:
                        type: string
                    type: object
                type: object
              description:
                description: The workgroup description.
                type: string
              name:
                description: The workgroup name.
                type: string
              tags:
                description: A list of comma separated tags to add to the workgroup
                  that is created.
                items:
                  description: |-
                    A label that you assign to a resource. Athena resources include workgroups,
                    data catalogs, and capacity reservations. Each tag consists of a key and
                    an optional value, both of which you define. For example, you can use tags
                    to categorize Athena resources by purpose, owner, or environment. Use a consistent
                    set of tag keys to make it easier to search and filter the resources in your
                    account. For best practices, see Tagging Best Practices (https://docs.aws.amazon.com/whitepapers/latest/tagging-best-practices/tagging-best-practices.html).
                    Tag keys can be from 1 to 128 UTF-8 Unicode characters, and tag values can
                    be from 0 to 256 UTF-8 Unicode characters. Tags can use letters and numbers
                    representable in UTF-8, and the following characters: + - = . _ : / @. Tag
                    keys and values are case-sensitive. Tag keys must be unique per resource.
                    If you specify more than one tag, separate them by commas.
                  properties:
                    key:
                      type: string
                    value:
                      type: string
                  type: object
                type: array
            required:
            - name
            type: object
          status:
            description: WorkGroupStatus defines the observed state of WorkGroup
            properties:
              ackResourceMetadata:
                description: |-
                  All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
                  that is used to contain resource sync state, account ownership,
                  constructed ARN for the resource
                properties:
                  arn:
                    description: |-
                      ARN is the Amazon Resource Name for the resource. This is a
                      globally-unique identifier and is set only by the ACK service controller
                      once the controller has orchestrated the creation of the resource OR
                      when it has verified that an "adopted" resource (a resource where the
                      ARN annotation was set by the Kubernetes user on the CR) exists and
                      matches the supplied CR's Spec field values.
                      https://github.com/aws/aws-controllers-k8s/issues/270
                    type: string
                  ownerAccountID:
                    description: |-
                      OwnerAccountID is the AWS Account ID of the account that owns the
                      backend AWS service API resource.
                    type: string
                  region:
                    description: Region is the AWS region in which the resource exists
                      or will exist.
                    type: string
                required:
                - ownerAccountID
                - region
                type: object
              conditions:
                description: |-
                  All CRS managed by ACK have a common `Status.Conditions` member that
                  contains a collection of `ackv1alpha1.Condition` objects that describe
                  the various terminal states of the CR and its backend AWS service API
                  resource
                items:
                  description: |-
                    Condition is the common struct used by all CRDs managed by ACK service
                    controllers to indicate terminal states  of the CR and its backend AWS
                    service API resource
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type is the type of the Condition
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
