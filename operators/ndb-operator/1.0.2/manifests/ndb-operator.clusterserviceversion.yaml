apiVersion: operators.coreos.com/v1alpha1
ddapiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
    annotations:
        alm-examples: '[{"apiVersion": "mysql.oracle.com/v1","kind": "NdbCluster","metadata": {"name": "example-ndb"},"spec": {"redundancyLevel": 2,"dataNode": {"nodeCount": 2},"mysqlNode": {"nodeCount":2}}}]'
        capabilities: Seamless Upgrades
        categories: Database
        containerImage: container-registry.oracle.com/mysql/community-ndb-operator:8.0.33-1.0.2
        createdAt: "2023-05-14T16:09:43Z"
        description: The MySQL NDB Operator is a Kubernetes operator for managing a MySQL NDB Cluster setup inside a Kubernetes Cluster.
        operators.operatorframework.io/builder: operator-sdk-v1.26.0
        operators.operatorframework.io/project_layout: unknown
    name: ndb-operator.v1.0.2
    namespace: placeholder
spec:
    apiservicedefinitions: {}
    customresourcedefinitions:
        owned:
            - description: Instance of a Ndb Cluster
              displayName: NdbCluster
              kind: NdbCluster
              name: ndbclusters.mysql.oracle.com
              resources:
                - kind: Deployment
                  version: v1
                - kind: Service
                  version: v1
                - kind: ReplicaSet
                  version: v1
                - kind: Pod
                  version: v1
                - kind: Secret
                  version: v1
                - kind: ConfigMap
                  version: v1
              version: v1
    description: "## NdbCluster Custom Resource\nThe NdbCluster custom resource is defined with custom fields that map to the configuration of a MySQL Cluster. To deploy a MySQL Cluster inside the K8s Cluster, an NdbCluster object with the desired configuration of the MySQL Cluster has to be created in the K8s Cluster. The NDB Operator watches for any changes made to any NdbCluster objects and will receive an event when the NdbCluster object is created in the K8s Cluster. It will then start deploying the MySQL Cluster, with the specified configuration, inside the K8s Cluster using native Kubernetes workloads and resources. Once the MySQL Cluster is ready, the NdbCluster resource can be further modified to make changes to the MySQL Cluster configuration. The Operator will receive this event as well and will update the configuration of the already running MySQL Cluster.\n\nThe documentation at [NdbCluster-CRD.md](https://github.com/mysql/mysql-ndb-operator/blob/main/docs/NdbCluster-CRD.md) explains the various custom fields of the NdbCluster CRD and the effect they have on the MySQL Cluster configuration. The [examples](https://github.com/mysql/mysql-ndb-operator/tree/main/docs/examples) folder has a few examples of the NdbCluster resource objects which can be used to deploy MySQL Cluster inside the K8s Cluster.\n## Deploy a simple MySQL Cluster\n\nThe [examples/example-ndb.yaml](https://github.com/mysql/mysql-ndb-operator/blob/main/docs/examples/example-ndb.yaml) file has a NdbCluster object example-ndb that defines a simple MySQL Cluster with 2 data nodes and 2 MySQL Servers. To create this object in the default namespace of the K8s Cluster, run this command from the root of the repo :\n```\nkubectl apply -f docs/examples/example-ndb.yaml\n```\n\nVarious NdbCluster status fields report back the actual status of the MySQL Cluster running inside the K8s Cluster. Wait for the MySQL Cluster nodes to be started and become ready using the [UpToDate](https://github.com/mysql/mysql-ndb-operator/blob/main/docs/NdbCluster-CRD.md#ndbclusterconditiontypestring-alias) Condition defined in the NdbCluster object status :\n```\nkubectl wait --for=condition=UpToDate ndb example-ndb --timeout=10m\n```\n    \nThe MySQL Cluster is ready for transactions once the NdbCluster is UpToDate, i.e. the UpToDate condition becomes true.\n\nAt any point, a brief status of an NdbCluster object can be viewed using kubectl get ndb command.\n```\nkubectl get ndb example-ndb\n```\n\nThe output of the command gives a short summary the MySQL Cluster nodes controlled by the respective NdbCluster object.\n```\nNAME          REPLICA   MANAGEMENT NODES   DATA NODES   MYSQL SERVERS   AGE   UP-TO-DATE\nexample-ndb   2         Ready:2/2          Ready:2/2    Ready:2/2       3m    True\n```\n\nTo list all the pods created by the NDB Operator, run :\n```\nkubectl get pods -l mysql.oracle.com/v1=example-ndb\n```\n\nFor example-ndb NdbCluster object, two management nodes (*-mgmd-* pods), two multi-threaded data nodes (*-ndbmtd-* pods) and two MySQL Servers (*-mysqld-*) would have been created by the NDB operator :\n```\nNAME                   READY   STATUS    RESTARTS   AGE\nexample-ndb-mgmd-0     1/1     Running   0          3m53s\nexample-ndb-mgmd-1     1/1     Running   0          2m5s\nexample-ndb-mysqld-0   1/1     Running   0          78s\nexample-ndb-mysqld-1   1/1     Running   0          78s\nexample-ndb-ndbmtd-0   1/1     Running   0          3m53s\nexample-ndb-ndbmtd-1   1/1     Running   0          3m53s\n```\nIf running inside a openshift cluster, pods from statefulset \"example-ndb-mysqld\" will not start up. By default openshift runs all the pod with \"restricted\" scc, but the statefulset \"example-ndb-mysqld\" required higher privilege. Use the below command to check the exact scc required\n```\noc get pods example-ndb-mysqld-0 -o yaml | oc adm policy scc-subject-review -f -\n```\nCreate a user account with the scc and set the user to the statefulset \"example-ndb-mysqld\". Below commands creates an user with \"anyuid\" and assign it to the statefulset.\n```\noc create sa any-uid-user\noc adm policy add-scc-to-user anyuid -z any-uid-user\noc set sa sts example-ndb-mysqld any-uid-user\n```\n## Connect to the MySQL Cluster\n\nThe NDB Operator, by default, creates few Services to expose the services offered by the MySQL Cluster nodes within the Kubernetes Cluster.\n```\nkubectl get services -l mysql.oracle.com/v1=example-ndb\n```\n\nThe above command will generate an output similar to :\n```\nNAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\nexample-ndb-mgmd     ClusterIP   10.100.207.255   <none>        1186/TCP   5m\nexample-ndb-mysqld   ClusterIP   10.103.182.157   <none>        3306/TCP   5m\nexample-ndb-ndbmtd   ClusterIP   None             <none>        1186/TCP   5m\n```\n\nThe NDB Operator will also create a root user with a random password on all the MySQL Servers. The root password will be stored in a K8s Secret which can be retrieved from the NdbCluster object status :\n```\nkubectl get ndb example-ndb -o jsonpath={.status.generatedRootPasswordSecretName}\n```\n\nTo extract and decode the password from the Secret :\n```\nbase64 -d <<< \\\n$(kubectl get secret example-ndb-mysqld-root-password \\\n-o jsonpath={.data.password})\n```\n\nOne can also specify the password and host to be used with the root account via the NdbCluster spec. See the [CRD documentation](https://github.com/mysql/mysql-ndb-operator/blob/main/docs/NdbCluster-CRD.md#ndbmysqldspec) for more details on this.\n## Access MySQL Cluster from inside K8s\n\nTo connect to the Management and MySQL Servers from within the Kubernetes Cluster, you can use the example-ndb-mgmd and example-ndb-mysqld services as the MySQL Cluster connectstring and MySQL host respectively. You can also use the mgmd and mysqld pods' hostnames to directly connect to that particular pod. The mysql, ndb_mgm clients and any other ndb tools will work as expected.\n\nA demonstration is available at [connect-from-inside-k8s-demo.md](https://github.com/mysql/mysql-ndb-operator/blob/main/docs/connect-from-inside-k8s-demo.md).\n## Access MySQL Cluster from outside K8s\n\nBy default, the Management and MySQL services created by the NDB Operator are of type [ClusterIP](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types) and are accessible only from within the K8s Cluster. To expose them outside the K8s Cluster, the services have to be upgraded into a LoadBalancer type. This can be done by setting the spec.managementNode.enableLoadBalancer and spec.mysqlNode.enableLoadBalancer fields of the NdbCluster resource to true. These options can be enabled when the NdbCluster resource object is created or via an update to the object when the MySQL Cluster is already running.\n\nOnce enabled, the previously ClusterIP type example-ndb-mgmd and example-ndb-mysqld services will be upgraded to LoadBalancer type, and they will be available at the external IP assigned to them by the cloud provider.\n\nAnother way to access these services without enabling the LoadBalancers support is to use the kubectl port-forward command.\n\nIn both ways, only the mysql and ndb_mgm clients work. Any NDB tool which uses the NDBAPI to connect to the MySQL data nodes will not work as expected from outside the K8s Cluster.\n\nA demonstration is available at [connect-from-outside-k8s-demo.md](https://github.com/mysql/mysql-ndb-operator/blob/main/docs/connect-from-outside-k8s-demo.md).\n## Updating MySQL Cluster Configuration\n\nOnce a MySQL Cluster has been deployed by the NDB Operator inside the K8s Cluster, its configuration can be updated by updating the spec of the NdbCluster resource object that represents it. The NDB Operator will pick up any changes made to the NdbCluster resource object and will apply the updated configuration to the respective MySQL Cluster. The NDB Operator takes care of updating the MySQL Cluster config file and restarting all the management/data nodes if required. When the update is being handled by the NdbOperator, it will set the UpToDate condition of the NdbCluster resource object to false and will not accept any further updates until it completes the current one.\n\nThe kubectl get ndb example-ndb command will report the UpToDate status of an NdbCluster. It can be used to check if the current update has been completed.\n```\n$ kubectl get ndb example-ndb\nNAME          REPLICA   MANAGEMENT NODES   DATA NODES   MYSQL SERVERS   AGE   UP-TO-DATE\nexample-ndb   2         Ready:2/2          Ready:1/2    Ready:2/2       10m   False\n```\n\nThe UpToDate condition can also be used to wait for the operator to complete the update.\n```\nkubectl wait --for=condition=UpToDate ndb example-ndb --timeout=10m\n```\n\nOnce the update is complete, the UpToDate condition will be set back to true by the operator.\n```\n$ kubectl get ndb example-ndb\nNAME          REPLICA   MANAGEMENT NODES   DATA NODES   MYSQL SERVERS   AGE      UP-TO-DATE\nexample-ndb   2         Ready:2/2          Ready:2/2    Ready:2/2       10m50s   True\n```\n\n## Delete a MySQL Cluster\n\nTo stop and remove the MySQL Cluster running inside the K8s Cluster, delete the NdbCluster resource object.\n```\nkubectl delete -f docs/examples/example-ndb.yaml\n```\n\n(or)\n```\nkubectl delete ndb example-ndb\n```\n\nThis will delete all the data, the pods running the MySQL Cluster nodes and also delete all other associated K8s resources created by the NDB Operator.\n"
    displayName: Ndb Operator
    icon:
        - base64data: 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
          mediatype: image/png
    install:
        spec:
            clusterPermissions:
                - serviceAccountName: ndb-operator-app-sa
                  rules:
                    - apiGroups:
                        - ""
                      resources:
                        - pods
                      verbs:
                        - list
                        - watch
                        - delete
                    - apiGroups:
                        - ""
                      resources:
                        - services
                      verbs:
                        - list
                        - watch
                        - create
                        - patch
                        - delete
                    - apiGroups:
                        - ""
                      resources:
                        - configmaps
                      verbs:
                        - get
                        - create
                        - patch
                        - list
                        - watch
                    - apiGroups:
                        - ""
                      resources:
                        - secrets
                      verbs:
                        - get
                        - create
                        - delete
                    - apiGroups:
                        - events.k8s.io
                      resources:
                        - events
                      verbs:
                        - create
                        - patch
                    - apiGroups:
                        - apps
                      resources:
                        - statefulsets
                      verbs:
                        - create
                        - patch
                        - list
                        - watch
                        - delete
                    - apiGroups:
                        - policy
                      resources:
                        - poddisruptionbudgets
                      verbs:
                        - list
                        - watch
                        - create
                    - apiGroups:
                        - mysql.oracle.com
                      resources:
                        - ndbclusters
                        - ndbclusters/status
                      verbs:
                        - get
                        - list
                        - patch
                        - update
                        - watch
                - serviceAccountName: ndb-operator-webhook-sa
                  rules:
                    - apiGroups:
                        - admissionregistration.k8s.io
                      resources:
                        - validatingwebhookconfigurations
                        - mutatingwebhookconfigurations
                      verbs:
                        - list
                        - patch
                    - apiGroups:
                        - ""
                      resources:
                        - secrets
                      verbs:
                        - get
            deployments:
                - label:
                    app: ndb-operator-webhook-deployment
                    release: 8.0.33-1.0.2
                  name: ndb-operator-webhook-server
                  spec:
                    selector:
                        matchLabels:
                            app: ndb-operator-webhook-server
                    strategy:
                        rollingUpdate:
                            maxUnavailable: 0
                    template:
                        metadata:
                            labels:
                                app: ndb-operator-webhook-server
                        spec:
                            containers:
                                - args:
                                    - -service=ndb-operator-webhook-service
                                  command:
                                    - ndb-operator-webhook
                                  image: container-registry.oracle.com/mysql/community-ndb-operator:8.0.33-1.0.2
                                  imagePullPolicy: IfNotPresent
                                  name: ndb-operator-webhook
                                  ports:
                                    - containerPort: 9443
                                  readinessProbe:
                                    httpGet:
                                        path: /health
                                        port: 9443
                                        scheme: HTTPS
                                  resources: {}
                            serviceAccountName: ndb-operator-webhook-sa
                - label:
                    app: ndb-operator
                    release: 8.0.33-1.0.2
                  name: ndb-operator-app
                  spec:
                    replicas: 1
                    selector:
                        matchLabels:
                            app: ndb-operator
                    strategy:
                        rollingUpdate:
                            maxUnavailable: 0
                    template:
                        metadata:
                            labels:
                                app: ndb-operator
                        spec:
                            containers:
                                - args:
                                    - -cluster-scoped=true
                                  command:
                                    - ndb-operator
                                  env:
                                    - name: NDB_OPERATOR_IMAGE
                                      value: container-registry.oracle.com/mysql/community-ndb-operator:8.0.33-1.0.2
                                  image: container-registry.oracle.com/mysql/community-ndb-operator:8.0.33-1.0.2
                                  imagePullPolicy: IfNotPresent
                                  name: ndb-operator-controller
                                  ports:
                                    - containerPort: 1186
                                  resources: {}
                            hostname: ndb-operator-pod
                            serviceAccountName: ndb-operator-app-sa
                            subdomain: ndb-operator-svc
        strategy: deployment
    installModes:
        - supported: true
          type: OwnNamespace
        - supported: true
          type: SingleNamespace
        - supported: true
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
    keywords:
        - mysql
        - ndb
        - in-memory
    links:
        - name: Document
          url: https://dev.mysql.com/doc/ndb-operator/en/
    maintainers:
        - email: dinesh.prakash@oracle.com
          name: DineshSuryaPrakash
    maturity: alpha
    minKubeVersion: 1.19.0
    provider:
        name: MySQL
        url: https://artifacthub.io/packages/helm/mysql-ndb-operator/ndb-operator
    replaces: ""
    version: 1.0.2
    webhookdefinitions:
        - admissionReviewVersions:
            - v1
          containerPort: 9443
          deploymentName: ndb-operator-webhook-server
          failurePolicy: Fail
          generateName: mutating-webhook.ndbcluster.mysql.oracle.com
          rules:
            - apiGroups:
                - mysql.oracle.com
              apiVersions:
                - v1
              operations:
                - CREATE
                - UPDATE
              resources:
                - ndbclusters
          sideEffects: None
          targetPort: 0
          type: MutatingAdmissionWebhook
          webhookPath: /ndb/mutate
        - admissionReviewVersions:
            - v1
          containerPort: 9443
          deploymentName: ndb-operator-webhook-server
          failurePolicy: Fail
          generateName: validating-webhook.ndbcluster.mysql.oracle.com
          rules:
            - apiGroups:
                - mysql.oracle.com
              apiVersions:
                - v1
              operations:
                - CREATE
                - UPDATE
              resources:
                - ndbclusters
          sideEffects: None
          targetPort: 0
          type: ValidatingAdmissionWebhook
          webhookPath: /ndb/validate
