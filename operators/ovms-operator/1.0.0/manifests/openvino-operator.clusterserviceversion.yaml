apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples-metadata: >-
      {
      "model-server-sample":{"description":"Example of the model server configuration"}
      }
    alm-examples: |-
      [
        {
          "apiVersion": "intel.com/v1alpha1",
          "kind": "ModelServer",
          "metadata": {
            "name": "model-server-sample"
          },
          "spec": {
            "image_name": "openvino/model_server:2022.1",
            "deployment_parameters": {
              "replicas": 1
            },
            "service_parameters": {
              "grpc_port": 8080,
              "rest_port": 8081
            },
            "models_settings": {
              "single_model_mode": true,
              "config_configmap_name": "",
              "model_config": "",
              "model_name": "resnet",
              "model_path": "gs://ovms-public-eu/resnet50-tf",
              "nireq": 0,
              "plugin_config": "{\"CPU_THROUGHPUT_STREAMS\":1}",
              "batch_size": "",
              "shape": "",
              "model_version_policy": "{\"latest\": { \"num_versions\":1 }}",
              "layout": "",
              "target_device": "CPU",
              "is_stateful": false,
              "idle_sequence_cleanup": false,
              "low_latency_transformation": true,
              "max_sequence_number": 0
            },
            "server_settings": {
              "file_system_poll_wait_seconds": 0,
              "sequence_cleaner_poll_wait_minutes": 0,
              "log_level": "INFO",
              "grpc_workers": 1,
              "rest_workers": 0
            },
            "models_repository": {
              "https_proxy": "",
              "http_proxy": "",
              "storage_type": "google",
              "models_host_path": "",
              "models_volume_claim": "",
              "aws_secret_access_key": "",
              "aws_access_key_id": "",
              "aws_region": "",
              "s3_compat_api_endpoint": "",
              "gcp_creds_secret_name": "",
              "azure_storage_connection_string": ""
            }
          }
        }
      ]
    containerImage: quay.io/openvino/ovms-operator:1.0.0
    capabilities: Basic Install
    categories: "AI/Machine Learning"
    operators.operatorframework.io/builder: operator-sdk-v1.19.1+git
    operators.operatorframework.io/project_layout: helm.sdk.operatorframework.io/v1
  name: openvino-operator.v1.0.0
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
      - kind: ModelServer
        name: modelservers.intel.com
        description: Provides inference serving through gRPC & REST
        displayName: Model Server
        specDescriptors:
          - description: >-
              Select this option for serving a single model.
              For multi model and DAG deployments, a configuration file `config.json` should be added to a config_map resource
            displayName: Is it as single model deployment?
            path: models_settings.single_model_mode
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:booleanSwitch'
          - description: Config map with the model server configuration file. If this field is empty, specify required parameters in `model_settings` section. Configuration config.json file can be created as described as described on https://docs.openvino.ai/latest/ovms_docs_multiple_models.html Create the config_map with this file via a command `oc create configmap ovms-config --from-file config.json`
            displayName: Config map
            path: models_settings.config_configmap_name
            x-descriptors:
              - 'urn:alm:descriptor:io.kubernetes:ConfigMap'
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_settings.single_model_mode:false'
          - description: Path to the configuration file. Set if it is differenet from the default /config/config.json mounted from the config_map resource
            displayName: Config path
            path: models_settings.config_path
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:advanced'
              - 'urn:alm:descriptor:com.tectonic.ui:text'
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_settings.single_model_mode:false'
          - description: Model name to be used in the client calls
            displayName: Model name
            path: models_settings.model_name
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_settings.single_model_mode:true'
          - description: Path to the model repository. The content should include the numberical subfolders with the versions. Use formats like /opt/ml/models/model, gs://bucket/models/model, s3://bucket/models/model or azure://bucket/models/model
            displayName: Model path
            path: models_settings.model_path
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_settings.single_model_mode:true'
          - description: >-
              shape is optional and takes precedence over batch_size. The shape argument changes the model that is enabled in the model server to fit the parameters.
              shape accepts three forms of the values: auto - the model server reloads the model with the shape that matches the input data matrix,
              a tuple, such as (1,3,224,224) - the tuple defines the shape to use for all incoming requests for models with a single input,
              a dictionary of shapes, such as {"input1":"(1,3,224,224)","input2":"(1,3,50:70,50:70)", "input3":"auto"}
              - this option defines the shape of every included input in the model.
              Some models don't support the reshape operation.
              If the model can't be reshaped, it remains in the original parameters and all requests with incompatible input format result in an error.
            displayName: Shape
            path: models_settings.shape
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_settings.single_model_mode:true'
          - description: >-
              By default, the batch size is derived from the model, defined through the OpenVINO Model Optimizer. batch_size is useful for sequential inference requests of the same batch size.
              Some models, such as object detection, don't work correctly with the batch_size parameter. With these models, the output's first dimension doesn't represent the batch size. You can set the batch size for these models by using network reshaping and setting the shape parameter appropriately.
              The default option of using the Model Optimizer to determine the batch size uses the size of the first dimension in the first input for the size. For example, if the input shape is (1, 3, 225, 225), the batch size is set to 1. If you set batch_size to a numerical value or range of values, the model batch size is changed when the service starts.
              batch_size also accepts a value of auto. If you use auto, then the served model batch size is set according to the incoming data at run time. The model is reloaded each time the input data changes the batch size. You might see a delayed response upon the first request.
            displayName: Batch size
            path: models_settings.batch_size
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_settings.single_model_mode:true'
          - description: >-
              Target device to be used to execute the inference or the plugin name for handling multiple devices.
              It could be format like `CPU`, `GPU`, `HDDL`, `AUTO`, `MULTI:CPU,GPU`.
            displayName: Target device
            path: models_settings.target_device
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_settings.single_model_mode:true'
          - description: >-
              Execution tuning parameters for the target device plugin. Parameters should be defined as a json format.
            displayName: Plugin config
            path: models_settings.plugin_config
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_settings.single_model_mode:true'
          - description: >-
              How the model versions should be managed. Possible formats: { "all": {} }, { "latest": { "num_versions":2 }}, { "specific": { "versions":[1, 3] } }
            displayName: Model version policy
            path: models_settings.model_version_policy
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_settings.single_model_mode:true'
              - 'urn:alm:descriptor:com.tectonic.ui:advanced'
          - description: >-
              layout is optional argument which allows to change the layout of model input and output tensors. When specified with single string value - layout change is only applied to single model input. To change multiple model inputs or outputs, you can specify json object with mapping, such as: {"input1":"NHWC:NCHW","input2":"NHWC:NCHW","output1":"NHWC:NCHW"}.
              If not specified, layout is inherited from model.
            displayName: Layout
            path: models_settings.layout
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_settings.single_model_mode:true'
          - description: Size of the queue of inference requests
            displayName: Nireq
            path: models_settings.nireq
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_settings.single_model_mode:true'
              - 'urn:alm:descriptor:com.tectonic.ui:advanced'
          - description: >-
              Does the model preserve the state between inference requests. Stateful models require special handling on the client side to manage the inference sessions.
            displayName: Is stateful
            path: models_settings.is_stateful
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_settings.single_model_mode:true'
              - 'urn:alm:descriptor:com.tectonic.ui:advanced'
          - description: If set to true, model will be subject to periodic sequence cleaner scans.
            displayName: idle_sequence_cleanup
            path: models_settings.idle_sequence_cleanup
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_settings.is_stateful:true'
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_settings.single_model_mode:true'
              - 'urn:alm:descriptor:com.tectonic.ui:advanced'
          - description: If set to true, model server will apply low latency transformation on model load
            displayName: low_latency_transformation
            path: models_settings.low_latency_transformation
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_settings.is_stateful:true'
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_settings.single_model_mode:true'
              - 'urn:alm:descriptor:com.tectonic.ui:advanced'
          - description: Determines how many sequences can be handled concurrently by a model instance.
            displayName: max_sequence_number
            path: models_settings.max_sequence_number
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_settings.is_stateful:true'
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_settings.single_model_mode:true'
              - 'urn:alm:descriptor:com.tectonic.ui:advanced'
          - description: Configuration for available storage types https://docs.openvino.ai/latest/ovms_docs_cloud_storage.html
            displayName: Storage type
            path: models_repository.storage_type
          - displayName: Persistent Volume Claim
            path: models_repository.models_volume_claim
            x-descriptors:
              - 'urn:alm:descriptor:io.kubernetes:PersistentVolumeClaim'
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_repository.storage_type:cluster'
          - description: Host path with models repository to be mounted as /models
            displayName: Host path
            path: models_repository.models_host_path
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_repository.storage_type:cluster'
          - description: Security context to access the models
            displayName: Run as user
            path: models_repository.runAsUser
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_repository.storage_type:cluster'
          - description: Security context to access the models
            displayName: Run as group
            path: models_repository.runAsGroup
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_repository.storage_type:cluster'
          - displayName: Aws access key id
            path: models_repository.aws_access_key_id
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:text'
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_repository.storage_type:S3'
          - displayName: Aws secret access key
            path: models_repository.aws_secret_access_key
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:password'
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_repository.storage_type:S3'
          - displayName: Aws region
            path: models_repository.aws_region
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:text'
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_repository.storage_type:S3'
          - displayName: S3 compatible API endpoint
            path: models_repository.s3_compat_api_endpoint
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:text'
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_repository.storage_type:S3'
          - description: >-
              Secret name including Google Cloud Storage access token. Create the secret resource using the command `oc create secret generic gcpcreds --from-file gcp-creds.json`
            displayName: GCP credentials secret name
            path: models_repository.gcp_creds_secret_name
            x-descriptors:
              - 'urn:alm:descriptor:io.kubernetes:Secret'
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_repository.storage_type:google'
          - displayName: Azure storage connection string
            path: models_repository.azure_storage_connection_string
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:text'
              - 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:models_repository.storage_type:azure'
          - displayName: Replicas
            path: deployment_parameters.replicas
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:podCount'
          - description: Determine the node for scheduling
            displayName: Node affinity
            path: deployment_parameters.node_affinity
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:nodeAffinity'
              - 'urn:alm:descriptor:com.tectonic.ui:advanced'
          - description: Define affinity towards specific pods
            displayName: Pod affinity
            path: deployment_parameters.pod_affinity
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:podAffinity'
              - 'urn:alm:descriptor:com.tectonic.ui:advanced'
          - description: Define anti-affinity towards specific pods
            displayName: Pod antiaffinity
            path: deployment_parameters.pod_antiaffinity
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:podAntiAffinity'
              - 'urn:alm:descriptor:com.tectonic.ui:advanced'
          - displayName: Update strategy
            path: deployment_parameters.update_strategy
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:updateStrategy'
              - 'urn:alm:descriptor:com.tectonic.ui:advanced'
          - description: Number of gRPC servers. Default 1. Increase for multi client, high throughput scenarios
            displayName: GRPC workers
            path: server_settings.grpc_workers
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:advanced'
          - description: Number of worker threads in REST server - has no effect if rest_port is not set. Default value depends on number of CPUs.
            displayName: Rest workers
            path: server_settings.rest_workers
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:advanced'
          - description: >-
              Time interval between two consecutive sequence cleaner scans.
              Default is 5. Zero value disables sequence cleaner.
            displayName: Sequence cleaner poll wait minutes
            path: server_settings.sequence_cleaner_poll_wait_minutes
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:advanced'
        version: v1alpha1
  description: |
    OpenVINO Toolkit Operator manages OpenVINO components in Kubernetes.

    Currently there available components are ModelServer.

    # Model Server
    [OpenVINO™ Model Server](https://github.com/openvinotoolkit/model_server) (OVMS) is a scalable, high-performance solution for serving machine learning models optimized for Intel® architectures. The server provides an inference service via gRPC or REST API for any models trained in a framework that is supported by [OpenVINO](https://software.intel.com/en-us/openvino-toolki://docs.openvino.ai/latest/index.html).
    Model Server configuration parameters is explained [here](https://github.com/openvinotoolkit/operator/blob/main/docs/modelserver_params.md).
    ## Using the cluster
    OpenVINO Model Server can be consumed as a `Service`. It is called like with `ModelServer` resource with `-ovms` suffix.
    The suffix is ommited when `ovms` phrase is included in the name.
    The service exposes gRPC and REST API interfaces to run inference requests.
    ```
    kubectl get pods
    NAME                                        READY   STATUS    RESTARTS   AGE
    model-server-sample-ovms-586f6f76df-dpps4   1/1     Running   0          8h

    kubectl get services
    NAME                       TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)             AGE
    model-server-sample-ovms   ClusterIP   172.25.199.210   <none>        8080/TCP,8081/TCP   8h
    ```

    ## References
    OpenVINO Model Server on [Github](https://github.com/openvinotoolkit/model_server)

    OpenVINO Model Server Operator on [Github](https://github.com/openvinotoolkit/operator)

  displayName: OpenVINO Toolkit Operator
  icon:
  - base64data: 
    mediatype: image/png
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - get
        - apiGroups:
          - ""
          resources:
          - secrets
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
        - apiGroups:
          - intel.com
          resources:
          - modelservers
          - modelservers/status
          - modelservers/finalizers
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - ""
          resources:
          - services
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - apps
          resources:
          - deployments
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - authentication.k8s.io
          resources:
          - tokenreviews
          verbs:
          - create
        - apiGroups:
          - authorization.k8s.io
          resources:
          - subjectaccessreviews
          verbs:
          - create
        serviceAccountName: openvino-operator-controller-manager
      deployments:
      - name: openvino-operator-controller-manager
        spec:
          replicas: 1
          selector:
            matchLabels:
              control-plane: controller-manager
          strategy: {}
          template:
            metadata:
              labels:
                control-plane: controller-manager
            spec:
              containers:
              - args:
                - --secure-listen-address=0.0.0.0:8443
                - --upstream=http://127.0.0.1:8080/
                - --logtostderr=true
                - --v=10
                image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
                name: kube-rbac-proxy
                ports:
                - containerPort: 8443
                  name: https
                resources: {}
              - args:
                  - --health-probe-bind-address=:8081
                  - --metrics-bind-address=127.0.0.1:8080
                  - --leader-elect
                  - --leader-election-id=ovms-operator
                  - --watches-file=watches_k8s.yaml
                image: quay.io/openvino/ovms-operator:1.0.0
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: 8081
                  initialDelaySeconds: 15
                  periodSeconds: 20
                name: manager
                readinessProbe:
                  httpGet:
                    path: /readyz
                    port: 8081
                  initialDelaySeconds: 5
                  periodSeconds: 10
                resources:
                  limits:
                    cpu: 100m
                  requests:
                    cpu: 100m
                    memory: 60Mi
                securityContext:
                  allowPrivilegeEscalation: false
              securityContext:
                runAsNonRoot: true
              serviceAccountName: openvino-operator-controller-manager
              terminationGracePeriodSeconds: 10
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
          - patch
        serviceAccountName: openvino-operator-controller-manager
    strategy: deployment
  installModes:
  - supported: false
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - AI Inference OpenVINO
  links:
  - name: OpenVINO Toolkit Operator
    url: https://github.com/openvinotoolkit/operator
  - name: OpenVINO Model Server
    url: https://github.com/openvinotoolkit/model_server
  maintainers:
  - name: Operator Support
    email: openvino-operator-support@intel.com
  maturity: alpha
  provider:
    name: Intel
  version: 1.0.0
  replaces: ovms-operator.v0.2.0
