apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |
      [
        {
          "apiVersion": "automation.kubensync.com/v1alpha1",
          "kind": "ManagedResource",
          "metadata": {
            "name": "serviceaccount-sample"
          },
          "spec": {
            "namespaceSelector": {
              "regex": "test"
            },
            "template": {
              "literal": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n    name: managed-resource-sa\n    namespace: {{ .Namespace.Name }}\n"
            }
          }
        }
      ]
    capabilities: Seamless Upgrades
    categories: Integration & Delivery
    createdAt: "2024-02-01T20:21:56Z"
    repository: https://github.com/eryalito/kubensync-operator
    operators.operatorframework.io/builder: operator-sdk-v1.28.0
    operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
  name: kubensync.v0.2.0
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - description: ManagedResource is the Schema for the managedresources API
      displayName: Managed Resource
      kind: ManagedResource
      name: managedresources.automation.kubensync.com
      version: v1alpha1
  description: KubeNSync is a Kubernetes operator that helps you automate the creation
    of Kubernetes resources. You can use it to create resources like pull secrets,
    RBAC rules, and operators using Go templates. With KubeNSync, you can define a
    Custom Resource (CR) that contains the template to be rendered and a namespace
    selector in the form of a regex. This allows you to create and manage resources
    in specific namespaces or across the entire cluster.
  displayName: KubeNSync
  icon:
  - base64data: 
    mediatype: image/png
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - automation.kubensync.com
          resources:
          - managedresources
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - automation.kubensync.com
          resources:
          - managedresources/finalizers
          verbs:
          - update
        - apiGroups:
          - automation.kubensync.com
          resources:
          - managedresources/status
          verbs:
          - get
          - patch
          - update
        - apiGroups:
          - authentication.k8s.io
          resources:
          - tokenreviews
          verbs:
          - create
        - apiGroups:
          - authorization.k8s.io
          resources:
          - subjectaccessreviews
          verbs:
          - create
        serviceAccountName: kubensync-controller-manager
      deployments:
      - label:
          app.kubernetes.io/component: manager
          app.kubernetes.io/created-by: kubensync
          app.kubernetes.io/instance: controller-manager
          app.kubernetes.io/managed-by: kustomize
          app.kubernetes.io/name: deployment
          app.kubernetes.io/part-of: kubensync
          control-plane: controller-manager
        name: kubensync-controller-manager
        spec:
          replicas: 1
          selector:
            matchLabels:
              control-plane: controller-manager
          strategy: {}
          template:
            metadata:
              annotations:
                kubectl.kubernetes.io/default-container: manager
              labels:
                control-plane: controller-manager
            spec:
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                    - matchExpressions:
                      - key: kubernetes.io/arch
                        operator: In
                        values:
                        - amd64
                        - arm64
                        - ppc64le
                        - s390x
                      - key: kubernetes.io/os
                        operator: In
                        values:
                        - linux
              containers:
              - args:
                - --secure-listen-address=0.0.0.0:8443
                - --upstream=http://127.0.0.1:8080/
                - --logtostderr=true
                - --v=0
                image: gcr.io/kubebuilder/kube-rbac-proxy@sha256:d4883d7c622683b3319b5e6b3a7edfbf2594c18060131a8bf64504805f875522
                name: kube-rbac-proxy
                ports:
                - containerPort: 8443
                  name: https
                  protocol: TCP
                resources:
                  limits:
                    cpu: 500m
                    memory: 128Mi
                  requests:
                    cpu: 5m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
              - args:
                - --health-probe-bind-address=:8081
                - --metrics-bind-address=127.0.0.1:8080
                - --leader-elect
                command:
                - /manager
                image: ghcr.io/eryalito/kubensync-operator@sha256:f1bb42959f8f4e7577f3ce43bc187dc75ec773c00899e4ef847e7c5b616d8f43
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: 8081
                  initialDelaySeconds: 15
                  periodSeconds: 20
                name: manager
                readinessProbe:
                  httpGet:
                    path: /readyz
                    port: 8081
                  initialDelaySeconds: 5
                  periodSeconds: 10
                resources:
                  limits:
                    cpu: 500m
                    memory: 128Mi
                  requests:
                    cpu: 10m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
              securityContext:
                runAsNonRoot: true
              serviceAccountName: kubensync-controller-manager
              terminationGracePeriodSeconds: 10
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
          - patch
        serviceAccountName: kubensync-controller-manager
    strategy: deployment
  installModes:
  - supported: false
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - namespace
  - automation
  - resources
  - template
  links:
  - name: Docs
    url: https://docs.kubensync.com
  - name: Source Code
    url: https://github.com/eryalito/kubensync-operator
  maintainers:
  - email: eryalito@gmail.com
    name: eryalito
  maturity: alpha
  provider:
    name: eryalito
  version: 0.2.0
