apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
  creationTimestamp: null
  name: fexitprograms.bpfman.io
spec:
  group: bpfman.io
  names:
    kind: FexitProgram
    listKind: FexitProgramList
    plural: fexitprograms
    singular: fexitprogram
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.bpffunctionname
      name: BpfFunctionName
      type: string
    - jsonPath: .spec.nodeselector
      name: NodeSelector
      type: string
    - jsonPath: .status.conditions[0].reason
      name: Status
      type: string
    - jsonPath: .spec.func_name
      name: FunctionName
      priority: 1
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: FexitProgram is the Schema for the FexitPrograms API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: FexitProgramSpec defines the desired state of FexitProgram
            properties:
              bpffunctionname:
                description: BpfFunctionName is the name of the function that is the
                  entry point for the BPF program
                type: string
              bytecode:
                description: Bytecode configures where the bpf program's bytecode
                  should be loaded from.
                properties:
                  image:
                    description: Image used to specify a bytecode container image.
                    properties:
                      imagepullpolicy:
                        default: IfNotPresent
                        description: PullPolicy describes a policy for if/when to
                          pull a bytecode image. Defaults to IfNotPresent.
                        enum:
                        - Always
                        - Never
                        - IfNotPresent
                        type: string
                      imagepullsecret:
                        description: ImagePullSecret is the name of the secret bpfman
                          should use to get remote image repository secrets.
                        properties:
                          name:
                            description: Name of the secret which contains the credentials
                              to access the image repository.
                            type: string
                          namespace:
                            description: Namespace of the secret which contains the
                              credentials to access the image repository.
                            type: string
                        required:
                        - name
                        - namespace
                        type: object
                      url:
                        description: Valid container image URL used to reference a
                          remote bytecode image.
                        type: string
                    required:
                    - url
                    type: object
                  path:
                    description: Path is used to specify a bytecode object via filepath.
                    type: string
                type: object
              func_name:
                description: Function to attach the fexit to.
                type: string
              globaldata:
                additionalProperties:
                  format: byte
                  type: string
                description: GlobalData allows the user to to set global variables
                  when the program is loaded with an array of raw bytes. This is a
                  very low level primitive. The caller is responsible for formatting
                  the byte string appropriately considering such things as size, endianness,
                  alignment and packing of data structures.
                type: object
              mapownerselector:
                description: MapOwnerSelector is used to select the loaded eBPF program
                  this eBPF program will share a map with. The value is a label applied
                  to the BpfProgram to select. The selector must resolve to exactly
                  one instance of a BpfProgram on a given node or the eBPF program
                  will not load.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              nodeselector:
                description: NodeSelector allows the user to specify which nodes to
                  deploy the bpf program to.  This field must be specified, to select
                  all nodes use standard metav1.LabelSelector semantics and make it
                  empty.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
            required:
            - bpffunctionname
            - bytecode
            - func_name
            - nodeselector
            type: object
          status:
            description: FexitProgramStatus defines the observed state of FexitProgram
            properties:
              conditions:
                description: Conditions houses the global cluster state for the FexitProgram.
                  The explicit condition types are defined internally.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
