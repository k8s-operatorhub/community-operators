apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.16.2
  creationTimestamp: null
  name: serverlesscaches.elasticache.services.k8s.aws
spec:
  group: elasticache.services.k8s.aws
  names:
    kind: ServerlessCache
    listKind: ServerlessCacheList
    plural: serverlesscaches
    singular: serverlesscache
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.status
      name: STATUS
      type: string
    - jsonPath: .status.endpoint.address
      name: ENDPOINT
      type: string
    - jsonPath: .status.conditions[?(@.type=="ACK.ResourceSynced")].status
      name: Synced
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ServerlessCache is the Schema for the ServerlessCaches API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: |-
              ServerlessCacheSpec defines the desired state of ServerlessCache.

              The resource representing a serverless cache.
            properties:
              cacheUsageLimits:
                description: |-
                  Sets the cache usage limits for storage and ElastiCache Processing Units
                  for the cache.
                properties:
                  dataStorage:
                    description: The data storage limit.
                    properties:
                      maximum:
                        format: int64
                        type: integer
                      minimum:
                        format: int64
                        type: integer
                      unit:
                        type: string
                    type: object
                  eCPUPerSecond:
                    description: |-
                      The configuration for the number of ElastiCache Processing Units (ECPU) the
                      cache can consume per second.
                    properties:
                      maximum:
                        format: int64
                        type: integer
                      minimum:
                        format: int64
                        type: integer
                    type: object
                type: object
              dailySnapshotTime:
                description: |-
                  The daily time that snapshots will be created from the new serverless cache.
                  By default this number is populated with 0, i.e. no snapshots will be created
                  on an automatic daily basis. Available for Valkey, Redis OSS and Serverless
                  Memcached only.
                type: string
              description:
                description: |-
                  User-provided description for the serverless cache. The default is NULL,
                  i.e. if no description is provided then an empty string will be returned.
                  The maximum length is 255 characters.
                type: string
              engine:
                description: The name of the cache engine to be used for creating
                  the serverless cache.
                type: string
              kmsKeyID:
                description: |-
                  ARN of the customer managed key for encrypting the data at rest. If no KMS
                  key is provided, a default service key is used.
                type: string
              majorEngineVersion:
                description: |-
                  The version of the cache engine that will be used to create the serverless
                  cache.
                type: string
              securityGroupIDs:
                description: |-
                  A list of the one or more VPC security groups to be associated with the serverless
                  cache. The security group will authorize traffic access for the VPC end-point
                  (private-link). If no other information is given this will be the VPCâ€™s
                  Default Security Group that is associated with the cluster VPC end-point.
                items:
                  type: string
                type: array
              securityGroupRefs:
                items:
                  description: "AWSResourceReferenceWrapper provides a wrapper around
                    *AWSResourceReference\ntype to provide more user friendly syntax
                    for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t
                    \ name: my-api"
                  properties:
                    from:
                      description: |-
                        AWSResourceReference provides all the values necessary to reference another
                        k8s resource for finding the identifier(Id/ARN/Name)
                      properties:
                        name:
                          type: string
                        namespace:
                          type: string
                      type: object
                  type: object
                type: array
              serverlessCacheName:
                description: |-
                  User-provided identifier for the serverless cache. This parameter is stored
                  as a lowercase string.
                type: string
              snapshotARNsToRestore:
                description: |-
                  The ARN(s) of the snapshot that the new serverless cache will be created
                  from. Available for Valkey, Redis OSS and Serverless Memcached only.
                items:
                  type: string
                type: array
              snapshotRetentionLimit:
                description: |-
                  The number of snapshots that will be retained for the serverless cache that
                  is being created. As new snapshots beyond this limit are added, the oldest
                  snapshots will be deleted on a rolling basis. Available for Valkey, Redis
                  OSS and Serverless Memcached only.
                format: int64
                type: integer
              subnetIDs:
                description: |-
                  A list of the identifiers of the subnets where the VPC endpoint for the serverless
                  cache will be deployed. All the subnetIds must belong to the same VPC.
                items:
                  type: string
                type: array
              subnetRefs:
                items:
                  description: "AWSResourceReferenceWrapper provides a wrapper around
                    *AWSResourceReference\ntype to provide more user friendly syntax
                    for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t
                    \ name: my-api"
                  properties:
                    from:
                      description: |-
                        AWSResourceReference provides all the values necessary to reference another
                        k8s resource for finding the identifier(Id/ARN/Name)
                      properties:
                        name:
                          type: string
                        namespace:
                          type: string
                      type: object
                  type: object
                type: array
              tags:
                description: |-
                  The list of tags (key, value) pairs to be added to the serverless cache resource.
                  Default is NULL.
                items:
                  description: |-
                    A tag that can be added to an ElastiCache cluster or replication group. Tags
                    are composed of a Key/Value pair. You can use tags to categorize and track
                    all your ElastiCache resources, with the exception of global replication
                    group. When you add or remove tags on replication groups, those actions will
                    be replicated to all nodes in the replication group. A tag with a null Value
                    is permitted.
                  properties:
                    key:
                      type: string
                    value:
                      type: string
                  type: object
                type: array
              userGroupID:
                description: |-
                  The identifier of the UserGroup to be associated with the serverless cache.
                  Available for Valkey and Redis OSS only. Default is NULL.
                type: string
            required:
            - engine
            - serverlessCacheName
            type: object
          status:
            description: ServerlessCacheStatus defines the observed state of ServerlessCache
            properties:
              ackResourceMetadata:
                description: |-
                  All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
                  that is used to contain resource sync state, account ownership,
                  constructed ARN for the resource
                properties:
                  arn:
                    description: |-
                      ARN is the Amazon Resource Name for the resource. This is a
                      globally-unique identifier and is set only by the ACK service controller
                      once the controller has orchestrated the creation of the resource OR
                      when it has verified that an "adopted" resource (a resource where the
                      ARN annotation was set by the Kubernetes user on the CR) exists and
                      matches the supplied CR's Spec field values.
                      https://github.com/aws/aws-controllers-k8s/issues/270
                    type: string
                  ownerAccountID:
                    description: |-
                      OwnerAccountID is the AWS Account ID of the account that owns the
                      backend AWS service API resource.
                    type: string
                  region:
                    description: Region is the AWS region in which the resource exists
                      or will exist.
                    type: string
                required:
                - ownerAccountID
                - region
                type: object
              conditions:
                description: |-
                  All CRs managed by ACK have a common `Status.Conditions` member that
                  contains a collection of `ackv1alpha1.Condition` objects that describe
                  the various terminal states of the CR and its backend AWS service API
                  resource
                items:
                  description: |-
                    Condition is the common struct used by all CRDs managed by ACK service
                    controllers to indicate terminal states  of the CR and its backend AWS
                    service API resource
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type is the type of the Condition
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              createTime:
                description: When the serverless cache was created.
                format: date-time
                type: string
              endpoint:
                description: |-
                  Represents the information required for client programs to connect to a cache
                  node. This value is read-only.
                properties:
                  address:
                    type: string
                  port:
                    format: int64
                    type: integer
                type: object
              fullEngineVersion:
                description: |-
                  The name and version number of the engine the serverless cache is compatible
                  with.
                type: string
              readerEndpoint:
                description: |-
                  Represents the information required for client programs to connect to a cache
                  node. This value is read-only.
                properties:
                  address:
                    type: string
                  port:
                    format: int64
                    type: integer
                type: object
              status:
                description: |-
                  The current status of the serverless cache. The allowed values are CREATING,
                  AVAILABLE, DELETING, CREATE-FAILED and MODIFYING.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
