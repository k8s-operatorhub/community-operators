apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: service-binding-operator/service-binding-service-cert
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
  name: servicebindings.binding.operators.coreos.com
spec:
  group: binding.operators.coreos.com
  names:
    kind: ServiceBinding
    listKind: ServiceBindingList
    plural: servicebindings
    shortNames:
    - sbr
    - sbrs
    singular: servicebinding
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ServiceBinding expresses intent to bind a service with an application workload.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ServiceBindingSpec defines the desired state of ServiceBinding.
            properties:
              application:
                description: Application identifies the application connecting to the backing service.
                properties:
                  bindingPath:
                    description: BindingPath refers to the paths in the application workload's schema where the binding workload would be referenced.  If BindingPath is not specified, then the default path locations are used.  The default location for ContainersPath is "spec.template.spec.containers".  If SecretPath is not specified, then the name of the secret object does not need to be specified.
                    properties:
                      containersPath:
                        description: ContainersPath defines the path to the corev1.Containers reference. If BindingPath is not specified, the default location is "spec.template.spec.containers".
                        type: string
                      secretPath:
                        description: 'SecretPath defines the path to a string field where the name of the secret object is going to be assigned.  Note: The name of the secret object is same as that of the name of service binding custom resource (metadata.name).'
                        type: string
                    type: object
                  group:
                    description: Group of the referent.
                    type: string
                  kind:
                    description: Kind of the referent.
                    type: string
                  labelSelector:
                    description: A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                        type: object
                    type: object
                  name:
                    description: Name of the referent.
                    type: string
                  resource:
                    description: Resource of the referent.
                    type: string
                  version:
                    description: Version of the referent.
                    type: string
                required:
                - group
                - version
                type: object
              bindAsFiles:
                default: true
                description: BindAsFiles makes the binding values available as files in the application's container.  By default, values are mounted under the path "/bindings"; this can be changed by setting the SERVICE_BINDING_ROOT environment variable.
                type: boolean
              detectBindingResources:
                description: DetectBindingResources is a flag that, when set to true, will cause SBO to search for binding information in the owned resources of the specified services.  If this binding information exists, then the application is bound to these subresources.
                type: boolean
              mappings:
                description: Mappings specifies custom mappings.
                items:
                  description: ServiceBindingMapping defines a new binding from a set of existing bindings.
                  properties:
                    name:
                      description: Name is the name of new binding.
                      type: string
                    value:
                      description: Value specificies a go template that will be rendered and injected into the application.
                      type: string
                  required:
                  - name
                  - value
                  type: object
                type: array
              name:
                description: Name is the name of the service as projected into the workload container.  Defaults to .metadata.name.
                maxLength: 253
                pattern: ^[a-z0-9\-\.]*$
                type: string
              namingStrategy:
                description: 'NamingStrategy defines custom string template for preparing binding names.  It can be set to pre-defined strategies: `none`, `lowercase`, or `uppercase`.  Otherwise, it is treated as a custom go template, and it is handled accordingly.'
                type: string
              services:
                description: Services indicates the backing services to be connected to by an application.  At least one service must be specified.
                items:
                  description: Service defines the selector based on resource name, version, and resource kind.
                  properties:
                    group:
                      description: Group of the referent.
                      type: string
                    id:
                      type: string
                    kind:
                      description: Kind of the referent.
                      type: string
                    name:
                      description: Name of the referent.
                      type: string
                    namespace:
                      description: Namespace of the referent.  If unspecified, assumes the same namespace as ServiceBinding.
                      type: string
                    resource:
                      description: Resource of the referent.
                      type: string
                    version:
                      description: Version of the referent.
                      type: string
                  required:
                  - group
                  - version
                  type: object
                minItems: 1
                type: array
            required:
            - application
            - services
            type: object
          status:
            description: ServiceBindingStatus defines the observed state of ServiceBinding.
            properties:
              conditions:
                description: Conditions describes the state of the operator's reconciliation functionality.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
              secret:
                description: Secret indicates the name of the binding secret.
                type: string
            required:
            - secret
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
